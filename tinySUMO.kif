;; We ask the people using or referencing SUMO cite our primary paper:

;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In
;; Proceedings of the 2nd International Conference on Formal Ontology in
;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds,
;; Ogunquit, Maine, October 17-19, 2001.  Also see http://www.ontologyportal.org

;; author: Adam Pease, apease [at] articulatesoftware [dot] com

(subclass BinaryRelation Relation)
(subclass BinaryPredicate Predicate)
(subclass Predicate Relation)
(subclass Relation Entity)
(subclass Physical Entity)
(subclass Abstract Entity)
(subclass SetOrClass Abstract)
(subclass TimePosition Abstract)
(subclass Set SetOrClass)
(subclass Class SetOrClass)
(subclass Process Physical)
(subclass Object Physical)
(subclass SelfConnectedObject Object)
(subclass Collection Object)
(subclass SingleFamilyResidence SelfConnectedObject)
(subclass SymbolicString Entity)
(subclass HumanLanguage Entity)
(subclass EnglishLanguage HumanLanguage)
(subclass VariableArityRelation Relation)
(subclass BinaryFunction Function)
(subclass UnaryFunction Function)
(subclass Function Relation)
(subclass TernaryRelation Relation)
(subclass Attribute Abstract)
(subclass Physical Entity)
(subclass Region Physical)
(subclass GeographicArea Region)
(subclass Nation GeographicArea)
(subclass City GeographicArea)
(subclass Road GeographicArea)
(subclass TransitiveRelation Relation)
(subclass SymmetricRelation Relation)
(subclass MilitaryForce Physical)
(subclass Agent Object)

(domain disjoint 1 Class)	
(domain disjoint 2 Class)	
(instance disjoint BinaryPredicate)
(instance disjoint SymmetricRelation)

(disjoint Abstract Physical)
(disjoint Object Process)

(=>
  (disjoint ?CLASS1 ?CLASS2)
  (forall (?INST)
    (not
      (and
        (instance ?INST ?CLASS1)
        (instance ?INST ?CLASS2)))))
                
(=>
  (instance ?R TransitiveRelation)
  (=>
    (and
      (?R ?A ?B)
      (?R ?B ?C))
    (?R ?A ?C)))


(=>
  (instance ?REL SymmetricRelation)
  (forall (?INST1 ?INST2)
    (=>
      (?REL ?INST1 ?INST2)
      (?REL ?INST2 ?INST1))))
            
(instance domain TernaryRelation)
(domain domain 1 Relation)
(domain domain 2 Integer)
(domain domain 3 SetOrClass)

(instance range BinaryPredicate)
(instance range AsymmetricRelation)
(domain range 1 Function)
(domain range 2 SetOrClass)

(domain rangeSubclass 1 Function)
(domainSubclass rangeSubclass 2 SetOrClass)
(instance rangeSubclass AsymmetricRelation)
(instance rangeSubclass BinaryPredicate)

(=>
  (and
    (instance ?F Function)
    (rangeSubclass ?F ?C)
    (instance ?I (?F ?X)))
  (instance ?I ?C))

(instance domainSubclass TernaryRelation)
(domain domainSubclass 1 Relation)
(domain domainSubclass 2 Integer)
(domain domainSubclass 3 SetOrClass)

(instance subclass BinaryRelation)
(instance subclass TransitiveRelation)
(domain subclass 1 Entity)
(domain subclass 2 Entity)

(=>
  (subclass ?X ?Y)
  (instance ?X SetOrClass))

(instance instance BinaryPredicate)
(domain instance 1 Entity)
(domain instance 2 SetOrClass)

(instance documentation TernaryRelation)
(domain documentation 1 Entity)
(domain documentation 2 HumanLanguage)
(domain documentation 3 SymbolicString)

(instance format TernaryPredicate)
(domain format 1 Language)
(domain format 2 Entity)
(domain format 3 SymbolicString)

(instance termFormat TernaryPredicate)
(domain termFormat 1 Language)
(domain termFormat 2 Entity)
(domain termFormat 3 SymbolicString)

(instance partition Predicate)
(instance partition VariableArityRelation)
(domain partition 1 Class)
(domain partition 2 Class)

(documentation instance EnglishLanguage "A relation stating the
class membership of an individual.")
(format EnglishLanguage instance "%1 is an instance of %2")

(documentation subclass EnglishLanguage "A relation stating that
one class is more specific than another.")

(format EnglishLanguage subclass "%1 is a %2")
(termFormat EnglishLanguage instance "instance")
(termFormat EnglishLanguage subclass "subclass")

(=>
  (and
    (subclass ?B ?A)
    (subclass ?C ?B))
  (subclass ?C ?A))

(=>
  (and
    (subclass ?B ?A)
    (instance ?C ?B))
  (instance ?C ?A))

(subclass Human Agent)
(instance AbrahamLincoln Human)

(instance located BinaryRelation)
(instance located AntisymmetricRelation)
(domain located 1 Physical)
(domain located 2 Physical)

(subclass AntisymmetricRelation BinaryRelation)
(=>
    (instance ?REL AntisymmetricRelation)
    (forall (?INST1 ?INST2)
        (=>
            (and
                (?REL ?INST1 ?INST2)
                (?REL ?INST2 ?INST1))
            (equal ?INST1 ?INST2))))

(instance attribute BinaryPredicate)
(domain attribute 1 Entity)
(domain attribute 2 Attribute)

(instance maleficiary BinaryPredicate)
(domain maleficiary 1 Process)
(domain maleficiary 2 Entity)


;;-------------------------------------------------
;; Numbers and Arithmetic

;; Formula.MATH_FUNCTIONS

(domain AdditionFn 1 Quantity)
(domain AdditionFn 2 Quantity)
(instance AdditionFn BinaryFunction)
(range AdditionFn Quantity)

(domain SubtractionFn 1 Quantity)
(domain SubtractionFn 2 Quantity)
(instance SubtractionFn BinaryFunction)
(range SubtractionFn Quantity)

(domain MultiplicationFn 1 Quantity)
(domain MultiplicationFn 2 Quantity)
(instance MultiplicationFn BinaryFunction)
(range MultiplicationFn Quantity)

(domain DivisionFn 1 Quantity)
(domain DivisionFn 2 Quantity)
(instance DivisionFn BinaryFunction)
(range DivisionFn Quantity)

(domain FloorFn 1 RealNumber)
(instance FloorFn UnaryFunction)
(range FloorFn Integer)

(subclass Quantity Abstract)
(subclass Integer Quantity)

(domain MeasureFn 1 RealNumber)
(domain MeasureFn 2 UnitOfMeasure)
(instance MeasureFn BinaryFunction)
(range MeasureFn PhysicalQuantity)

(instance parents BinaryRelation)
(domain parents 1 Human)
(domain parents 2 Integer)
(=>
  (instance ?X Human)
  (parents ?X (AdditionFn 1 1)))

;;(parents AbrahamLincoln ?Y)

;;-------------------------------------------------
	
(instance minValue TernaryRelation)
(domain minValue 1 Relation)
(domain minValue 2 Integer)	
(domain minValue 3 Quantity)
	
;; need all Formula.COMPARISON_OPERATOR 

(domain greaterThanOrEqualTo 1 Quantity)
(domain greaterThanOrEqualTo 2 Quantity)
(instance greaterThanOrEqualTo BinaryPredicate)

(domain lessThan 1 Quantity)
(domain lessThan 2 Quantity)
(instance lessThan BinaryPredicate)

(domain lessThanOrEqualTo 1 Quantity)
(domain lessThanOrEqualTo 2 Quantity)
(instance lessThanOrEqualTo BinaryPredicate)

(domain greaterThanOrEqualTo 1 Quantity)
(domain greaterThanOrEqualTo 2 Quantity)
(instance greaterThanOrEqualTo BinaryPredicate)

(domain greaterThan 1 Quantity)
(domain greaterThan 2 Quantity)
(instance greaterThan BinaryPredicate)

(domain ListOrderFn 1 List)		
(domain ListOrderFn 2 Integer)	; was PositiveInteger
(instance ListOrderFn BinaryFunction)		
; (instance ListOrderFn PartialValuedRelation)		
(range ListOrderFn Entity)

(domain ListFn 1 Entity)	
(instance ListFn Function)
(instance ListFn VariableArityRelation)	
(range ListFn List)

(=>
  (and
    (minValue ?R ?ARG ?N)
    (?R @ARGS)
    (equal ?VAL
      (ListOrderFn
        (ListFn @ARGS) ?ARG)))
  (greaterThan ?VAL ?N))

(<=>
     (orientation ?OBJ1 ?OBJ2 Right)
     (orientation ?OBJ2 ?OBJ1 Left))

