tff(month_tp,type,
  month: $i).
  
tff(succClass_tp,type,
  successorClass: ($i * $i) > $o).  
  
tff(daysInMonth_tp,type,
  daysInMonth: ($int * $i) > $o).
    
tff(jan_tp,type,
  january: $i).
tff(janDays_tp,axiom,
  daysInMonth(31,january)).
  
tff(feb_tp,type,
  february: $i).  
tff(februaryDays_tp,axiom,
  daysInMonth(28,february)).
  
tff(mar_tp,type,
  march: $i).
tff(marchDays_tp,axiom,
  daysInMonth(31,march)).
    
tff(apr_tp,type,
  april: $i).
tff(aprilDays_tp,axiom,
  daysInMonth(30,april)).
    
tff(may_tp,type,
  may: $i).
tff(mayDays_tp,axiom,
  daysInMonth(31,may)).
    
tff(jun_tp,type,
  june: $i).
tff(juneDays_tp,axiom,
  daysInMonth(30,june)).
    
tff(july_tp,type,
  july: $i).
tff(julyDays_tp,axiom,
  daysInMonth(31,july)).
    
tff(aug_tp,type,
  august: $i).
tff(augustDays_tp,axiom,
  daysInMonth(31,august)).
    
tff(sep_tp,type,
  september: $i).
tff(septemberDays_tp,axiom,
  daysInMonth(30,september)).
    
tff(oct_tp,type,
  october: $i).
tff(octoberDays_tp,axiom,
  daysInMonth(31,october)).
    
tff(nov_tp,type,
  november: $i).
tff(novemberDays_tp,axiom,
  daysInMonth(30,november)).
    
tff(dec_tp,type,
  december: $i).
tff(decemberDays_tp,axiom,
  daysInMonth(31,december)).
    

tff(succJan,axiom,
  successorClass(january, february)).
tff(succFeb,axiom,
  successorClass(february, march)).
tff(succMar,axiom,
  successorClass(march, april)).
tff(succApr,axiom,
  successorClass(april, may)).
tff(succMay,axiom,
  successorClass(may, june)).
tff(succJun,axiom,
  successorClass(june, july)).
tff(succJul,axiom,
  successorClass(july, august)).
tff(succAug,axiom,
  successorClass(august, september)).
tff(succSep,axiom,
  successorClass(september, october)).
tff(succOct,axiom,
  successorClass(october, november)).
tff(succNov,axiom,
  successorClass(november, december)).

tff(succTrans,axiom,
  (![C1:$i,C2:$i,C3:$i]:(
    (successorClass(C1, C2) &
     successorClass(C2, C3)) =>
       successorClass(C1, C3))) ).
       
%tff(conj,conjecture,  % no binding returned
% SZS answers Tuple [[sF2]|_] for TQT0
%  ?[N:$int]:(
%    N = $difference(5,2))).
    
%tff(conj,conjecture,  % wrong type
%  $difference(5,2)).    

%tff(t1,type,
%  myFn: ($int * $int) > $int).
  
tff(mod_type, type, $mod: ($int * $int) > $int).
  
tff(t1,type,
  foo: ($int) > $o).

tff(myFnAx1,axiom,
  ![X:$int,Y:$int]:(
    $mod(X, Y) = $difference(X, $product($quotient_e(X, Y), Y)))).
        
tff(myFn_def_3, axiom,
    ! [A: $int] : $mod(A, 0) = A ).
            
tff(ax1,axiom,
    foo($mod(6,8))).
            
tff(conj,conjecture, % correctly gives binding of 3 
% SZS answers Tuple [[3]|_] for TQT0
% ~/workspace/vampire/vampire --mode casc -qa plain ~/workspace/sumo/tests/TPTP/TQT0.tff
  ?[N:$int]:(
    foo(N))).  
    

    
%tff(mod_def_1, axiom,
%    ! [A: $int, N: $int] :
%      ( $greater(N, 0) =>
%        ( $mod(A, N) = $difference(A, $product($quotient_e(A, N), N))
%        & $greatereq($mod(A, N), 0)
%        & $less($mod(A, N), N) ) ) ).

%tff(mod_def_2, axiom,
%    ! [A: $int, N: $int] :
%      ( $less(N, 0) =>
%        ( $mod(A, N) = $difference(A, $product($quotient_e(A, N), N))
%        & $lesseq($mod(A, N), 0)
%        & $greater($mod(A, N), N) ) ) ).

%tff(mod_def_3, axiom,
%    ! [A: $int] : $mod(A, 0) = A ).
      
%tff(ax2,axiom,
%    foo($mod(5,2))).

% gives SZS answers Tuple [âˆ€X0.[X0]|_] for TQT0
%tff(ax3,axiom,
%  ![N:$int]:(
%    N = $mod(5,2) &
%    foo(N))).
        
% gives SZS answers Tuple [['$mod'(5,2)]|_] for TQT0        
%tff(conj,conjecture, 
%  ?[N:$int]:(
%    foo(N))).         
