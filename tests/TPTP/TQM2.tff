% 2.  Mary knows that Bill likes Sue and Bob likes Joan.  Does Mary know that Bill likes Sue.  Does Bill like Sue?

% working

%(knows Mary (and (likes Bill Sue) (likes Bob Joan)))

% query: (knows Mary (likes Bill Sue))  - yes
% query: (likes Bill Sue) - yes
% but if we change knows to believes then believing something doesn't make it true so the second query is unknown

% ====
tff(worlds_tp,type,(w : $tType)).
tff(queryworld_tp,type,(queryworld : w)).
tff(mary_tp,type,(mary : $i)).
tff(mary_tp,type,(bob : $i)).
tff(mary_tp,type,(sue : $i)).
tff(mary_tp,type,(bill : $i)).
tff(mary_tp,type,(joan : $i)).
tff(mary_tp,type,(knows : $i)).

tff(knows_Mary_accreln,type,(accreln : ($i * $i * w * w) > $o)).
tff(knows_Mary_accreln_refl,axiom,(! [W:w, P:$i] : accreln(knows,P,W,W))).

tff(likes_tp,type,(likes : (w * $i * $i ) > $o)).

tff(knows_Mary_conjunct,axiom,(? [W:w, W2:w] : (accreln(knows,mary,W2,W) => (likes(W,bill,sue) & likes(W,bob,joan))))).


tff(knows_Mary_conjunct,axiom,(! [W:w, W2:w, H:$i, P1:$i, P2:$i] : ((accreln(knows,H,W2,W) => (likes(W,P1,P2) => likes(W,P1,P2)))))).

% tff(knows_Mary_Bill_Sue,conjecture,(?[X:$i]:(![W:w]:(likes(W,bill,X))))). % saturation

% tff(knows_Mary_Bill_Sue,conjecture,(![W:w]:(likes(W,bill,sue)))). % saturation

tff(knows_Mary_Bill_Sue,conjecture,(? [W:w, W2:w] : (accreln(knows,mary,W2,W) => (likes(W,bill,sue))))). % refutation
