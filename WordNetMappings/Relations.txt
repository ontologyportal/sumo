; === wears ===

dobj(?wear,?item), lemma(wear, ?wear), nsubj(?wear,?animal), isCELTclass(?animal,Person), sumo(?TYPEVAR0,?item), isChildOf(?TYPEVAR0,WearableItem) ==> {(wears ?animal ?item)}.

dobj(?wear,?item-6), lemma(have_on, ?wear), nsubj(?wear,?animal-2), sumo(?TYPEVAR1,?animal-2), isChildOf(?TYPEVAR1,Animal), sumo(?TYPEVAR0,?item-6), isChildOf(?TYPEVAR0,WearableItem) ==> {(wears ?animal-2 ?item-6)}.

; === grasps ===

nsubj(grasps*,?animal), dobj(grasps*,?object), sumo(?TYPEVAR1,?object), isCELTclass(?animal,Person), isChildOf(?TYPEVAR1,Object) ==> {(grasps ?animal ?object)}.

; === birthplace ===

nmod:of(birthplace*,?animal-8), cop(birthplace*,is*), case(?animal-8,of*), nsubj(birthplace*,?object-2), isCELTclass(?animal-8,Person), isChildOf(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-2) ==> {(birthplace ?animal-8 ?object-2)}.

nmod:in(be_born*,?LOC), nsubjpass(be_born*,?animal-8), isCELTclass(?animal-8,Person), isChildOf(?TYPEVAR1,Object), sumo(?TYPEVAR1,?LOC) ==> {(birthplace ?animal-8 ?LOC)}.

nsubj(?LOC, ?animal-8), cop(?LOC, ?COP), case(?LOC, from*), isCELTclass(?animal-8,Person), isChildOf(?TYPEVAR1,Object), sumo(?TYPEVAR1,?LOC) ==> {(birthplace ?animal-8 ?LOC)}.

compound(native*,?LOC), appos(?animal,native*), isCELTclass(?animal,Person), isChildOf(?TYPEVAR1,Object), sumo(?TYPEVAR1,?LOC) ==> {(birthplace ?animal ?LOC)}.

amod(?LOC,native*), nmod:poss(?LOC,?animal), isCELTclass(?animal,Person), isChildOf(?TYPEVAR1,Object), sumo(?TYPEVAR1,?LOC) ==> {(birthplace ?animal ?LOC)}.

nsubj(native*,?animal), cop(native*,?DC1), det(native*,?DC2), nmod:of(native*,?LOC), isCELTclass(?animal,Person), isChildOf(?TYPEVAR1,Object), sumo(?TYPEVAR1,?LOC) ==> {(birthplace ?animal ?LOC)}.

; === located ===

appos(?LITTLE,?BIG), sumo(?TYPEVAR1,?LITTLE), sumo(?TYPEVAR0,?BIG), isChildOf(?TYPEVAR0,GeographicArea), isChildOf(?TYPEVAR1,GeographicArea) ==> {(located ?LITTLE ?BIG)}.

nmod:in(?object-7,?physical-2),  sumo(?TYPEVAR1,?object-7), sumo(?TYPEVAR0,?physical-2), isChildOf(?TYPEVAR0,Physical), isChildOf(?TYPEVAR1,Organization) ==> {(orgLocated ?object-7 ?physical-2)}.

nmod:in(?object-7,?physical-2),  sumo(?TYPEVAR1,?object-7), sumo(?TYPEVAR0,?physical-2), isChildOf(?TYPEVAR0,Physical), isChildOf(?TYPEVAR1,Object) ==> {(located ?object-7 ?physical-2)}.

nmod:poss(?object-7,?physical-2), sumo(?TYPEVAR1,?object-7), sumo(?TYPEVAR0,?physical-2), isChildOf(?TYPEVAR0,Physical), isChildOf(?TYPEVAR1,Organization) ==> {(orgLocated ?object-7 ?physical-2)}.

nmod:poss(?SMALL,?BIG), sumo(?TYPEVAR1,?SMALL), sumo(?TYPEVAR0,?BIG), isChildOf(?TYPEVAR0,GeographicArea), isChildOf(?TYPEVAR1,GeographicArea) ==> {(located ?SMALL ?BIG)}.

nsubj(located*,?physical-2), nmod:at(located*,?object-7),  sumo(?TYPEVAR1,?object-7), sumo(?TYPEVAR0,?physical-2), isChildOf(?TYPEVAR0,Physical), isChildOf(?TYPEVAR1,Object) ==> {(located ?physical-2 ?object-7)}.

nsubjpass(located*,?physical-2), nmod:at(located*,?object-7),  sumo(?TYPEVAR1,?object-7), sumo(?TYPEVAR0,?physical-2), isChildOf(?TYPEVAR0,Physical), isChildOf(?TYPEVAR1,Object) ==> {(located ?physical-2 ?object-7)}.

nmod:in(?V,?SMALL), nmod:in(?V,?BIG), different(?SMALL,?BIG), sumo(?TYPEVAR1,?BIG), sumo(?TYPEVAR0,?SMALL), isChildOf(?TYPEVAR0,Physical), isChildOf(?TYPEVAR1,Object), sumo(?TYPEVAR2,?V), isChildOf(?TYPEVAR2,Process) ==> {(located ?SMALL ?BIG)}.

appos(?SMALL,?THING), nmod:in(?THING,?BIG), sumo(?TYPEVAR1,?BIG), sumo(?TYPEVAR0,?SMALL), isChildOf(?TYPEVAR0,Physical), isChildOf(?TYPEVAR1,Object) ==> {(located ?SMALL ?BIG)}.

; === employs ===

nsubj(employs*,?agent-2), dobj(employs*,?agent-6), sumo(?TYPEVAR0,?agent-2), sumo(?TYPEVAR1,?agent-6), isChildOf(?TYPEVAR0,Agent), isChildOf(?TYPEVAR1,CognitiveAgent) ==> {(employs ?agent-2 ?agent-6)}.

nmod:of(?agent-6,?ORG), sumo(?TYPEVAR0,?ORG), sumo(?TYPEVAR1,?agent-6), isChildOf(?TYPEVAR0,Agent), isChildOf(?TYPEVAR1,CognitiveAgent) ==> {(employs ?ORG ?agent-6)}.

nmod:for(?VERB,?ORG), nsubj(?VERB,?agent-6), sumo(?TYPEVAR0,?ORG), sumo(?TYPEVAR1,?agent-6), isChildOf(?TYPEVAR0,Organization), isChildOf(?TYPEVAR1,CognitiveAgent) ==> {(employs ?ORG ?agent-6)}.

appos(?agent,?pos), nmod:at(?pos,?ORG), sumo(?TYPEVAR0,?ORG), sumo(?TYPEVAR1,?agent), isChildOf(?TYPEVAR0,Agent), isChildOf(?TYPEVAR1,CognitiveAgent) ==> {(employs ?ORG ?agent)}.

nmod:of(?P,?ORG), isChildOf(?TYPEVAR1,Organization), sumo(?TYPEVAR1,?ORG), isChildOf(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?P) ==>  {(employs ?ORG ?P)}.

appos(?P,?ROLE), compound(?ROLE,?ORG), isChildOf(?TYPEVAR1,Organization), sumo(?TYPEVAR1,?ORG), isChildOf(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?P), isChildOf(?TYPEVAR2,SocialRole), sumo(?TYPEVAR2,?ROLE) ==>  {(employs ?ORG ?P)}.

; === leader ===

nmod:of(leader*,?agent), case(?agent,of*), nsubj(leader*,?human), cop(leader*,is*), isCELTclass(?human,Person), sumo(?TYPEVAR0,?agent), isChildOf(?TYPEVAR0,Agent) ==> {(leader ?agent ?human)}.

nmod:of(leader*,?ORG), appos(?human,leader*),  sumo(?TYPEVAR0,?ORG), isChildOf(?TYPEVAR0,Agent), isCELTclass(?human,Person) ==> {(leader ?ORG ?human)}.

; === inhabits ===

nsubj(lives*,?organism-2), case(?object-6,in*), nmod:in(lives*,?object-6), isChildOf(?TYPEVAR1,Object), isChildOf(?TYPEVAR0,Organism), sumo(?TYPEVAR1,?object-6), sumo(?TYPEVAR0,?organism-2) ==> {(inhabits ?organism-2 ?object-6)}.

nmod:poss(?H,?P), sumo(?TYPEVAR0,?H), compound(?H,?PLACE), isChildOf(?TYPEVAR0,Residence), isChildOf(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?P) ==>  {(inhabits ?P ?PLACE)}.

nmod:of(?P,?LOC), isChildOf(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR1,?LOC), isChildOf(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?P) ==>  {(inhabits ?P ?LOC)}.

compound(?P,?LOC), compound(?P,?ROLE), isChildOf(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR1,?LOC), isChildOf(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?P), isChildOf(?TYPEVAR2,SocialRole), sumo(?TYPEVAR2,?ROLE) ==>  {(inhabits ?LOC ?P)}.

; === kills ===

dobj(?kills,?victim), nsubj(?kills,?killer), isCELTclass(?killer,Person),  isCELTclass(?victim,Person), isChildOf(?V,Killing), sumo(?V,?kills) ==> {(kills ?killer ?victim)}.

nmod:agent(?kills,?killer), nsubjpass(?kills,?victim), isCELTclass(?killer,Person),  isCELTclass(?victim,Person), isChildOf(?V,Killing), sumo(?V,?kills) ==> {(kills ?killer ?victim)}.

compound(?kills,?victim), nmod:by(?kills,?killer), isCELTclass(?killer,Person),  isCELTclass(?victim,Person), isChildOf(?V,Killing), sumo(?V,?kills) ==> {(kills ?killer ?victim)}.

appos(?killer,assassin*), nmod:of(assassin*,?victim), isCELTclass(?killer,Person),  isCELTclass(?victim,Person) ==> {(kills ?killer ?victim)}.

appos(?killer,murderer*), nmod:of(murderer*,?victim), isCELTclass(?killer,Person), isCELTclass(?victim,Person) ==> {(kills ?killer ?victim)}.

nmod:poss(assassin*,?victim), appos(assassin*,?killer), isCELTclass(?killer,Person),  isCELTclass(?victim,Person) ==> {(kills ?killer ?victim)}.

nmod:poss(murderer*,?victim), appos(murderer*,?killer), isCELTclass(?killer,Person),  isCELTclass(?victim,Person) ==> {(kills ?killer ?victim)}.

; =======

dep(brokers*,sale*), nmod:of(sale*,?transaction-9), compound(brokers*,?agent-2), case(?transaction-9,of*), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?transaction-9), isSubclass(?TYPEVAR0,FinancialTransaction) ==> {(broker ?transaction-9 ?agent-2)}.

case(radiation*,of*), aux(absorbed*,has*), amod(radiation*,equal*), nmod:to(equal*,?measure-13), nsubj(absorbed*,?object-2), dobj(absorbed*,dose*), nmod:of(dose*,radiation*), case(?measure-13,to*), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,RadiationMeasure), sumo(?TYPEVAR0,?measure-13) ==> {(absorbedDose ?object-2 ?measure-13)}.

nsubj(area*,?region-2), cop(area*,is*), case(?operation-10,for*), nmod:for(area*,?operation-10), amod(area*,operational*), sumo(?TYPEVAR0,?region-2), isSubclass(?TYPEVAR0,Region), sumo(?TYPEVAR1,?operation-10), isSubclass(?TYPEVAR1,MilitaryOperation) ==> {(areaOfOperation ?region-2 ?operation-10)}.

dobj(coordinates*,?process-6), nsubj(coordinates*,?process-2), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR0,?process-6), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR1,?process-2) ==> {(coordinates ?process-2 ?process-6)}.

; conj:and(agent*,agent*), nsubj(enemies*,agent*), nmod:of(enemies*,other*), cc(agent*,and*), case(other*,of*), amod(agent*,other*), nsubj(enemies*,agent*), cop(enemies*,are*) ==> ; {(enemy null null)}.

nsubj(moves*,?object-2), nmod:during(moves*,?motion-6), case(?motion-6,during*), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR1,Motion), sumo(?TYPEVAR1,?motion-6), isSubclass(?TYPEVAR0,Object) ==> {(moves ?motion-6 ?object-2)}.

; appos(%*,s*), case(translocation*,during*), compound(location*,%*), compound(location*,?object-2), nmod:during(location*,translocation*), compound(location*,change*), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-2) ==> {(changesLocation null ?object-2)}.

dep(contains*,The*), nsubj(contains*,?bearing-3), dobj(contains*,formula*), amod(contains*,?physical-4), dep(formula*,?formula-9), dep(contains*,?content-2), isSubclass(?TYPEVAR0,ContentBearingPhysical), isSubclass(?TYPEVAR3,ContentBearingPhysical), isSubclass(?TYPEVAR1,ContentBearingPhysical), sumo(?TYPEVAR0,?bearing-3), isSubclass(?TYPEVAR2,Formula), sumo(?TYPEVAR1,?physical-4), sumo(?TYPEVAR3,?content-2), sumo(?TYPEVAR2,?formula-9) ==> {(containsFormula ?content-2 ?formula-9)}.

dobj(permits*,?formula-5), nsubj(permits*,?agent-2), sumo(?TYPEVAR0,?formula-5), isSubclass(?TYPEVAR0,Formula), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent) ==> {(permits ?agent-2 ?formula-5)}.

dobj(prohibits*,?formula-5), nsubj(prohibits*,?agent-2), isSubclass(?TYPEVAR0,Formula), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?formula-5) ==> {(prohibits ?agent-2 ?formula-5)}.

nsubj(rewards*,?agent-2), dobj(rewards*,?agent-6), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?agent-6), isSubclass(?TYPEVAR1,Agent) ==> {(rewards ?agent-2 ?agent-6)}.

nsubj(punishes*,?agent-2), dobj(punishes*,?agent-6), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?agent-6), isSubclass(?TYPEVAR1,Agent) ==> {(punishes ?agent-2 ?agent-6)}.

dobj(inhibits*,?kind-5), nsubj(inhibits*,?agent-2), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?kind-5), isSubclass(?TYPEVAR0,Process) ==> {(inhibits ?agent-2 ?kind-5)}.

cop(evidence*,is*), nmod:in(evidence*,?action-8), case(?action-8,in*), nsubj(evidence*,?physical-2), isSubclass(?TYPEVAR0,LegalAction), sumo(?TYPEVAR0,?action-8), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR1,?physical-2) ==> {(evidence ?action-8 ?physical-2)}.

nsubj(witness*,?entity-2), case(?action-9,in*), cop(witness*,is*), nmod:in(witness*,?action-9), sumo(?TYPEVAR0,?entity-2), isSubclass(?TYPEVAR1,LegalAction), sumo(?TYPEVAR1,?action-9), isSubclass(?TYPEVAR0,Entity) ==> {(witness ?action-9 ?entity-2)}.

case(?placing-9,in*), nmod:in(officer*,?placing-9), amod(officer*,arresting*), nsubj(officer*,?entity-2), cop(officer*,is*), isSubclass(?TYPEVAR0,PlacingUnderArrest), sumo(?TYPEVAR1,?entity-2), sumo(?TYPEVAR0,?placing-9), isSubclass(?TYPEVAR1,Entity) ==> {(arrestingOfficer ?placing-9 ?entity-2)}.

compound(jails*,?agent-2), nsubj(?human-5,jails*), sumo(?TYPEVAR1,?human-5), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,Human) ==> {(jailer ?agent-2 ?human-5)}.

nmod:in(victim*,?action-9), nsubj(victim*,?entity-2), case(?action-9,in*), cop(victim*,is*), sumo(?TYPEVAR0,?action-9), isSubclass(?TYPEVAR0,CriminalAction), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR1,?entity-2) ==> {(victim ?action-9 ?entity-2)}.

case(?action-9,of*), cop(perpetrator*,is*), nmod:of(perpetrator*,?action-9), nsubj(perpetrator*,?entity-2), isSubclass(?TYPEVAR0,CriminalAction), sumo(?TYPEVAR0,?action-9), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR1,Entity) ==> {(perpetrator ?action-9 ?entity-2)}.

cop(lawyer*,is*), nsubj(lawyer*,?entity-2), nmod:in(lawyer*,?action-10), case(?action-10,in*), compound(lawyer*,defense*), isSubclass(?TYPEVAR1,LegalAction), sumo(?TYPEVAR0,?entity-2), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?action-10) ==> {(defenseLawyer ?action-10 ?entity-2)}.

case(?action-9,in*), nmod:in(prosecutor*,?action-9), nsubj(prosecutor*,?entity-2), cop(prosecutor*,is*), isSubclass(?TYPEVAR0,LegalAction), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR0,?action-9), sumo(?TYPEVAR1,?entity-2) ==> {(prosecutor ?action-9 ?entity-2)}.

; dep(trusts*,agent*), amod(agent*,other*), compound(trusts*,agent*) ==> ; ; {(trusts null null null)}.

; nsubj(distrusts*,?agent-2), dobj(distrusts*,?agent-6), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?agent-6), isSubclass(?TYPEVAR1,Agent) ==> {(distrusts ?agent-2 ?agent-6 null)}.

nsubj(attorney*,?human-2), case(?action-9,in*), nmod:in(attorney*,?action-9), cop(attorney*,is*), sumo(?TYPEVAR0,?human-2), isSubclass(?TYPEVAR1,LegalAction), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?action-9) ==> {(attorney ?action-9 ?human-2)}.

nmod:for(counsel*,?agent-8), nsubj(counsel*,?human-2), case(?agent-8,for*), cop(counsel*,is*), case(?action-12,in*), sumo(?TYPEVAR0,?agent-8), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR2,LegalAction), sumo(?TYPEVAR1,?human-2), sumo(?TYPEVAR2,?action-12), isSubclass(?TYPEVAR1,Human) ==> {(counselInCase ?human-2 ?agent-8 ?action-12)}.

nsubj(age*,?duration-3), case(?area-17,in*), cop(age*,is*), nmod:of(age*,majority*), case(majority*,of*), acl:relcl(?time-2,age*), nmod:for(majority*,?kind-11), case(?kind-11,for*), sumo(?TYPEVAR0,?duration-3), sumo(?TYPEVAR3,?kind-11), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR2,?time-2), isSubclass(?TYPEVAR3,Process), sumo(?TYPEVAR1,?area-17), isSubclass(?TYPEVAR2,TimeDuration), isSubclass(?TYPEVAR0,TimeDuration) ==> {(ageOfMajorityForProcess ?time-2 ?area-17 ?kind-11)}.

aux(used*,can*), nmod:for(model*,?kind-11), case(model*,as*), nsubjpass(used*,?model-2), auxpass(used*,be*), case(?kind-11,for*), nmod:as(used*,model*), isSubclass(?TYPEVAR1,Model), sumo(?TYPEVAR0,?kind-11), sumo(?TYPEVAR1,?model-2), isSubclass(?TYPEVAR0,EngineeringComponent) ==> {(models ?model-2 ?kind-11)}.

cop(meronym*,is*), case(?kind-10,of*), nmod:of(meronym*,?kind-10), nsubj(meronym*,?kind-2), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?kind-10), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-2) ==> {(meronym ?kind-2 ?kind-10)}.

amod(domain*,physical*), amod(form*,?physical-7), amod(form*,?other-6), cc(?dimension-3,and*), compound(form*,?dimension-8), dep(form*,domain*), conj:and(?dimension-3,form*), dep(domain*,?domain-14), isSubclass(?TYPEVAR4,PhysicalDomain), isSubclass(?TYPEVAR2,PhysicalDimension), isSubclass(?TYPEVAR3,PhysicalDimension), sumo(?TYPEVAR4,?domain-14), sumo(?TYPEVAR3,?dimension-8), sumo(?TYPEVAR2,?dimension-3), sumo(?TYPEVAR0,?physical-7), sumo(?TYPEVAR1,?other-6), isSubclass(?TYPEVAR1,PhysicalDimension), isSubclass(?TYPEVAR0,PhysicalDimension) ==> {(physicalDomain ?dimension-3 ?other-6 ?domain-14)}.

compound(?dimension-8,dimension*), dobj(has*,?dimension-8), nsubj(has*,?quantity-3), isSubclass(?TYPEVAR0,PhysicalDimension), sumo(?TYPEVAR0,?dimension-8), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR1,MultipoleQuantity) ==> {(hasDimension ?quantity-3 ?dimension-8)}.

aux(variable*,has*), dobj(variable*,?variable-8), nsubj(variable*,?quantity-3), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR0,MultipoleVariable), sumo(?TYPEVAR0,?variable-8), isSubclass(?TYPEVAR1,MultipoleQuantity) ==> {(hasVariable ?quantity-3 ?variable-8)}.

; nmod:as(variable*,variable*), dobj(has*,variable*), amod(pole*,multipole*), advmod(variable*,across*), amod(variable*,multipole*), nsubj(has*,pole*), case(variable*,as*) ==> ; {(hasAcrossVariable null null)}.

; nmod:as(has*,variable*), nsubj(has*,pole*), amod(pole*,multipole*), advmod(variable*,through*), dobj(has*,variable*), case(variable*,as*), amod(variable*,multipole*) ==> ; {(hasThroughVariable null null)}.

nmod:of(abbreviation*,?entity-9), cop(abbreviation*,is*), case(?entity-9,of*), nsubj(abbreviation*,?string-3), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?string-3), sumo(?TYPEVAR0,?entity-9), isSubclass(?TYPEVAR1,SymbolicString) ==> {(abbreviation ?string-3 ?entity-9)}.

cop(height*,is*), case(?aircraft-10,of*), nmod:of(height*,?aircraft-10), amod(height*,absolute*), nsubj(height*,?measure-3), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,AltitudeMeasure), sumo(?TYPEVAR0,?aircraft-10), isSubclass(?TYPEVAR0,Aircraft) ==> {(absoluteHeight ?aircraft-10 ?measure-3)}.

nsubj(number*,?integer-3), case(?account-11,of*), nmod:of(number*,?account-11), compound(number*,account*), cop(number*,is*), sumo(?TYPEVAR1,?account-11), sumo(?TYPEVAR0,?integer-3), isSubclass(?TYPEVAR1,FinancialAccount), isSubclass(?TYPEVAR0,PositiveInteger) ==> {(accountNumber ?account-11 ?integer-3)}.

cop(status*,is*), case(?account-10,of*), nsubj(status*,?FinancialAccountStatus-2), compound(status*,account*), nmod:of(status*,?account-10), isSubclass(?TYPEVAR0,FinancialAccount), isSubclass(?TYPEVAR1,FinancialAccountStatus), sumo(?TYPEVAR1,?FinancialAccountStatus-2), sumo(?TYPEVAR0,?account-10) ==> {(accountStatus ?account-10 ?FinancialAccountStatus-2)}.

cop(interest*,is*), nmod:of(interest*,?bond-9), nsubj(interest*,?interest-2), amod(interest*,accrued*), case(?bond-9,of*), sumo(?TYPEVAR1,?interest-2), isSubclass(?TYPEVAR1,Interest), isSubclass(?TYPEVAR0,Bond), sumo(?TYPEVAR0,?bond-9) ==> {(accruedInterest ?bond-9 ?interest-2)}.

nmod:of(acquaintance*,?human-9), nsubj(acquaintance*,?human-3), case(?human-9,of*), cop(acquaintance*,is*), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR1,?human-3), sumo(?TYPEVAR0,?human-9), isSubclass(?TYPEVAR0,Human) ==> {(acquaintance ?human-9 ?human-3)}.

amod(center*,administrative*), case(?area-12,of*), nsubj(center*,?area-4), nmod:of(center*,?area-12), cop(center*,is*), sumo(?TYPEVAR1,?area-4), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(administrativeCenter ?area-12 ?area-4)}.

nsubj(administrator*,?agent-3), nmod:of(administrator*,?account-10), case(?account-10,of*), cop(administrator*,is*), sumo(?TYPEVAR0,?agent-3), isSubclass(?TYPEVAR0,CognitiveAgent), isSubclass(?TYPEVAR1,FinancialAccount), sumo(?TYPEVAR1,?account-10) ==> {(administrator ?account-10 ?agent-3)}.

cop(status*,is*), case(?agent-11,of*), compound(status*,administrator*), nsubj(status*,?attribute-3), nmod:of(status*,?agent-11), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-11), sumo(?TYPEVAR1,?attribute-3), isSubclass(?TYPEVAR1,StatusAttribute) ==> {(administratorStatus ?agent-11 ?attribute-3)}.

amod(organization*,affiliated*), nsubj(organization*,?organization-3), case(?organization-10,of*), nmod:of(organization*,?organization-10), cop(organization*,is*), isSubclass(?TYPEVAR0,Organization), isSubclass(?TYPEVAR1,Organization), sumo(?TYPEVAR0,?organization-3), sumo(?TYPEVAR1,?organization-10) ==> {(affiliatedOrganization ?organization-10 ?organization-3)}.

case(?agent-12,of*), case(area*,in*), acl(agent*,operates*), nsubj(agent*,?area-3), cop(agent*,is*), nmod:of(area*,?agent-12), nmod:in(operates*,area*), sumo(?TYPEVAR0,?agent-12), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,GeographicArea) ==> {(agentOperatesInArea ?agent-12 ?area-3)}.

compound(date*,adoption*), nsubj(date*,?kind-2), case(?proposition-13,of*), compound(date*,agreement*), nmod:of(date*,?proposition-13), cop(date*,is*), isSubclass(?TYPEVAR1,Proposition), isSubclass(?TYPEVAR0,TimePosition), sumo(?TYPEVAR0,?kind-2), sumo(?TYPEVAR1,?proposition-13) ==> {(agreementAdoptionDate ?proposition-13 ?kind-2)}.

nsubj(agreement*,?point-3), cop(agreement*,is*), amod(date*,effective*), nmod:of(date*,?agreement-11), case(?agreement-11,of*), dobj(agreement*,date*), isSubclass(?TYPEVAR1,Agreement), isSubclass(?TYPEVAR0,TimePoint), sumo(?TYPEVAR1,?agreement-11), sumo(?TYPEVAR0,?point-3) ==> {(agreementEffectiveDate ?agreement-11 ?point-3)}.

case(?proposition-13,of*), nmod:of(effective*,?proposition-13), nsubj(agreement*,?kind-2), case(?proposition-13,during*), cop(agreement*,is*), amod(agreement*,effective*), isSubclass(?TYPEVAR1,TimePosition), isSubclass(?TYPEVAR0,Proposition), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?proposition-13) ==> {(agreementEffectiveDuring ?proposition-13 ?kind-2)}.

cop(period*,is*), case(?agreement-10,of*), nmod:of(period*,?agreement-10), nsubj(period*,?interval-3), acl:relcl(?time-2,period*), compound(period*,agreement*), sumo(?TYPEVAR0,?agreement-10), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR0,Agreement), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR2,?time-2), sumo(?TYPEVAR1,?interval-3) ==> {(agreementPeriod ?agreement-10 ?interval-3)}.

compound(date*,agreement*), nmod:npmod(date*,?kind-7), compound(date*,?proposition-2), case(?proposition-14,for*), compound(date*,revision*), sumo(?TYPEVAR0,?kind-7), sumo(?TYPEVAR1,?proposition-2), isSubclass(?TYPEVAR2,Proposition), sumo(?TYPEVAR2,?proposition-14), isSubclass(?TYPEVAR1,Proposition), isSubclass(?TYPEVAR0,TimePosition) ==> {(agreementRevisionDate ?proposition-2 ?kind-7 ?proposition-14)}.

cop(type*,is*), amod(type*,agricultural*), nmod:of(type*,?area-13), case(?area-13,of*), nsubj(type*,?kind-2), compound(type*,product*), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?area-13), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-2) ==> {(agriculturalProductType ?area-13 ?kind-2)}.

; amod(type*,agricultural*), compound(type*,product*), nmod:by(type*,rank*), amod(type*,?geopolitical-2), case(?kind-15,for*), case(rank*,by*), compound(type*,?area-3), advmod(rank*,?kind-10), sumo(?TYPEVAR3,?kind-10), isSubclass(?TYPEVAR3,Object), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR0,?geopolitical-2), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?kind-15), isSubclass(?TYPEVAR2,GeopoliticalArea) ==> {(agriculturalProductTypeByRank ?area-3 ?kind-10 ?kind-15)}.

nsubj(aim*,?string-3), nmod:of(aim*,organization*), nmod:of(organization*,?organization-11), cop(aim*,is*), case(?organization-11,of*), case(organization*,of*), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?organization-11), sumo(?TYPEVAR0,?string-3), isSubclass(?TYPEVAR1,Organization) ==> {(aimOfOrganization ?organization-11 ?string-3)}.

nmod:of(temperature*,?object-10), case(?object-10,of*), compound(temperature*,air*), nsubj(temperature*,?measure-3), cop(temperature*,is*), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,TemperatureMeasure), sumo(?TYPEVAR0,?object-10) ==> {(airTemperature ?object-10 ?measure-3)}.

cop(alias*,is*), nmod:of(alias*,?string-9), case(?string-9,of*), nsubj(alias*,?agent-2), sumo(?TYPEVAR0,?string-9), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,Agent) ==> {(alias ?string-9 ?agent-2)}.

nsubj(allegiance*,?agent-4), case(?agent-11,of*), nmod:of(allegiance*,?agent-11), cop(allegiance*,is*), sumo(?TYPEVAR1,?agent-11), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-4) ==> {(allegiance ?agent-11 ?agent-4)}.

nsubj(?school-9,almaMater*), cop(?school-9,is*), nmod:poss(almaMater*,?human-2), isSubclass(?TYPEVAR1,Human), isSubclass(?TYPEVAR0,PostSecondarySchool), sumo(?TYPEVAR1,?human-2), sumo(?TYPEVAR0,?school-9) ==> {(almaMater ?human-2 ?school-9)}.

cop(organization*,is*), compound(organization*,ancestor*), nmod:of(organization*,?organization-10), nsubj(organization*,?organization-3), case(?organization-10,of*), isSubclass(?TYPEVAR1,Organization), sumo(?TYPEVAR0,?organization-10), sumo(?TYPEVAR1,?organization-3), isSubclass(?TYPEVAR0,Organization) ==> {(ancestorOrganization ?organization-10 ?organization-3)}.

nsubj(measure*,?measure-4), cop(measure*,is*), amod(measure*,angular*), nmod:of(measure*,?angle-13), case(?angle-13,of*), isSubclass(?TYPEVAR1,TwoDimensionalAngle), sumo(?TYPEVAR1,?angle-13), isSubclass(?TYPEVAR0,PlaneAngleMeasure), sumo(?TYPEVAR0,?measure-4) ==> {(angularMeasure ?angle-13 ?measure-4)}.

acl:relcl(?time-2,anniversary*), nsubj(anniversary*,?interval-3), nmod:of(anniversary*,?physical-9), case(?physical-9,of*), cop(anniversary*,is*), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR2,?physical-9), sumo(?TYPEVAR0,?time-2), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR1,?interval-3), isSubclass(?TYPEVAR2,Physical) ==> {(anniversary ?physical-9 ?interval-3)}.

nsubj(consumption*,?quantity-3), amod(consumption*,annual*), nmod:of(consumption*,?area-12), case(?area-12,of*), compound(consumption*,electricity*), cop(consumption*,is*), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR0,PhysicalQuantity), sumo(?TYPEVAR0,?quantity-3) ==> {(annualElectricityConsumption ?area-12 ?quantity-3)}.

case(?area-12,of*), cop(export*,is*), nsubj(export*,?quantity-3), compound(export*,electricity*), amod(export*,annual*), nmod:of(export*,?area-12), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,PhysicalQuantity), sumo(?TYPEVAR0,?area-12) ==> {(annualElectricityExport ?area-12 ?quantity-3)}.

case(?area-12,of*), nsubj(import*,?quantity-3), compound(import*,electricity*), amod(import*,annual*), cop(import*,is*), nmod:of(import*,?area-12), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,PhysicalQuantity), sumo(?TYPEVAR1,?quantity-3), sumo(?TYPEVAR0,?area-12) ==> {(annualElectricityImport ?area-12 ?quantity-3)}.

amod(production*,annual*), cop(production*,is*), compound(production*,electricity*), nmod:of(production*,?area-12), nsubj(production*,?quantity-3), case(?area-12,of*), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?quantity-3), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR1,PhysicalQuantity) ==> {(annualElectricityProduction ?area-12 ?quantity-3)}.

cop(expenditures*,is*), case(?area-13,of*), case(area*,of*), amod(expenditures*,annual*), nmod:of(expenditures*,area*), nmod:of(area*,?area-13), nsubj(expenditures*,?measure-3), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?area-13) ==> {(annualExpendituresOfArea ?area-13 ?measure-3)}.

nmod:in(expenditures*,period*), amod(expenditures*,annual*), dep(?area-3,expenditures*), case(?kind-15,for*), dep(period*,?measure-12), case(area*,of*), case(period*,in*), nmod:of(expenditures*,area*), isSubclass(?TYPEVAR2,CurrencyMeasure), sumo(?TYPEVAR2,?measure-12), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR1,?kind-15), sumo(?TYPEVAR0,?area-3) ==> {(annualExpendituresOfAreaInPeriod ?area-3 ?measure-12 ?kind-15)}.

nmod:of(total*,?area-12), compound(total*,export*), case(?area-12,of*), nsubj(total*,?measure-3), cop(total*,is*), amod(total*,annual*), sumo(?TYPEVAR0,?area-12), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,CurrencyMeasure) ==> {(annualExportTotal ?area-12 ?measure-3)}.

compound(total*,import*), case(?area-12,of*), nsubj(total*,?measure-3), cop(total*,is*), amod(total*,annual*), nmod:of(total*,?area-12), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(annualImportTotal ?area-12 ?measure-3)}.

nmod:of(revenues*,area*), case(?area-13,of*), nmod:of(area*,?area-13), amod(revenues*,annual*), cop(revenues*,is*), case(area*,of*), nsubj(revenues*,?measure-3), sumo(?TYPEVAR0,?area-13), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,CurrencyMeasure) ==> {(annualRevenuesOfArea ?area-13 ?measure-3)}.

dep(?area-3,revenues*), dobj(period*,?measure-12), case(area*,of*), nmod:of(revenues*,area*), case(period*,in*), case(?kind-15,for*), amod(revenues*,annual*), nmod:in(revenues*,period*), sumo(?TYPEVAR1,?measure-12), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?area-3), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR2,?kind-15) ==> {(annualRevenuesOfAreaInPeriod ?area-3 ?measure-12 ?kind-15)}.

amod(area*,arable*), nsubj(area*,?quantity-3), compound(area*,land*), case(?area-12,of*), nmod:of(area*,?area-12), cop(area*,is*), isSubclass(?TYPEVAR1,GeographicArea), isSubclass(?TYPEVAR0,ConstantQuantity), sumo(?TYPEVAR0,?quantity-3), sumo(?TYPEVAR1,?area-12) ==> {(arableLandArea ?area-12 ?quantity-3)}.

nsubj(functionality*,?kind-2), amod(functionality*,associated*), case(?attribute-13,of*), nmod:of(functionality*,?attribute-13), cop(functionality*,is*), isSubclass(?TYPEVAR0,Protein), isSubclass(?TYPEVAR1,ProteinStructuralAttribute), sumo(?TYPEVAR0,?kind-2), sumo(?TYPEVAR1,?attribute-13) ==> {(associatedFunctionality ?attribute-13 ?kind-2)}.

nmod:in(associate*,organization*), nsubj(associate*,?group-2), nmod:of(organization*,?agent-10), case(organization*,in*), cop(associate*,is*), case(?agent-10,of*), isSubclass(?TYPEVAR0,Group), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?group-2), sumo(?TYPEVAR1,?agent-10) ==> {(associateInOrganization ?agent-10 ?group-2)}.

case(?group-11,for*), compound(associate*,?agent-2), dobj(status*,?attribute-8), nmod:with(associate*,status*), case(status*,with*), sumo(?TYPEVAR2,?attribute-8), isSubclass(?TYPEVAR2,RelationalAttribute), sumo(?TYPEVAR0,?group-11), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Group), sumo(?TYPEVAR1,?agent-2) ==> {(associateWithStatus ?agent-2 ?attribute-8 ?group-11)}.

cop(number*,is*), amod(number*,atomic*), case(?kind-10,of*), nmod:of(number*,?kind-10), nsubj(number*,?integer-3), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR0,?kind-10), isSubclass(?TYPEVAR0,ElementalSubstance), sumo(?TYPEVAR1,?integer-3) ==> {(atomicNumber ?kind-10 ?integer-3)}.

case(money*,at*), nmod:of(money*,?option-11), nmod:at(an*,money*), case(?option-11,of*), amod(?position-3,is*), nsubj(is*,an*), isSubclass(?TYPEVAR0,Option), sumo(?TYPEVAR1,?position-3), isSubclass(?TYPEVAR1,TimePosition), sumo(?TYPEVAR0,?option-11) ==> {(atTheMoney ?option-11 ?position-3)}.

case(?list-9,of*), cop(average*,is*), nsubj(average*,?number-3), nmod:of(average*,?list-9), isSubclass(?TYPEVAR1,RealNumber), isSubclass(?TYPEVAR0,List), sumo(?TYPEVAR1,?number-3), sumo(?TYPEVAR0,?list-9) ==> {(average ?list-9 ?number-3)}.

dep(?area-3,precipitation*), case(period*,for*), nmod:for(precipitation*,period*), amod(precipitation*,average*), dep(period*,?time-9), case(?quantity-14,for*), isSubclass(?TYPEVAR2,ConstantQuantity), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR2,?quantity-14), sumo(?TYPEVAR1,?time-9), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-3) ==> {(averagePrecipitationForPeriod ?area-3 ?time-9 ?quantity-14)}.

amod(rainfall*,average*), case(?measure-13,for*), dep(?area-3,rainfall*), case(period*,for*), nmod:for(rainfall*,period*), nmod:tmod(period*,?month-9), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR2,Month), isSubclass(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR0,?measure-13), sumo(?TYPEVAR2,?month-9) ==> {(averageRainfallForPeriod ?area-3 ?month-9 ?measure-13)}.

nmod:for(temperature*,period*), dep(period*,?time-9), case(?measure-14,for*), dep(?area-3,temperature*), compound(temperature*,average*), case(period*,for*), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR2,GeographicArea), isSubclass(?TYPEVAR0,TimeDuration), sumo(?TYPEVAR0,?time-9), isSubclass(?TYPEVAR1,TemperatureMeasure), sumo(?TYPEVAR1,?measure-14) ==> {(averageTemperatureForPeriod ?area-3 ?time-9 ?measure-14)}.

nsubj(axis*,?object-3), nmod:of(axis*,?object-9), case(?object-9,of*), cop(axis*,is*), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?object-9), sumo(?TYPEVAR0,?object-3), isSubclass(?TYPEVAR1,Object) ==> {(axis ?object-9 ?object-3)}.

case(?network-12,of*), nsubj(bandwidth*,?bits-2), case(?network-12,of*), nmod:of(bandwidth*,?network-12), cop(bandwidth*,is*), isSubclass(?TYPEVAR0,ComputerNetwork), sumo(?TYPEVAR1,?bits-2), isSubclass(?TYPEVAR1,BitsPerSecond), sumo(?TYPEVAR0,?network-12) ==> {(bandwidthOf ?network-12 ?bits-2)}.

; nsubj(account*,entity-FINANCIALORGANIZATION2*), amod(account*,financial*), nmod:of(kind*,account*), nmod:of(account*,kind*), cop(account*,is*), case(kind*,of*), compound(account*,bank*), case(account*,of*) ==> ; {(bankAccount null null)}.

nsubj(pressure*,?UnitOfAtmosphericPressure-2), cop(pressure*,is*), amod(pressure*,barometric*), case(?object-9,of*), nmod:of(pressure*,?object-9), isSubclass(?TYPEVAR0,UnitOfAtmosphericPressure), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-9), sumo(?TYPEVAR0,?UnitOfAtmosphericPressure-2) ==> {(barometricPressure ?object-9 ?UnitOfAtmosphericPressure-2)}.

acl:relcl(?time-2,arrival*), cop(arrival*,is*), nsubj(arrival*,?duration-3), compound(arrival*,batch*), nmod:of(arrival*,?path-12), case(?path-12,of*), compound(arrival*,inter*), sumo(?TYPEVAR1,?duration-3), sumo(?TYPEVAR2,?path-12), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR0,?time-2), isSubclass(?TYPEVAR0,TimeDuration), isSubclass(?TYPEVAR2,ComputerPath) ==> {(batchInterArrival ?path-12 ?time-2)}.

nmod:of(latency*,?path-11), nsubj(latency*,?duration-3), cop(latency*,is*), case(?path-11,of*), acl:relcl(?time-2,latency*), compound(latency*,batch*), sumo(?TYPEVAR2,?time-2), sumo(?TYPEVAR0,?path-11), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR1,?duration-3), isSubclass(?TYPEVAR0,ComputerPath), isSubclass(?TYPEVAR2,TimeDuration) ==> {(batchLatency ?path-11 ?duration-3)}.

case(?abstract-9,of*), nmod:of(benchmark*,?abstract-9), cop(benchmark*,is*), nsubj(benchmark*,?measure-3), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,PerformanceMeasure), sumo(?TYPEVAR0,?abstract-9), isSubclass(?TYPEVAR0,Abstract) ==> {(benchmark ?abstract-9 ?measure-3)}.

amod(performance*,benchmark*), dep(performance*,?program-8), amod(performance*,?computational-2), compound(performance*,?system-3), case(?quantity-11,for*), sumo(?TYPEVAR3,?quantity-11), sumo(?TYPEVAR0,?program-8), isSubclass(?TYPEVAR0,MonitoringProgram), sumo(?TYPEVAR1,?computational-2), sumo(?TYPEVAR2,?system-3), isSubclass(?TYPEVAR3,Quantity), isSubclass(?TYPEVAR1,ComputationalSystem), isSubclass(?TYPEVAR2,ComputationalSystem) ==> {(benchmarkPerformance ?system-3 ?program-8 ?quantity-11)}.

; case(?object-12,for*), nmod:on(?object-2,path*), case(path*,between*), case(path*,on*), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?object-12), sumo(?TYPEVAR1,?object-2) ==> ; {(betweenOnPath ?object-2 null ?object-12 null)}.

compound(antidote*,agent*), compound(antidote*,?agent-3), amod(antidote*,biochemical*), dep(antidote*,?kind-8), case(?kind-15,for*), amod(antidote*,?biochemical-2), isSubclass(?TYPEVAR0,BiochemicalAgent), sumo(?TYPEVAR1,?kind-8), isSubclass(?TYPEVAR1,BiologicallyActiveSubstance), isSubclass(?TYPEVAR3,BiochemicalAgent), sumo(?TYPEVAR0,?agent-3), sumo(?TYPEVAR3,?biochemical-2), sumo(?TYPEVAR2,?kind-15), isSubclass(?TYPEVAR2,Process) ==> {(biochemicalAgentAntidote ?biochemical-2 ?kind-8 ?kind-15)}.

nsubj(delivery*,?kind-2), case(?kind-12,of*), compound(delivery*,agent*), cop(delivery*,is*), amod(delivery*,biochemical*), nmod:of(delivery*,?kind-12), isSubclass(?TYPEVAR1,BiochemicalAgent), sumo(?TYPEVAR1,?kind-12), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR0,Process) ==> {(biochemicalAgentDelivery ?kind-12 ?kind-2)}.

nsubj(syndrome*,?syndrome-4), amod(syndrome*,biochemical*), compound(syndrome*,agent*), nsubj(syndrome*,?disease-2), nmod:of(syndrome*,?kind-12), case(?kind-12,of*), cop(syndrome*,is*), sumo(?TYPEVAR0,?syndrome-4), sumo(?TYPEVAR1,?disease-2), sumo(?TYPEVAR2,?kind-12), isSubclass(?TYPEVAR0,DiseaseOrSyndrome), isSubclass(?TYPEVAR1,DiseaseOrSyndrome), isSubclass(?TYPEVAR2,BiochemicalAgent) ==> {(biochemicalAgentSyndrome ?kind-12 ?disease-2)}.

nmod:of(habitat*,?area-14), case(?area-14,of*), cop(bioindicator*,is*), case(habitat*,for*), nmod:for(bioindicator*,habitat*), nsubj(bioindicator*,?kind-2), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?area-14), isSubclass(?TYPEVAR0,GeographicArea), isSubclass(?TYPEVAR1,OrganicObject) ==> {(bioindicatorForHabitat ?area-14 ?kind-2)}.

nsubj(carrier*,?kind-2), cop(carrier*,is*), amod(carrier*,biological*), compound(carrier*,agent*), case(?kind-12,of*), nmod:of(carrier*,?kind-12), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR1,?kind-12), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR1,BiologicalAgent) ==> {(biologicalAgentCarrier ?kind-12 ?kind-2)}.

cop(birthdate*,is*), nmod:of(birthdate*,?human-8), case(?human-8,of*), nsubj(birthdate*,?day-2), isSubclass(?TYPEVAR1,Day), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?day-2), sumo(?TYPEVAR0,?human-8) ==> {(birthdate ?human-8 ?day-2)}.

nmod:in(be_born*,?MONTH), sumo(Human,?H), nsubjpass(be_born*,?H) ==> {(birthdate ?H ?MONTH)}.

nmod:on(be_born*,?DATE), sumo(Human,?H), nsubjpass(be_born*,?H) ==> {(birthdate ?H ?DATE)}.

nmod:to(be_born*,?H2), sumo(Human,?H), sumo(Human,?H2), nsubjpass(be_born*,?H) ==> {(parent ?H ?H2)}.

nsubj(give_birth*,?H2), nmod:to(give_birth*,?H), sumo(Human,?H), sumo(Human,?H2) ==> {(parent ?H ?H2)}.

nsubj(point*,?measure-3), case(?kind-10,of*), cop(point*,is*), amod(point*,boiling*), nmod:of(point*,?kind-10), sumo(?TYPEVAR1,?kind-10), isSubclass(?TYPEVAR1,PureSubstance), isSubclass(?TYPEVAR0,TemperatureMeasure), sumo(?TYPEVAR0,?measure-3) ==> {(boilingPoint ?kind-10 ?measure-3)}.

acl(?account-3,buying*), case(?measure-12,for*), nmod:tmod(buying*,?day-8), compound(amount*,power*), dobj(buying*,amount*), nmod:for(buying*,?measure-12), isSubclass(?TYPEVAR2,Day), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-12), sumo(?TYPEVAR0,?account-3), sumo(?TYPEVAR2,?day-8), isSubclass(?TYPEVAR0,FinancialAccount) ==> {(buyingPowerAmount ?account-3 ?day-8 ?measure-12)}.

nsubj(caliber*,?measure-3), cop(caliber*,is*), nmod:of(caliber*,?kind-9), case(?kind-9,of*), sumo(?TYPEVAR1,?kind-9), sumo(?TYPEVAR0,?measure-3), isSubclass(?TYPEVAR1,Gun), isSubclass(?TYPEVAR0,LengthMeasure) ==> {(caliber ?kind-9 ?measure-3)}.

compound(date*,call*), case(?bond-9,of*), nsubj(date*,?day-2), nmod:of(date*,?bond-9), cop(date*,is*), isSubclass(?TYPEVAR0,Bond), sumo(?TYPEVAR1,?day-2), sumo(?TYPEVAR0,?bond-9), isSubclass(?TYPEVAR1,Day) ==> {(callDate ?bond-9 ?day-2)}.

compound(candidate*,?election-2), dobj(position*,?role-8), case(position*,for*), case(?agent-11,for*), nmod:for(candidate*,position*), sumo(?TYPEVAR0,?election-2), sumo(?TYPEVAR1,?role-8), isSubclass(?TYPEVAR1,SocialRole), isSubclass(?TYPEVAR2,Agent), isSubclass(?TYPEVAR0,Election), sumo(?TYPEVAR2,?agent-11) ==> {(candidateForPosition ?election-2 ?role-8 ?agent-11)}.

amod(?kind-2,capable*), case(?region-16,with*), dep(location*,?role-10), case(?object-13,for*), nmod:at(capable*,location*), case(location*,at*), isSubclass(?TYPEVAR1,Region), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?region-16), sumo(?TYPEVAR2,?role-10), sumo(?TYPEVAR3,?object-13), isSubclass(?TYPEVAR3,Object), isSubclass(?TYPEVAR2,CaseRole) ==> {(capableAtLocation ?kind-2 ?role-10 ?object-13 ?region-16)}.

case(?object-11,of*), nsubj(capacity*,?quantity-3), cop(capacity*,is*), nmod:of(capacity*,?object-11), isSubclass(?TYPEVAR1,ConstantQuantity), sumo(?TYPEVAR0,?object-11), isSubclass(?TYPEVAR0,SelfConnectedObject), sumo(?TYPEVAR1,?quantity-3) ==> {(capacity ?object-11 ?quantity-3)}.

nmod:of(city*,?city-10), cop(city*,is*), case(?city-10,of*), compound(city*,capital*), nsubj(city*,?area-3), isSubclass(?TYPEVAR0,City), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR0,?city-10) ==> {(capitalCity ?city-10 ?area-3)}.

nsubj(expenditures*,?measure-3), nmod:of(area*,?area-13), compound(expenditures*,capital*), case(?area-13,of*), case(area*,of*), nmod:of(expenditures*,area*), cop(expenditures*,is*), sumo(?TYPEVAR0,?measure-3), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR1,?area-13) ==> {(capitalExpendituresOfArea ?area-13 ?measure-3)}.

nmod:of(expenditures*,area*), dep(period*,?measure-12), nmod:in(expenditures*,period*), case(period*,in*), case(?kind-15,for*), compound(expenditures*,capital*), amod(expenditures*,?geopolitical-2), compound(expenditures*,?area-3), case(area*,of*), sumo(?TYPEVAR2,?geopolitical-2), isSubclass(?TYPEVAR3,GeopoliticalArea), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR1,?kind-15), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR0,?measure-12), sumo(?TYPEVAR3,?area-3), isSubclass(?TYPEVAR0,CurrencyMeasure) ==> {(capitalExpendituresOfAreaInPeriod ?area-3 ?measure-12 ?kind-15)}.

case(?card-11,of*), nmod:of(account*,?card-11), compound(account*,card*), nsubj(account*,?account-3), cop(account*,is*), isSubclass(?TYPEVAR1,FinancialAccount), sumo(?TYPEVAR0,?card-11), isSubclass(?TYPEVAR0,BankCard), sumo(?TYPEVAR1,?account-3) ==> {(cardAccount ?card-11 ?account-3)}.

amod(code*,of*), compound(code*,card*), cop(code*,is*), nsubj(code*,?card-3), dep(of*,?the-9), isSubclass(?TYPEVAR1,ContentBearingObject), isSubclass(?TYPEVAR0,BankCard), sumo(?TYPEVAR1,?the-9), sumo(?TYPEVAR0,?card-3) ==> {(cardCode ?the-9 ?card-3)}.

cop(cardinality*,is*), case(?set-9,of*), nmod:of(cardinality*,?class-11), nsubj(cardinality*,?integer-3), nmod:of(cardinality*,?set-9), sumo(?TYPEVAR0,?set-9), sumo(?TYPEVAR2,?integer-3), isSubclass(?TYPEVAR2,NonnegativeInteger), isSubclass(?TYPEVAR0,SetOrClass), sumo(?TYPEVAR1,?class-11), isSubclass(?TYPEVAR1,SetOrClass) ==> {(cardinality ?class-11 ?integer-3)}.

compound(type*,cargo*), cop(type*,is*), nmod:of(type*,?device-12), case(?device-12,of*), nsubj(type*,?kind-2), sumo(?TYPEVAR0,?device-12), isSubclass(?TYPEVAR0,TransportationDevice), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR1,Object) ==> {(cargoType ?device-12 ?kind-2)}.

nmod:of(proposition*,?formula-10), nsubj(causes*,?formula-3), case(?formula-10,of*), cop(causes*,is*), dobj(causes*,proposition*), sumo(?TYPEVAR0,?formula-10), isSubclass(?TYPEVAR1,Formula), sumo(?TYPEVAR1,?formula-3), isSubclass(?TYPEVAR0,Formula) ==> {(causesProposition ?formula-10 ?formula-3)}.

nsubj(causes*,?kind-2), nmod:of(subclass*,?kind-11), cop(causes*,is*), dobj(causes*,subclass*), case(?kind-11,of*), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?kind-11), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR1,Process) ==> {(causesSubclass ?kind-11 ?kind-2)}.

case(legislature*,of*), cop(chamber*,is*), nsubj(chamber*,?organization-3), case(?organization-11,of*), nmod:of(legislature*,?organization-11), nmod:of(chamber*,legislature*), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR0,?organization-3), sumo(?TYPEVAR1,?organization-11), isSubclass(?TYPEVAR1,Organization) ==> {(chamberOfLegislature ?organization-11 ?organization-3)}.

amod(address*,?geopolitical-2), compound(address*,?area-3), dep(address*,?string-10), case(area*,in*), nmod:in(address*,area*), compound(address*,chancery*), case(?area-15,for*), sumo(?TYPEVAR0,?geopolitical-2), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR3,?area-15), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR2,SymbolicString), sumo(?TYPEVAR2,?string-10), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR3,GeopoliticalArea) ==> {(chanceryAddressInArea ?area-3 ?string-10 ?area-15)}.

case(area*,in*), compound(number*,?area-3), amod(number*,?geopolitical-2), case(?area-15,for*), compound(number*,chanceryFAX*), dep(number*,?string-10), nmod:in(number*,area*), sumo(?TYPEVAR1,?geopolitical-2), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR3,?string-10), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR0,?area-3), isSubclass(?TYPEVAR3,SymbolicString), sumo(?TYPEVAR2,?area-15) ==> {(chanceryFAXNumberInArea ?area-3 ?string-10 ?area-15)}.

compound(address*,mailing*), case(area*,in*), dep(address*,?string-11), compound(address*,?area-3), nmod:in(address*,area*), compound(address*,chancery*), amod(address*,?geopolitical-2), case(?area-16,for*), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR2,?geopolitical-2), sumo(?TYPEVAR0,?string-11), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR3,GeopoliticalArea), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR3,?area-16) ==> {(chanceryMailingAddressInArea ?geopolitical-2 ?string-11 ?area-16)}.

compound(number*,chancery*), amod(number*,?geopolitical-2), case(area*,in*), case(?area-16,for*), dep(number*,?string-11), compound(number*,telephone*), nmod:in(number*,area*), compound(number*,?area-3), sumo(?TYPEVAR0,?geopolitical-2), sumo(?TYPEVAR1,?area-16), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR2,SymbolicString), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR2,?string-11), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR3,?area-3) ==> {(chanceryTelephoneNumberInArea ?area-3 ?string-11 ?area-16)}.

compound(location*,changes*), nmod:of(location*,?translocation-9), case(?translocation-9,of*), nsubj(location*,?object-2), cop(location*,is*), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?translocation-9), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR0,Translocation) ==> {(changesLocation ?translocation-9 ?object-2)}.

case(?check-10,of*), nsubj(account*,?account-3), nmod:of(account*,?check-10), cop(account*,is*), compound(account*,check*), sumo(?TYPEVAR1,?account-3), sumo(?TYPEVAR0,?check-10), isSubclass(?TYPEVAR1,FinancialAccount), isSubclass(?TYPEVAR0,Check) ==> {(checkAccount ?check-10 ?account-3)}.

compound(chief*,?agent-2), case(?position-11,for*), case(?agent-15,with*), nmod:of(chief*,mission*), case(mission*,of*), amod(mission*,?human-8), amod(mission*,diplomatic*), sumo(?TYPEVAR2,?agent-15), sumo(?TYPEVAR3,?human-8), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR1,Position), isSubclass(?TYPEVAR3,Human), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR2,Agent), sumo(?TYPEVAR1,?position-11) ==> {(chiefOfDiplomaticMission ?agent-2 ?human-8 ?position-11 ?agent-15)}.

nmod:of(chief*,state*), dep(chief*,?position-8), amod(chief*,?geopolitical-2), case(?human-11,for*), compound(chief*,?area-3), case(state*,of*), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR3,?area-3), isSubclass(?TYPEVAR0,Position), sumo(?TYPEVAR2,?human-11), sumo(?TYPEVAR1,?geopolitical-2), sumo(?TYPEVAR0,?position-8), isSubclass(?TYPEVAR2,Human) ==> {(chiefOfState ?geopolitical-2 ?position-8 ?human-11)}.

nsubj(chief*,?position-2), nmod:of(type*,?area-12), case(type*,of*), cop(chief*,is*), nmod:of(chief*,type*), case(?area-12,of*), compound(type*,state*), sumo(?TYPEVAR0,?position-2), isSubclass(?TYPEVAR0,Position), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(chiefOfStateType ?area-12 ?position-2)}.

cop(territory*,is*), amod(territory*,claimed*), nmod:of(territory*,?area-10), case(?area-10,of*), nsubj(territory*,?agent-2), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR0,GeographicArea), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?area-10) ==> {(claimedTerritory ?area-10 ?agent-2)}.

nmod:of(area*,?area-15), case(?area-15,of*), case(area*,in*), compound(type*,climate*), nmod:in(type*,area*), nsubj(type*,?kind-2), cop(type*,is*), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR1,ClimateZone), sumo(?TYPEVAR0,?area-15) ==> {(climateTypeInArea ?area-15 ?kind-2)}.

compound(price*,?stock-2), compound(price*,closing*), case(?day-10,for*), dep(price*,?measure-7), isSubclass(?TYPEVAR1,Day), isSubclass(?TYPEVAR0,Stock), sumo(?TYPEVAR0,?stock-2), isSubclass(?TYPEVAR2,CurrencyMeasure), sumo(?TYPEVAR2,?measure-7), sumo(?TYPEVAR1,?day-10) ==> {(closingPrice ?stock-2 ?measure-7 ?day-10)}.

case(?region-12,of*), compound(fraction*,cover*), nsubj(fraction*,?number-4), compound(fraction*,cloud*), nmod:of(fraction*,?region-12), cop(fraction*,is*), isSubclass(?TYPEVAR1,NonnegativeRealNumber), sumo(?TYPEVAR1,?number-4), isSubclass(?TYPEVAR0,Region), sumo(?TYPEVAR0,?region-12) ==> {(cloudCoverFraction ?region-12 ?number-4)}.

case(?human-9,of*), nmod:of(cohabitant*,?human-9), nsubj(cohabitant*,?human-3), cop(cohabitant*,is*), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?human-9), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?human-3) ==> {(cohabitant ?human-9 ?human-3)}.

amod(season*,cold*), nmod:of(area*,?area-15), case(?area-15,of*), dep(season*,?kind-2), nmod:of(season*,?time-4), nsubj(season*,?interval-5), cop(season*,is*), case(area*,in*), nmod:in(season*,area*), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?area-15), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR3,?interval-5), isSubclass(?TYPEVAR0,GeographicArea), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR3,TimeInterval), sumo(?TYPEVAR2,?time-4) ==> {(coldSeasonInArea ?area-15 ?time-4)}.

compound(arguments*,command*), nmod:of(arguments*,?program-11), nsubj(arguments*,?list-2), case(?program-11,of*), cop(arguments*,is*), compound(arguments*,line*), isSubclass(?TYPEVAR1,List), sumo(?TYPEVAR1,?list-2), isSubclass(?TYPEVAR0,ComputerProgram), sumo(?TYPEVAR0,?program-11) ==> {(commandLineArguments ?program-11 ?list-2)}.

nmod:of(rank*,echelon*), compound(rank*,command*), case(echelon*,of*), case(?kind-12,of*), nmod:of(echelon*,?kind-12), nsubj(rank*,?rank-3), cop(rank*,is*), isSubclass(?TYPEVAR1,MilitaryRank), isSubclass(?TYPEVAR0,MilitaryUnit), sumo(?TYPEVAR0,?kind-12), sumo(?TYPEVAR1,?rank-3) ==> {(commandRankOfEchelon ?kind-12 ?rank-3)}.

nsubj(date*,?interval-5), cop(date*,is*), case(?holiday-12,of*), acl:relcl(?time-4,date*), amod(date*,commemorates*), nmod:of(date*,?holiday-12), sumo(?TYPEVAR0,?interval-5), sumo(?TYPEVAR1,?holiday-12), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR2,?time-4), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR1,Holiday) ==> {(commemoratesDate ?holiday-12 ?time-4)}.

dep(satellite*,?kind-9), amod(satellite*,?geopolitical-2), compound(satellite*,communication*), compound(satellite*,?area-3), case(?integer-14,for*), case(area*,for*), nmod:for(satellite*,area*), sumo(?TYPEVAR0,?kind-9), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR0,Satellite), sumo(?TYPEVAR1,?geopolitical-2), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR3,?integer-14), isSubclass(?TYPEVAR3,Integer) ==> {(communicationSatelliteForArea ?geopolitical-2 ?kind-9 ?integer-14)}.
 
case(?number-12,for*), amod(area*,comparative*), case(?area-17,with*), dep(area*,?BinaryRelationExtendedToQuantities-7), dep(?area-3,area*), sumo(?TYPEVAR1,?area-17), isSubclass(?TYPEVAR3,GeographicArea), sumo(?TYPEVAR0,?number-12), isSubclass(?TYPEVAR2,BinaryRelationExtendedToQuantities), isSubclass(?TYPEVAR0,PositiveRealNumber), sumo(?TYPEVAR3,?area-3), isSubclass(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR2,?BinaryRelationExtendedToQuantities-7) ==> {(comparativeArea ?area-3 ?BinaryRelationExtendedToQuantities-7 ?number-12 ?area-17)}.

compound(package*,compensation*), dep(package*,?measure-7), case(?position-11,for*), amod(package*,?human-2), sumo(?TYPEVAR2,?human-2), isSubclass(?TYPEVAR2,Human), isSubclass(?TYPEVAR1,TimePosition), sumo(?TYPEVAR0,?measure-7), sumo(?TYPEVAR1,?position-11), isSubclass(?TYPEVAR0,CurrencyMeasure) ==> {(compensationPackage ?human-2 ?measure-7 ?position-11)}.

compound(d*,?position-3), compound(d*,component*), case(?unit-19,with*), compound(d*,dataI*), dep(d*,?kind-8), dep(d*,?string-25), compound(d*,?time-2), case(?component-16,for*), cc(?kind-8,and*), isSubclass(?TYPEVAR1,UnitOfMeasure), sumo(?TYPEVAR3,?string-25), sumo(?TYPEVAR2,?kind-8), isSubclass(?TYPEVAR4,TimePosition), sumo(?TYPEVAR0,?position-3), sumo(?TYPEVAR1,?unit-19), isSubclass(?TYPEVAR2,ComputerComponent), isSubclass(?TYPEVAR5,ComputerComponent), sumo(?TYPEVAR5,?component-16), sumo(?TYPEVAR4,?time-2), isSubclass(?TYPEVAR0,TimePosition), isSubclass(?TYPEVAR3,SymbolicString) ==> {(componentDataID ?time-2 ?kind-8 ?component-16 ?unit-19 ?string-25)}.

case(?time-10,for*), dep(interest*,?interest-7), amod(interest*,?financial-2), compound(interest*,?account-3), compound(interest*,compound*), isSubclass(?TYPEVAR1,Interest), sumo(?TYPEVAR0,?time-10), sumo(?TYPEVAR3,?account-3), sumo(?TYPEVAR2,?financial-2), sumo(?TYPEVAR1,?interest-7), isSubclass(?TYPEVAR2,FinancialAccount), isSubclass(?TYPEVAR3,FinancialAccount), isSubclass(?TYPEVAR0,TimeInterval) ==> {(compoundInterest ?financial-2 ?interest-7 ?time-10)}.

nsubj(response*,?request-3), nmod:of(response*,?response-12), compound(response*,computer*), case(?response-12,of*), case(?response-12,to*), cop(response*,is*), sumo(?TYPEVAR0,?request-3), isSubclass(?TYPEVAR1,ComputerResponse), sumo(?TYPEVAR1,?response-12), isSubclass(?TYPEVAR0,UserRequest) ==> {(computerResponseTo ?response-12 ?request-3)}.

nsubj(confers*,?entity-2), case(?norm-10,for*), dobj(confers*,?formula-6), compound(?formula-6,norm*), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,ObjectiveNorm), sumo(?TYPEVAR2,?formula-6), isSubclass(?TYPEVAR2,Formula), sumo(?TYPEVAR1,?norm-10), sumo(?TYPEVAR0,?entity-2) ==> {(confersNorm ?entity-2 ?formula-6 ?norm-10)}.

nsubj(number*,?string-3), nmod:of(number*,?transaction-11), case(?transaction-11,of*), compound(number*,confirmation*), cop(number*,is*), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-3), sumo(?TYPEVAR1,?transaction-11), isSubclass(?TYPEVAR1,FinancialTransaction) ==> {(confirmationNumber ?transaction-11 ?string-3)}.

case(?substance-11,of*), cop(conjugate*,is*), nsubj(conjugate*,?substance-4), nmod:of(conjugate*,?substance-11), isSubclass(?TYPEVAR0,CompoundSubstance), sumo(?TYPEVAR0,?substance-11), sumo(?TYPEVAR1,?substance-4), isSubclass(?TYPEVAR1,CompoundSubstance) ==> {(conjugate ?substance-11 ?substance-4)}.

amod(downstream*,connected*), cop(downstream*,is*), nmod:of(downstream*,?object-10), case(?object-10,of*), nsubj(downstream*,?object-3), sumo(?TYPEVAR0,?object-10), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-3) ==> {(connectedDownstream ?object-10 ?object-3)}.

nsubj(consistent*,?proposition-3), nmod:of(consistent*,?proposition-9), cop(consistent*,is*), case(?proposition-9,of*), isSubclass(?TYPEVAR0,Proposition), sumo(?TYPEVAR0,?proposition-3), isSubclass(?TYPEVAR1,Proposition), sumo(?TYPEVAR1,?proposition-9) ==> {(consistent ?proposition-9 ?proposition-3)}.

amod(name*,conventional*), cop(name*,is*), case(?string-11,of*), amod(name*,long*), nmod:of(name*,?string-11), nsubj(name*,?entity-2), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR0,?string-11) ==> {(conventionalLongName ?string-11 ?entity-2)}.

amod(name*,short*), case(?string-11,of*), cop(name*,is*), amod(name*,conventional*), nsubj(name*,?entity-2), nmod:of(name*,?string-11), sumo(?TYPEVAR0,?string-11), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR1,Entity) ==> {(conventionalShortName ?string-11 ?entity-2)}.

case(?area-15,of*), cop(season*,is*), nmod:in(season*,area*), amod(season*,cool*), dep(season*,?kind-2), nsubj(season*,?interval-5), nmod:of(season*,?time-4), case(area*,in*), nmod:of(area*,?area-15), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-15), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR3,?time-4), sumo(?TYPEVAR2,?interval-5), isSubclass(?TYPEVAR3,TimeInterval), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR2,TimeInterval) ==> {(coolSeasonInArea ?area-15 ?interval-5)}.

compound(interest*,coupon*), nmod:of(interest*,?bond-9), nsubj(interest*,?interest-2), cop(interest*,is*), case(?bond-9,of*), isSubclass(?TYPEVAR0,Bond), sumo(?TYPEVAR0,?bond-9), isSubclass(?TYPEVAR1,Interest), sumo(?TYPEVAR1,?interest-2) ==> {(couponInterest ?bond-9 ?interest-2)}.

compound(compass*,courseWRT*), amod(compass*,?physical-8), amod(compass*,?physical-2), advmod(?physical-8,north*), case(?measure-13,for*), sumo(?TYPEVAR1,?physical-2), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR2,?measure-13), sumo(?TYPEVAR0,?physical-8), isSubclass(?TYPEVAR2,PlaneAngleMeasure), isSubclass(?TYPEVAR1,Physical) ==> {(courseWRTCompassNorth ?physical-2 ?physical-8 ?measure-13)}.

compound(north*,courseWRT*), case(?measure-13,for*), dep(north*,?physical-8), amod(north*,?physical-2), amod(north*,magnetic*), isSubclass(?TYPEVAR2,Physical), sumo(?TYPEVAR2,?physical-2), sumo(?TYPEVAR0,?measure-13), sumo(?TYPEVAR1,?physical-8), isSubclass(?TYPEVAR0,PlaneAngleMeasure), isSubclass(?TYPEVAR1,Physical) ==> {(courseWRTMagneticNorth ?physical-2 ?physical-8 ?measure-13)}.

advmod(?physical-8,north*), amod(courseWRT*,true*), case(?measure-13,for*), amod(courseWRT*,?physical-2), dep(true*,?physical-8), sumo(?TYPEVAR2,?physical-2), isSubclass(?TYPEVAR0,Physical), isSubclass(?TYPEVAR2,Physical), sumo(?TYPEVAR0,?physical-8), isSubclass(?TYPEVAR1,PlaneAngleMeasure), sumo(?TYPEVAR1,?measure-13) ==> {(courseWRTTrueNorth ?physical-2 ?physical-8 ?measure-13)}.

case(?human-9,of*), nsubj(coworker*,?human-3), cop(coworker*,is*), nmod:of(coworker*,?human-9), sumo(?TYPEVAR1,?human-3), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?human-9), isSubclass(?TYPEVAR0,Human) ==> {(coworker ?human-9 ?human-3)}.

cop(limit*,is*), compound(limit*,credit*), nmod:of(limit*,?account-11), case(?account-11,of*), nsubj(limit*,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?account-11), isSubclass(?TYPEVAR0,CreditAccount) ==> {(creditLimit ?account-11 ?measure-3)}.

cop(ranking*,is*), nsubj(ranking*,?rating-3), case(?agent-11,of*), compound(ranking*,credit*), nmod:of(ranking*,?agent-11), sumo(?TYPEVAR0,?rating-3), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR1,?agent-11), isSubclass(?TYPEVAR0,FinancialRating) ==> {(creditRanking ?agent-11 ?rating-3)}.

compound(credits*,?account-3), amod(credits*,?financial-2), dobj(period*,?measure-9), nmod:per(credits*,period*), case(period*,per*), case(?time-12,for*), sumo(?TYPEVAR1,?financial-2), isSubclass(?TYPEVAR1,FinancialAccount), isSubclass(?TYPEVAR0,FinancialAccount), sumo(?TYPEVAR0,?account-3), isSubclass(?TYPEVAR2,CurrencyMeasure), sumo(?TYPEVAR3,?time-12), isSubclass(?TYPEVAR3,TimeInterval), sumo(?TYPEVAR2,?measure-9) ==> {(creditsPerPeriod ?account-3 ?measure-9 ?time-12)}.

cop(level*,is*), nsubj(level*,?integer-2), nmod:of(level*,?program-10), compound(level*,criticality*), case(?program-10,of*), isSubclass(?TYPEVAR1,ComputerProgram), isSubclass(?TYPEVAR0,Integer), sumo(?TYPEVAR1,?program-10), sumo(?TYPEVAR0,?integer-2) ==> {(criticalityLevel ?program-10 ?integer-2)}.

case(?string-10,of*), compound(code*,currency*), nmod:of(code*,?string-10), nsubj(code*,?UnitOfCurrency-2), cop(code*,is*), sumo(?TYPEVAR1,?UnitOfCurrency-2), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,UnitOfCurrency), sumo(?TYPEVAR0,?string-10) ==> {(currencyCode ?string-10 ?UnitOfCurrency-2)}.

acl:relcl(?time-4,dollar*), compound(dollar*,exchange*), nsubj(dollar*,?interval-5), cop(dollar*,is*), nmod:of(dollar*,?measure-15), compound(dollar*,perUS*), case(?measure-15,of*), compound(dollar*,currency*), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR2,?measure-15), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR0,?time-4), sumo(?TYPEVAR1,?interval-5), isSubclass(?TYPEVAR2,CurrencyMeasure) ==> {(currencyExchangePerUSDollar ?measure-15 ?interval-5)}.

nmod:of(rate*,?UnitOfCurrency-11), compound(rate*,currency*), case(?UnitOfCurrency-11,of*), nsubj(rate*,?measure-3), cop(rate*,is*), compound(rate*,exchange*), sumo(?TYPEVAR0,?UnitOfCurrency-11), isSubclass(?TYPEVAR0,UnitOfCurrency), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-3) ==> {(currencyExchangeRate ?UnitOfCurrency-11 ?measure-3)}.

nmod:in(rate*,period*), case(?kind-13,for*), compound(rate*,currency*), case(period*,in*), dep(period*,?measure-10), compound(rate*,exchange*), compound(rate*,?UnitOfCurrency-2), sumo(?TYPEVAR0,?kind-13), isSubclass(?TYPEVAR0,TimeInterval), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR2,?UnitOfCurrency-2), sumo(?TYPEVAR1,?measure-10), isSubclass(?TYPEVAR2,UnitOfCurrency) ==> {(currencyExchangeRateInPeriod ?UnitOfCurrency-2 ?measure-10 ?kind-13)}.

compound(type*,currency*), case(?area-10,of*), nsubj(type*,?UnitOfCurrency-2), cop(type*,is*), nmod:of(type*,?area-10), sumo(?TYPEVAR1,?UnitOfCurrency-2), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?area-10), isSubclass(?TYPEVAR1,UnitOfCurrency) ==> {(currencyType ?area-10 ?UnitOfCurrency-2)}.

compound(value*,currency*), nmod:of(value*,?kind-10), cop(value*,is*), nsubj(value*,?measure-3), case(?kind-10,of*), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?kind-10), isSubclass(?TYPEVAR0,Currency) ==> {(currencyValue ?kind-10 ?measure-3)}.

amod(balance*,current*), compound(balance*,account*), nmod:for(balance*,?measure-12), case(?measure-12,for*), nsubj(balance*,?account-3), nmod:tmod(balance*,?day-8), sumo(?TYPEVAR2,?day-8), isSubclass(?TYPEVAR2,Day), sumo(?TYPEVAR0,?measure-12), isSubclass(?TYPEVAR1,FinancialAccount), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR1,?account-3) ==> {(currentAccountBalance ?account-3 ?day-8 ?measure-12)}.

amod(rate*,current*), case(?rate-12,for*), nmod:for(rate*,?rate-12), nmod:tmod(rate*,?day-8), compound(rate*,interest*), nsubj(rate*,?account-3), isSubclass(?TYPEVAR1,Day), sumo(?TYPEVAR0,?rate-12), sumo(?TYPEVAR1,?day-8), isSubclass(?TYPEVAR2,FinancialAccount), isSubclass(?TYPEVAR0,InterestRate), sumo(?TYPEVAR2,?account-3) ==> {(currentInterestRate ?account-3 ?day-8 ?rate-12)}.

nsubj(customer*,?agent-4), cop(customer*,is*), nmod:of(customer*,?agent-11), case(?agent-11,of*), sumo(?TYPEVAR1,?agent-11), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR0,?agent-4), isSubclass(?TYPEVAR0,CognitiveAgent) ==> {(customer ?agent-11 ?agent-4)}.

amod(representative*,?cognitive-2), compound(representative*,?agent-3), case(?organization-12,for*), compound(representative*,customer*), dep(representative*,?agent-9), isSubclass(?TYPEVAR3,CognitiveAgent), sumo(?TYPEVAR2,?organization-12), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR0,?cognitive-2), isSubclass(?TYPEVAR2,Organization), sumo(?TYPEVAR3,?agent-9), isSubclass(?TYPEVAR0,CognitiveAgent) ==> {(customerRepresentative ?cognitive-2 ?agent-9 ?organization-12)}.

amod(limit*,daily*), nsubj(limit*,?account-3), case(?measure-14,for*), dobj(limit*,?kind-7), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-14), isSubclass(?TYPEVAR2,FinancialTransaction), sumo(?TYPEVAR0,?account-3), isSubclass(?TYPEVAR0,FinancialAccount), sumo(?TYPEVAR2,?kind-7) ==> {(dailyLimit ?account-3 ?kind-7 ?measure-14)}.

cop(d*,is*), nmod:of(d*,?program-11), nsubj(d*,?string-3), compound(d*,dataI*), case(?program-11,of*), sumo(?TYPEVAR0,?program-11), isSubclass(?TYPEVAR1,SymbolicString), isSubclass(?TYPEVAR0,MonitoringProgram), sumo(?TYPEVAR1,?string-3) ==> {(dataID ?program-11 ?string-3)}.

compound(stream*,data*), case(?path-12,of*), nsubj(stream*,?integer-3), cop(stream*,is*), dobj(stream*,slack*), nmod:of(slack*,?path-12), isSubclass(?TYPEVAR0,ComputerPath), sumo(?TYPEVAR1,?integer-3), sumo(?TYPEVAR0,?path-12), isSubclass(?TYPEVAR1,PositiveInteger) ==> {(dataStreamSlack ?path-12 ?integer-3)}.

case(?physical-12,of*), nmod:of(dissolved*,?physical-12), nsubj(date*,?kind-2), acl(date*,dissolved*), cop(date*,is*), isSubclass(?TYPEVAR1,TimePosition), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?physical-12), isSubclass(?TYPEVAR0,Physical) ==> {(dateDissolved ?physical-12 ?kind-2)}.

nmod:of(established*,?physical-12), acl(date*,established*), nsubj(is*,date*), acl(?kind-2,is*), case(?physical-12,of*), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?physical-12), isSubclass(?TYPEVAR0,Physical), isSubclass(?TYPEVAR1,TimePosition) ==> {(dateEstablished ?physical-12 ?kind-2)}.

cop(date*,is*), case(?statement-11,of*), nsubj(date*,?day-2), nmod:of(date*,statement*), nmod:of(statement*,?statement-11), case(statement*,of*), sumo(?TYPEVAR0,?statement-11), isSubclass(?TYPEVAR1,Day), isSubclass(?TYPEVAR0,BankStatement), sumo(?TYPEVAR1,?day-2) ==> {(dateOfStatement ?statement-11 ?day-2)}.

nsubj(opened*,date*), nsubj(opened*,?kind-2), case(signature*,for*), nmod:of(signature*,?proposition-14), nmod:for(opened*,signature*), aux(opened*,is*), case(?proposition-14,of*), isSubclass(?TYPEVAR1,Proposition), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR0,TimePosition), sumo(?TYPEVAR1,?proposition-14) ==> {(dateOpenedForSignature ?proposition-14 ?kind-2)}.

dobj(interval*,?kind-7), case(?time-12,for*), nsubj(interval*,?region-2), nmod:npmod(?region-2,hours*), compound(hours*,daylight*), isSubclass(?TYPEVAR2,Region), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR2,?region-2), sumo(?TYPEVAR0,?kind-7), sumo(?TYPEVAR1,?time-12), isSubclass(?TYPEVAR0,Day) ==> {(daylightHoursInterval ?region-2 ?kind-7 ?time-12)}.

nmod:for(total*,?time-12), dobj(total*,?kind-7), compound(hours*,daylight*), acl:relcl(?region-2,total*), nsubj(total*,hours*), case(?time-12,for*), sumo(?TYPEVAR2,?region-2), sumo(?TYPEVAR0,?time-12), isSubclass(?TYPEVAR1,Day), isSubclass(?TYPEVAR0,TimeDuration), sumo(?TYPEVAR1,?kind-7), isSubclass(?TYPEVAR2,Region) ==> {(daylightHoursTotal ?region-2 ?kind-7 ?time-12)}.

nmod:of(phone*,?string-10), nsubj(phone*,?agent-2), cop(phone*,is*), compound(phone*,day*), case(?string-10,of*), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?string-10), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?agent-2) ==> {(dayPhone ?string-10 ?agent-2)}.

nmod:of(deathdate*,?human-8), case(?human-8,of*), nsubj(deathdate*,?day-2), cop(deathdate*,is*), sumo(?TYPEVAR0,?human-8), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?day-2), isSubclass(?TYPEVAR1,Day) ==> {(deathdate ?human-8 ?day-2)}.

nsubj(deathplace*,?object-2), nmod:of(deathplace*,?animal-8), cop(deathplace*,is*), case(?animal-8,of*), sumo(?TYPEVAR1,?animal-8), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Animal) ==> {(deathplace ?animal-8 ?object-2)}.

amod(identifier*,of*), cop(identifier*,is*), amod(identifier*,deceptive*), nsubj(identifier*,?agent-2), dep(of*,?the-8), sumo(?TYPEVAR1,?the-8), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,ContentBearingObject) ==> {(deceptiveIdentifier ?the-8 ?agent-2)}.

nmod:of(network*,?system-11), cop(network*,is*), nsubj(network*,?network-3), case(?system-11,of*), compound(network*,default*), isSubclass(?TYPEVAR0,HardwareSystem), isSubclass(?TYPEVAR1,ComputerNetwork), sumo(?TYPEVAR0,?system-11), sumo(?TYPEVAR1,?network-3) ==> {(defaultNetwork ?system-11 ?network-3)}.

compound(delay*,dependency*), cop(delay*,is*), case(?program-11,of*), nsubj(delay*,?time-2), nmod:of(delay*,?program-11), sumo(?TYPEVAR1,?time-2), sumo(?TYPEVAR0,?program-11), isSubclass(?TYPEVAR1,TimeDuration), isSubclass(?TYPEVAR0,ComputerProgram) ==> {(dependencyDelay ?program-11 ?time-2)}.

cop(type*,is*), compound(type*,dependency*), nsubj(type*,?kind-2), nmod:of(type*,?program-13), case(?program-13,of*), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR0,ComputerProgram), isSubclass(?TYPEVAR1,ComputerProgram), sumo(?TYPEVAR1,?program-13) ==> {(dependencyType ?program-13 ?kind-2)}.

amod(area*,dependent*), case(?kind-15,for*), nmod:of(area*,type*), dep(type*,?area-11), case(type*,of*), dep(?area-3,area*), sumo(?TYPEVAR1,?area-11), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?kind-15), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR2,GeopoliticalArea) ==> {(dependentAreaOfType ?area-3 ?area-11 ?kind-15)}.

compound(?formula-6,norm*), dobj(deprives*,?formula-6), case(?norm-10,for*), nsubj(deprives*,?entity-2), isSubclass(?TYPEVAR0,Formula), sumo(?TYPEVAR1,?norm-10), isSubclass(?TYPEVAR2,Entity), sumo(?TYPEVAR0,?formula-6), sumo(?TYPEVAR2,?entity-2), isSubclass(?TYPEVAR1,ObjectiveNorm) ==> {(deprivesNorm ?entity-2 ?formula-6 ?norm-10)}.

nmod:in(detained*,place*), case(place*,in*), nmod:at(detained*,time*), dobj(detained*,?position-11), case(?object-14,for*), nsubj(detained*,?agent-3), case(time*,at*), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,TimePosition), sumo(?TYPEVAR1,?object-14), sumo(?TYPEVAR0,?position-11), isSubclass(?TYPEVAR2,SentientAgent), sumo(?TYPEVAR2,?agent-3) ==> {(detainedAtTimeInPlace ?agent-3 ?position-11 ?object-14)}.

nsubj(detainee*,?animal-2), nmod:of(detainee*,?confining-8), cop(detainee*,is*), case(?confining-8,of*), isSubclass(?TYPEVAR0,Animal), sumo(?TYPEVAR0,?animal-2), isSubclass(?TYPEVAR1,Confining), sumo(?TYPEVAR1,?confining-8) ==> {(detainee ?confining-8 ?animal-2)}.

case(?object-11,of*), nsubj(state*,?attribute-4), compound(state*,device*), cop(state*,is*), nmod:of(state*,?object-11), sumo(?TYPEVAR0,?object-11), sumo(?TYPEVAR1,?attribute-4), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,DeviceStateAttribute) ==> {(deviceState ?object-11 ?attribute-4)}.

case(?agent-13,for*), amod(type*,diplomatic*), compound(type*,?agent-2), nmod:npmod(type*,?kind-7), compound(type*,organization*), sumo(?TYPEVAR0,?agent-13), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR2,?kind-7), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR2,Organization) ==> {(diplomaticOrganizationType ?agent-2 ?kind-7 ?agent-13)}.

nmod:of(relations*,?area-12), case(?area-12,of*), amod(relations*,diplomatic*), nsubj(relations*,?area-4), cop(relations*,is*), sumo(?TYPEVAR1,?area-4), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(diplomaticRelations ?area-12 ?area-4)}.

compound(type*,representation*), compound(type*,?agent-2), amod(type*,diplomatic*), dep(type*,?position-7), case(?agent-11,for*), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR0,?agent-2), sumo(?TYPEVAR1,?position-7), isSubclass(?TYPEVAR2,Agent), isSubclass(?TYPEVAR1,Position), sumo(?TYPEVAR2,?agent-11) ==> {(diplomaticRepresentationType ?agent-2 ?position-7 ?agent-11)}.

amod(role*,?human-8), case(?position-11,for*), case(role*,in*), case(?agent-15,with*), nmod:in(representative*,role*), amod(representative*,diplomatic*), compound(representative*,?agent-2), isSubclass(?TYPEVAR1,Position), sumo(?TYPEVAR0,?human-8), isSubclass(?TYPEVAR0,Human), isSubclass(?TYPEVAR3,Agent), sumo(?TYPEVAR2,?agent-15), isSubclass(?TYPEVAR2,Agent), sumo(?TYPEVAR3,?agent-2), sumo(?TYPEVAR1,?position-11) ==> {(diplomaticRepresentativeInRole ?agent-2 ?human-8 ?position-11 ?agent-15)}.

nmod:of(directory*,?file-11), nsubj(directory*,?directory-3), case(?file-11,of*), case(?file-11,of*), cop(directory*,is*), isSubclass(?TYPEVAR0,ComputerFile), sumo(?TYPEVAR0,?file-11), sumo(?TYPEVAR1,?directory-3), isSubclass(?TYPEVAR1,ComputerDirectory) ==> {(directoryOf ?file-11 ?directory-3)}.

nmod:of(disapproves*,?agent-9), nsubj(disapproves*,?formula-2), cop(disapproves*,is*), case(?agent-9,of*), sumo(?TYPEVAR0,?agent-9), sumo(?TYPEVAR1,?formula-2), isSubclass(?TYPEVAR0,CognitiveAgent), isSubclass(?TYPEVAR1,Formula) ==> {(disapproves ?agent-9 ?formula-2)}.

case(?kind-14,for*), dobj(incubation*,?kind-8), nsubj(incubation*,disease*), compound(disease*,?syndrome-4), nsubj(incubation*,?disease-2), nmod:for(incubation*,?kind-14), conj:or(?disease-2,disease*), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR0,?kind-14), isSubclass(?TYPEVAR0,TimeDuration), isSubclass(?TYPEVAR2,DiseaseOrSyndrome), sumo(?TYPEVAR3,?disease-2), sumo(?TYPEVAR1,?kind-8), sumo(?TYPEVAR2,?syndrome-4), isSubclass(?TYPEVAR3,DiseaseOrSyndrome) ==> {(diseaseIncubation ?syndrome-4 ?kind-8 ?kind-14)}.

nsubj(mortality*,?number-3), case(?disease-10,of*), compound(mortality*,disease*), nmod:of(mortality*,?disease-10), nmod:of(mortality*,?syndrome-12), cop(mortality*,is*), isSubclass(?TYPEVAR0,RealNumber), isSubclass(?TYPEVAR1,DiseaseOrSyndrome), isSubclass(?TYPEVAR2,DiseaseOrSyndrome), sumo(?TYPEVAR0,?number-3), sumo(?TYPEVAR1,?disease-10), sumo(?TYPEVAR2,?syndrome-12) ==> {(diseaseMortality ?syndrome-12 ?number-3)}.

nsubj(symptom*,?syndrome-5), nmod:of(symptom*,?syndrome-14), cop(symptom*,is*), nmod:of(symptom*,?disease-12), nsubj(symptom*,?disease-3), case(?disease-12,of*), compound(symptom*,disease*), isSubclass(?TYPEVAR1,DiseaseOrSyndrome), sumo(?TYPEVAR3,?disease-3), sumo(?TYPEVAR2,?disease-12), sumo(?TYPEVAR0,?syndrome-5), isSubclass(?TYPEVAR3,DiseaseOrSyndrome), sumo(?TYPEVAR1,?syndrome-14), isSubclass(?TYPEVAR0,DiseaseOrSyndrome), isSubclass(?TYPEVAR2,DiseaseOrSyndrome) ==> {(diseaseSymptom ?syndrome-14 ?syndrome-5)}.

; compound(treatment*,disease*), case(?kind-15,for*), compound(treatment*,?syndrome-4), conj:or(?disease-2,treatment*), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?syndrome-4), isSubclass(?TYPEVAR1,DiseaseOrSyndrome), sumo(?TYPEVAR2,?disease-2), isSubclass(?TYPEVAR2,DiseaseOrSyndrome), sumo(?TYPEVAR0,?kind-15) ==> {(diseaseTreatment ?disease-2 ?syndrome-4 ?kind-15)}.

dobj(possession*,?area-9), case(?area-14,for*), dobj(disputed*,possession*), nsubj(disputed*,?area-3), sumo(?TYPEVAR1,?area-14), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR0,?area-9) ==> {(disputedPossession ?area-3 ?area-9 ?area-14)}.

case(?human-10,of*), nmod:of(partner*,?human-10), cop(partner*,is*), nsubj(partner*,?human-3), amod(partner*,domestic*), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR0,?human-10), sumo(?TYPEVAR1,?human-3), isSubclass(?TYPEVAR1,Human) ==> {(domesticPartner ?human-10 ?human-3)}.

cop(doubts*,is*), nmod:of(doubts*,?agent-9), case(?agent-9,of*), nsubj(doubts*,?formula-2), sumo(?TYPEVAR1,?formula-2), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-9), isSubclass(?TYPEVAR1,Formula) ==> {(doubts ?agent-9 ?formula-2)}.

advmod(payment*,down*), nmod:of(payment*,?loan-10), case(?loan-10,of*), nsubj(payment*,?measure-3), cop(payment*,is*), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR0,Loan), sumo(?TYPEVAR0,?loan-10) ==> {(downPayment ?loan-10 ?measure-3)}.

compound(destination*,drug*), compound(destination*,shipment*), case(?area-16,for*), amod(destination*,?geopolitical-2), dep(destination*,?kind-8), compound(destination*,?area-3), isSubclass(?TYPEVAR2,IllicitDrug), sumo(?TYPEVAR3,?area-3), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR0,?area-16), sumo(?TYPEVAR1,?geopolitical-2), sumo(?TYPEVAR2,?kind-8), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(drugShipmentDestination ?geopolitical-2 ?kind-8 ?area-16)}.

nmod:of(season*,?time-4), nmod:in(season*,area*), dep(season*,?kind-2), nmod:of(area*,?area-15), nsubj(season*,?interval-5), case(?area-15,of*), cop(season*,is*), case(area*,in*), amod(season*,dry*), isSubclass(?TYPEVAR3,TimeInterval), sumo(?TYPEVAR3,?interval-5), sumo(?TYPEVAR0,?time-4), sumo(?TYPEVAR2,?area-15), isSubclass(?TYPEVAR0,TimeInterval), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR2,GeographicArea) ==> {(drySeasonInArea ?area-15 ?kind-2)}.

cop(aid*,is*), acl(aid*,donated*), nsubj(aid*,?measure-3), amod(aid*,economic*), nmod:of(donated*,?area-12), case(?area-12,of*), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR0,?measure-3), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(economicAidDonated ?area-12 ?measure-3)}.

amod(aid*,?geopolitical-2), case(?kind-14,for*), compound(aid*,?area-3), case(period*,in*), amod(aid*,economic*), dep(period*,?measure-11), nmod:in(donated*,period*), acl(aid*,donated*), sumo(?TYPEVAR0,?geopolitical-2), sumo(?TYPEVAR3,?measure-11), sumo(?TYPEVAR1,?kind-14), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR3,CurrencyMeasure), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(economicAidDonatedInPeriod ?area-3 ?measure-11 ?kind-14)}.

nsubj(aid*,?measure-3), amod(aid*,economic*), dobj(received*,net*), cop(aid*,is*), nmod:of(net*,?area-13), case(?area-13,of*), acl(aid*,received*), sumo(?TYPEVAR0,?measure-3), sumo(?TYPEVAR1,?area-13), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR0,CurrencyMeasure) ==> {(economicAidReceivedNet ?area-13 ?measure-3)}.

amod(aid*,?geopolitical-2), case(period*,in*), case(?kind-15,for*), dep(net*,?measure-12), nmod:in(net*,period*), amod(aid*,economic*), compound(aid*,?area-3), nsubj(received*,aid*), dobj(received*,net*), sumo(?TYPEVAR0,?geopolitical-2), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR2,?measure-12), sumo(?TYPEVAR3,?area-3), isSubclass(?TYPEVAR3,GeopoliticalArea), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR2,CurrencyMeasure), sumo(?TYPEVAR1,?kind-15) ==> {(economicAidReceivedNetInPeriod ?area-3 ?measure-12 ?kind-15)}.

nsubj(type*,?attribute-3), compound(type*,economy*), cop(type*,is*), nmod:of(type*,?agent-10), case(?agent-10,of*), sumo(?TYPEVAR0,?attribute-3), sumo(?TYPEVAR1,?agent-10), isSubclass(?TYPEVAR0,EconomicAttribute), isSubclass(?TYPEVAR1,Agent) ==> {(economyType ?agent-10 ?attribute-3)}.

nsubj(dose*,?quantity-3), cop(dose*,is*), amod(dose*,effective*), nmod:of(dose*,?kind-10), case(?kind-10,of*), isSubclass(?TYPEVAR1,BiochemicalAgent), isSubclass(?TYPEVAR0,FunctionQuantity), sumo(?TYPEVAR1,?kind-10), sumo(?TYPEVAR0,?quantity-3) ==> {(effectiveDose ?kind-10 ?quantity-3)}.

case(?device-10,of*), cop(range*,is*), nsubj(range*,?measure-3), nmod:of(range*,?device-10), amod(range*,effective*), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?device-10), isSubclass(?TYPEVAR0,Device), isSubclass(?TYPEVAR1,LengthMeasure) ==> {(effectiveRange ?device-10 ?measure-3)}.

compound(date*,?agent-2), case(position*,for*), compound(date*,election*), dep(position*,?kind-9), nsubj(planned*,date*), case(?role-16,for*), nmod:for(planned*,position*), isSubclass(?TYPEVAR1,TimePosition), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR2,SocialRole), sumo(?TYPEVAR1,?kind-9), sumo(?TYPEVAR2,?role-16) ==> {(electionDatePlannedForPosition ?agent-2 ?kind-9 ?role-16)}.

nmod:for(election*,organization*), case(?election-10,of*), nsubj(election*,?organization-2), case(organization*,for*), cop(election*,is*), nmod:of(organization*,?election-10), isSubclass(?TYPEVAR0,Election), isSubclass(?TYPEVAR1,Organization), sumo(?TYPEVAR0,?election-10), sumo(?TYPEVAR1,?organization-2) ==> {(electionForOrganization ?election-10 ?organization-2)}.

nsubj(election*,?role-3), cop(election*,is*), case(?election-11,of*), nmod:of(position*,?election-11), nmod:for(election*,position*), case(position*,for*), isSubclass(?TYPEVAR1,Election), sumo(?TYPEVAR1,?election-11), sumo(?TYPEVAR0,?role-3), isSubclass(?TYPEVAR0,SocialRole) ==> {(electionForPosition ?election-11 ?role-3)}.

compound(winner*,?election-2), compound(winner*,election*), dep(winner*,?role-7), case(?agent-10,for*), sumo(?TYPEVAR1,?role-7), isSubclass(?TYPEVAR2,Agent), isSubclass(?TYPEVAR0,Election), sumo(?TYPEVAR2,?agent-10), isSubclass(?TYPEVAR1,SocialRole), sumo(?TYPEVAR0,?election-2) ==> {(electionWinner ?election-2 ?role-7 ?agent-10)}.

compound(consumption*,?area-3), nmod:in(consumption*,period*), compound(consumption*,electricity*), amod(consumption*,?geopolitical-2), case(period*,in*), dep(period*,?quantity-10), case(?kind-13,for*), sumo(?TYPEVAR3,?kind-13), sumo(?TYPEVAR2,?quantity-10), isSubclass(?TYPEVAR3,TimeInterval), sumo(?TYPEVAR1,?geopolitical-2), sumo(?TYPEVAR0,?area-3), isSubclass(?TYPEVAR2,PhysicalQuantity), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(electricityConsumptionInPeriod ?area-3 ?quantity-10 ?kind-13)}.

case(period*,in*), case(?kind-13,for*), compound(export*,?area-3), nmod:in(export*,period*), dep(period*,?quantity-10), amod(export*,?geopolitical-2), compound(export*,electricity*), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR2,?quantity-10), sumo(?TYPEVAR3,?geopolitical-2), sumo(?TYPEVAR0,?kind-13), isSubclass(?TYPEVAR2,PhysicalQuantity), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR0,TimeInterval) ==> {(electricityExportInPeriod ?geopolitical-2 ?quantity-10 ?kind-13)}.

compound(fraction*,electricity*), dep(source*,?kind-9), case(?number-16,for*), amod(fraction*,?geopolitical-2), nmod:from(fraction*,source*), compound(fraction*,?area-3), case(source*,from*), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR2,?geopolitical-2), isSubclass(?TYPEVAR0,PowerGeneration), sumo(?TYPEVAR1,?number-16), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR3,?area-3), sumo(?TYPEVAR0,?kind-9), isSubclass(?TYPEVAR3,GeopoliticalArea) ==> {(electricityFractionFromSource ?area-3 ?kind-9 ?number-16)}.

nmod:from(fraction*,source*), amod(fraction*,?geopolitical-2), case(source*,from*), case(?kind-21,with*), compound(fraction*,electricity*), case(period*,in*), dep(period*,?kind-11), nmod:in(fraction*,period*), compound(fraction*,?area-3), case(?number-18,for*), sumo(?TYPEVAR4,?number-18), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR2,?kind-11), sumo(?TYPEVAR3,?area-3), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR4,RealNumber), sumo(?TYPEVAR1,?kind-21), isSubclass(?TYPEVAR2,PowerGeneration), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?geopolitical-2) ==> {(electricityFractionFromSourceInPeriod ?geopolitical-2 ?kind-11 ?number-18 ?kind-21)}.

compound(import*,?area-3), case(period*,in*), nmod:in(import*,period*), compound(import*,electricity*), amod(import*,?geopolitical-2), dep(period*,?quantity-10), case(?kind-13,for*), sumo(?TYPEVAR0,?area-3), sumo(?TYPEVAR2,?quantity-10), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR3,?kind-13), sumo(?TYPEVAR1,?geopolitical-2), isSubclass(?TYPEVAR2,PhysicalQuantity), isSubclass(?TYPEVAR3,TimeInterval), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(electricityImportInPeriod ?geopolitical-2 ?quantity-10 ?kind-13)}.

compound(production*,?area-3), case(?kind-13,for*), case(period*,in*), compound(production*,electricity*), amod(production*,?geopolitical-2), nmod:in(production*,period*), dep(period*,?quantity-10), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR2,?geopolitical-2), sumo(?TYPEVAR3,?quantity-10), sumo(?TYPEVAR0,?area-3), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR3,PhysicalQuantity), sumo(?TYPEVAR1,?kind-13) ==> {(electricityProductionInPeriod ?area-3 ?quantity-10 ?kind-13)}.

case(?substance-11,of*), cop(number*,is*), compound(number*,electron*), nmod:of(number*,?substance-11), nsubj(number*,?integer-3), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR1,?integer-3), sumo(?TYPEVAR0,?substance-11), isSubclass(?TYPEVAR0,PureSubstance) ==> {(electronNumber ?substance-11 ?integer-3)}.

nmod:of(elevation*,?object-9), case(?object-9,of*), nsubj(elevation*,?measure-3), cop(elevation*,is*), sumo(?TYPEVAR0,?object-9), isSubclass(?TYPEVAR1,LengthMeasure), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?measure-3) ==> {(elevation ?object-9 ?measure-3)}.

nmod:of(address*,?string-10), nsubj(address*,?agent-2), cop(address*,is*), compound(address*,email*), case(?string-10,of*), sumo(?TYPEVAR0,?string-10), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR1,?agent-2) ==> {(emailAddress ?string-10 ?agent-2)}.

dobj(contribution*,?measure-7), case(?time-10,for*), compound(contribution*,employee*), amod(contribution*,?human-2), isSubclass(?TYPEVAR0,CurrencyMeasure), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR0,?measure-7), sumo(?TYPEVAR1,?time-10), sumo(?TYPEVAR2,?human-2), isSubclass(?TYPEVAR2,Human) ==> {(employeeContribution ?human-2 ?measure-7 ?time-10)}.

nmod:of(area*,?area-15), case(?area-15,of*), nsubj(type*,?kind-2), amod(type*,environmental*), case(area*,in*), nmod:in(type*,area*), cop(type*,is*), compound(type*,problem*), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-15), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR1,?kind-2) ==> {(environmentalProblemTypeInArea ?area-15 ?kind-2)}.

compound(count*,?object-2), nmod:npmod(count*,?kind-6), case(?quantity-11,for*), compound(count*,equipment*), sumo(?TYPEVAR2,?quantity-11), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR2,Quantity), sumo(?TYPEVAR1,?kind-6), isSubclass(?TYPEVAR1,Device) ==> {(equipmentCount ?object-2 ?kind-6 ?quantity-11)}.

compound(type*,equipment*), cop(type*,is*), nmod:of(type*,?artifact-9), nsubj(type*,?device-2), case(?artifact-9,of*), isSubclass(?TYPEVAR0,Artifact), sumo(?TYPEVAR0,?artifact-9), sumo(?TYPEVAR1,?device-2), isSubclass(?TYPEVAR1,Device) ==> {(equipmentType ?artifact-9 ?device-2)}.

case(?string-10,of*), nmod:of(phone*,?string-10), compound(phone*,evening*), nsubj(phone*,?agent-2), cop(phone*,is*), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-10), sumo(?TYPEVAR1,?agent-2) ==> {(eveningPhone ?string-10 ?agent-2)}.

amod(branch*,executive*), nmod:of(branch*,?organization-9), case(?organization-9,of*), cop(branch*,is*), nsubj(branch*,?agent-2), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR0,?organization-9), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent) ==> {(executiveBranch ?organization-9 ?agent-2)}.

amod(control*,experimental*), cop(control*,is*), nsubj(control*,?object-2), nmod:of(control*,?experimenting-9), case(?experimenting-9,of*), sumo(?TYPEVAR1,?experimenting-9), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR1,Experimenting), isSubclass(?TYPEVAR0,Object) ==> {(experimentalControl ?experimenting-9 ?object-2)}.

nmod:of(type*,?area-13), compound(type*,export*), case(?area-13,of*), nsubj(type*,?kind-2), cop(type*,is*), compound(type*,commodity*), sumo(?TYPEVAR0,?area-13), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,Object) ==> {(exportCommodityType ?area-13 ?kind-2)}.

compound(type*,export*), amod(type*,?geopolitical-2), compound(type*,commodity*), compound(type*,?area-3), case(rank*,by*), case(?integer-16,for*), dep(rank*,?kind-10), nmod:by(type*,rank*), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR2,?integer-16), sumo(?TYPEVAR0,?geopolitical-2), sumo(?TYPEVAR3,?kind-10), isSubclass(?TYPEVAR2,PositiveInteger), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR3,Object) ==> {(exportCommodityTypeByRank ?geopolitical-2 ?kind-10 ?integer-16)}.

nmod:of(partner*,?agent-10), compound(partner*,export*), case(?agent-10,of*), nsubj(partner*,?agent-3), cop(partner*,is*), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?agent-3), sumo(?TYPEVAR0,?agent-10), isSubclass(?TYPEVAR1,Agent) ==> {(exportPartner ?agent-10 ?agent-3)}.

amod(partner*,?geopolitical-2), case(fraction*,by*), case(?number-16,for*), nmod:by(partner*,fraction*), dep(fraction*,?area-11), compound(partner*,export*), compound(partner*,?area-3), sumo(?TYPEVAR0,?geopolitical-2), sumo(?TYPEVAR2,?area-11), isSubclass(?TYPEVAR3,GeopoliticalArea), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR3,?area-3), sumo(?TYPEVAR1,?number-16), isSubclass(?TYPEVAR1,PositiveRealNumber) ==> {(exportPartnerByFraction ?area-3 ?area-11 ?number-16)}.

case(?kind-21,with*), compound(partner*,?area-3), amod(partner*,?geopolitical-2), nmod:by(partner*,fraction*), dep(period*,?area-13), case(?number-18,for*), nmod:in(partner*,period*), case(period*,in*), compound(partner*,export*), case(fraction*,by*), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR4,?number-18), sumo(?TYPEVAR3,?area-13), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR2,?geopolitical-2), isSubclass(?TYPEVAR4,PositiveRealNumber), sumo(?TYPEVAR0,?kind-21), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR1,?area-3) ==> {(exportPartnerByFractionInPeriod ?area-3 ?area-13 ?number-18 ?kind-21)}.

compound(partner*,?area-3), case(rank*,by*), case(?integer-15,for*), compound(partner*,export*), nmod:by(partner*,rank*), amod(partner*,?geopolitical-2), amod(rank*,?area-11), sumo(?TYPEVAR3,?area-11), sumo(?TYPEVAR0,?area-3), sumo(?TYPEVAR2,?geopolitical-2), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR1,?integer-15), isSubclass(?TYPEVAR1,PositiveInteger) ==> {(exportPartnerByRank ?geopolitical-2 ?area-11 ?integer-15)}.

compound(partner*,export*), case(rank*,by*), compound(partner*,?area-3), case(period*,in*), case(?integer-17,for*), nmod:in(partner*,period*), nmod:by(partner*,rank*), dobj(period*,?area-13), case(?kind-20,with*), amod(partner*,?geopolitical-2), isSubclass(?TYPEVAR1,PositiveInteger), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR3,?kind-20), sumo(?TYPEVAR4,?geopolitical-2), isSubclass(?TYPEVAR4,GeopoliticalArea), isSubclass(?TYPEVAR3,TimeInterval), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR0,?area-3), sumo(?TYPEVAR1,?integer-17), sumo(?TYPEVAR2,?area-13) ==> {(exportPartnerByRankInPeriod ?area-3 ?area-13 ?integer-17 ?kind-20)}.

case(period*,in*), nmod:in(partner*,period*), dep(period*,?agent-9), compound(partner*,?agent-2), case(?kind-12,for*), compound(partner*,export*), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR2,?kind-12), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?agent-9) ==> {(exportPartnerInPeriod ?agent-2 ?agent-9 ?kind-12)}.

amod(total*,?geopolitical-2), compound(total*,?area-3), case(?kind-13,for*), dep(total*,?measure-10), nmod:in(total*,period*), compound(total*,export*), case(period*,in*), sumo(?TYPEVAR0,?geopolitical-2), sumo(?TYPEVAR2,?kind-13), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR3,CurrencyMeasure), sumo(?TYPEVAR1,?area-3), sumo(?TYPEVAR3,?measure-10), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR2,TimeInterval) ==> {(exportTotalInPeriod ?area-3 ?measure-10 ?kind-13)}.

case(?area-11,of*), amod(debt*,external*), nsubj(debt*,?measure-3), nmod:of(debt*,?area-11), cop(debt*,is*), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?area-11), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,CurrencyMeasure) ==> {(externalDebt ?area-11 ?measure-3)}.

case(?kind-13,for*), case(period*,in*), nmod:in(debt*,period*), amod(debt*,external*), dep(period*,?measure-10), dep(?area-3,debt*), sumo(?TYPEVAR0,?kind-13), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR2,?area-3), sumo(?TYPEVAR1,?measure-10), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR0,TimeInterval) ==> {(externalDebtInPeriod ?area-3 ?measure-10 ?kind-13)}.

nsubj(value*,?measure-3), cop(value*,is*), case(?collateral-10,of*), compound(value*,face*), nmod:of(value*,?collateral-10), sumo(?TYPEVAR0,?measure-3), isSubclass(?TYPEVAR0,CurrencyMeasure), isSubclass(?TYPEVAR1,Collateral), sumo(?TYPEVAR1,?collateral-10) ==> {(faceValue ?collateral-10 ?measure-3)}.

nsubj(?string-3,family_name*), nmod:poss(family_name*,?subj), sumo(?TYPEVAR0,?subj), isSubclass(?TYPEVAR0,Human) ==> {(familyName ?string-3 ?subj)}.

nmod:of(account*,?account-11), cop(account*,is*), case(?account-11,of*), nsubj(account*,?company-3), amod(account*,financial*), isSubclass(?TYPEVAR1,FinancialCompany), sumo(?TYPEVAR1,?company-3), isSubclass(?TYPEVAR0,FinancialAccount), sumo(?TYPEVAR0,?account-11) ==> {(financialAccount ?account-11 ?company-3)}.

case(?response-12,of*), cop(response*,is*), amod(response*,financial*), nmod:of(response*,?response-12), nsubj(response*,?request-3), case(?response-12,to*), isSubclass(?TYPEVAR0,FinancialResponse), sumo(?TYPEVAR0,?response-12), isSubclass(?TYPEVAR1,FinancialRequest), sumo(?TYPEVAR1,?request-3) ==> {(financialResponseTo ?response-12 ?request-3)}.

acl:relcl(?time-4,period*), compound(period*,year*), nmod:of(period*,?agent-13), case(?agent-13,of*), amod(period*,fiscal*), cop(period*,is*), nsubj(period*,?interval-5), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR2,?interval-5), sumo(?TYPEVAR1,?agent-13), sumo(?TYPEVAR0,?time-4), isSubclass(?TYPEVAR1,Agent) ==> {(fiscalYearPeriod ?agent-13 ?time-4)}.

case(?agent-15,of*), amod(service*,military*), case(service*,for*), nmod:for(fit*,service*), cop(fit*,is*), nmod:of(service*,?agent-15), nsubj(fit*,?kind-2), sumo(?TYPEVAR0,?agent-15), isSubclass(?TYPEVAR1,MilitaryProcess), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR1,?kind-2) ==> {(fitForMilitaryService ?agent-15 ?kind-2)}.

nsubj(rate*,?rate-3), compound(rate*,interest*), case(?account-12,of*), nmod:of(rate*,?account-12), cop(rate*,is*), amod(rate*,fixed*), sumo(?TYPEVAR1,?account-12), sumo(?TYPEVAR0,?rate-3), isSubclass(?TYPEVAR0,InterestRate), isSubclass(?TYPEVAR1,FinancialAccount) ==> {(fixedInterestRate ?account-12 ?rate-3)}.

nsubj(description*,?string-3), compound(description*,flag*), nmod:of(description*,?area-11), case(?area-11,of*), cop(description*,is*), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-3), sumo(?TYPEVAR1,?area-11), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(flagDescription ?area-11 ?string-3)}.

cop(image*,is*), nmod:of(image*,?area-11), compound(image*,flag*), case(?area-11,of*), nsubj(image*,?string-3), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR1,SymbolicString), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?area-11) ==> {(flagImage ?area-11 ?string-3)}.

nsubj(state*,?area-3), case(?vehicle-11,of*), nmod:of(state*,?vehicle-11), compound(state*,flag*), cop(state*,is*), sumo(?TYPEVAR1,?vehicle-11), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,WaterVehicle), sumo(?TYPEVAR0,?area-3) ==> {(flagState ?vehicle-11 ?area-3)}.

cop(tonnage*,is*), amod(tonnage*,dead*), compound(tonnage*,fleet*), case(?collection-12,of*), nmod:of(tonnage*,?collection-12), nsubj(tonnage*,?measure-3), compound(tonnage*,weight*), sumo(?TYPEVAR0,?collection-12), isSubclass(?TYPEVAR0,Collection), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,MassMeasure) ==> {(fleetDeadWeightTonnage ?collection-12 ?measure-3)}.

cop(tonnage*,is*), compound(tonnage*,fleet*), nmod:of(tonnage*,?collection-12), nsubj(tonnage*,?quantity-3), amod(tonnage*,registered*), case(?collection-12,of*), amod(tonnage*,gross*), sumo(?TYPEVAR0,?collection-12), isSubclass(?TYPEVAR1,PhysicalQuantity), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR0,Collection) ==> {(fleetGrossRegisteredTonnage ?collection-12 ?quantity-3)}.

compound(loan*,floor*), case(?loan-10,of*), cop(loan*,is*), nmod:of(loan*,?loan-10), nsubj(loan*,?measure-3), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?loan-10), isSubclass(?TYPEVAR0,Loan) ==> {(floorLoan ?loan-10 ?measure-3)}.

compound(current*,flow*), nmod:of(current*,?motion-11), case(?motion-11,of*), cop(current*,is*), nsubj(current*,?area-3), isSubclass(?TYPEVAR0,WaterMotion), sumo(?TYPEVAR1,?area-3), sumo(?TYPEVAR0,?motion-11), isSubclass(?TYPEVAR1,WaterArea) ==> {(flowCurrent ?motion-11 ?area-3)}.

nsubj(flows*,?physical-3), cop(flows*,is*), case(?physical-9,of*), nmod:of(flows*,?physical-9), sumo(?TYPEVAR0,?physical-3), sumo(?TYPEVAR1,?physical-9), isSubclass(?TYPEVAR1,Physical), isSubclass(?TYPEVAR0,Physical) ==> {(flows ?physical-9 ?physical-3)}.

compound(ships*,?merchant-2), case(origin*,by*), amod(ships*,?marine-3), nmod:by(ships*,origin*), dep(origin*,?area-10), compound(ships*,fOC*), case(?integer-14,for*), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR3,?integer-14), sumo(?TYPEVAR1,?marine-3), isSubclass(?TYPEVAR1,MerchantMarine), isSubclass(?TYPEVAR0,MerchantMarine), sumo(?TYPEVAR0,?merchant-2), isSubclass(?TYPEVAR3,NonnegativeInteger), sumo(?TYPEVAR2,?area-10) ==> {(fOCShipsByOrigin ?merchant-2 ?area-10 ?integer-14)}.

nmod:of(friend*,?human-9), nsubj(friend*,?human-3), cop(friend*,is*), case(?human-9,of*), sumo(?TYPEVAR0,?human-9), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?human-3), isSubclass(?TYPEVAR1,Human) ==> {(friend ?human-9 ?human-3)}.

amod(substrate*,genetic*), case(?virus-11,of*), cop(substrate*,is*), nmod:of(substrate*,virus*), case(virus*,of*), nsubj(substrate*,?molecule-2), nmod:of(virus*,?virus-11), isSubclass(?TYPEVAR1,Molecule), sumo(?TYPEVAR0,?virus-11), isSubclass(?TYPEVAR0,Virus), sumo(?TYPEVAR1,?molecule-2) ==> {(geneticSubstrateOfVirus ?virus-11 ?molecule-2)}.

case(?area-12,of*), cop(subregion*,is*), nsubj(subregion*,?area-3), nmod:of(subregion*,?area-12), amod(subregion*,geographic*), isSubclass(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR1,?area-3), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR0,GeographicArea) ==> {(geographicSubregion ?area-3 ?area-12)}.

case(?measure-13,for*), dep(distance*,?point-9), dep(?point-3,distance*), amod(distance*,geometric*), sumo(?TYPEVAR1,?point-9), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR2,?point-3), isSubclass(?TYPEVAR1,GeometricPoint), isSubclass(?TYPEVAR2,GeometricPoint), sumo(?TYPEVAR0,?measure-13) ==> {(geometricDistance ?point-3 ?point-9 ?measure-13)}.

cop(part*,is*), amod(part*,geometric*), case(?figure-12,of*), nmod:of(part*,?figure-12), nsubj(part*,?figure-4), isSubclass(?TYPEVAR1,GeometricFigure), sumo(?TYPEVAR0,?figure-12), sumo(?TYPEVAR1,?figure-4), isSubclass(?TYPEVAR0,GeometricFigure) ==> {(geometricPart ?figure-12 ?figure-4)}.

nsubj(?string-3,given_name*), nmod:poss(given_name*,?subj), sumo(?TYPEVAR0,?subj), isSubclass(?TYPEVAR0,Human) ==> {(givenName ?string-3 ?subj)}.

cop(type*,is*), case(?agent-11,of*), nsubj(type*,?form-2), compound(type*,government*), nmod:of(type*,?agent-11), sumo(?TYPEVAR1,?form-2), isSubclass(?TYPEVAR1,FormOfGovernment), sumo(?TYPEVAR0,?agent-11), isSubclass(?TYPEVAR0,Agent) ==> {(governmentType ?agent-11 ?form-2)}.

nmod:of(relation*,?phrase-9), nsubj(relation*,?sentence-2), amod(relation*,grammatical*), case(?phrase-9,of*), cop(relation*,is*), sumo(?TYPEVAR0,?phrase-9), isSubclass(?TYPEVAR1,Sentence), sumo(?TYPEVAR1,?sentence-2), isSubclass(?TYPEVAR0,Phrase) ==> {(grammaticalRelation ?phrase-9 ?sentence-2)}.

case(?human-9,of*), nsubj(grandparent*,?human-3), cop(grandparent*,is*), nmod:of(grandparent*,?human-9), sumo(?TYPEVAR1,?human-3), isSubclass(?TYPEVAR1,Human), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR0,?human-9) ==> {(grandparent ?human-9 ?human-3)}.

nmod:of(granularity*,?system-10), nsubj(granularity*,?duration-3), cop(granularity*,is*), acl:relcl(?time-2,granularity*), case(?system-10,of*), sumo(?TYPEVAR1,?duration-3), sumo(?TYPEVAR2,?time-2), sumo(?TYPEVAR0,?system-10), isSubclass(?TYPEVAR0,RealtimeSystem), isSubclass(?TYPEVAR1,TimeDuration), isSubclass(?TYPEVAR2,TimeDuration) ==> {(granularity ?system-10 ?time-2)}.

compound(type*,subsurface*), case(?area-13,of*), compound(type*,ground*), nmod:of(type*,?area-13), cop(type*,is*), nsubj(type*,?kind-2), sumo(?TYPEVAR0,?area-13), isSubclass(?TYPEVAR0,LandArea), isSubclass(?TYPEVAR1,Substance), sumo(?TYPEVAR1,?kind-2) ==> {(groundSubsurfaceType ?area-13 ?kind-2)}.

nsubj(type*,?kind-2), cop(type*,is*), compound(type*,ground*), compound(type*,surface*), nmod:of(type*,?area-13), case(?area-13,of*), isSubclass(?TYPEVAR1,LandArea), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR0,Substance), sumo(?TYPEVAR1,?area-13) ==> {(groundSurfaceType ?area-13 ?kind-2)}.

acl(a*,has*), dobj(has*,dependency*), nmod:of(dependency*,?program-12), nsubj(is*,a*), dep(?program-4,is*), case(?program-12,of*), sumo(?TYPEVAR1,?program-4), sumo(?TYPEVAR0,?program-12), isSubclass(?TYPEVAR1,ComputerProgram), isSubclass(?TYPEVAR0,ComputerProgram) ==> {(hasDependency ?program-12 ?program-4)}.

case(?human-11,of*), amod(expertise*,has*), nsubj(expertise*,?field-2), cop(expertise*,is*), nmod:of(expertise*,?human-11), sumo(?TYPEVAR0,?human-11), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?field-2), isSubclass(?TYPEVAR1,FieldOfStudy) ==> {(hasExpertise ?human-11 ?field-2)}.

amod(attribute*,molecular*), nmod:of(attribute*,?molecule-13), cop(attribute*,is*), amod(attribute*,structural*), dep(attribute*,has*), nsubj(attribute*,?attribute-4), case(?molecule-13,of*), isSubclass(?TYPEVAR0,Molecule), sumo(?TYPEVAR1,?attribute-4), sumo(?TYPEVAR0,?molecule-13), isSubclass(?TYPEVAR1,MoleculeStructuralAttribute) ==> {(hasMolecularStructuralAttribute ?molecule-13 ?attribute-4)}.

nsubj(occupation*,?kind-2), case(?human-12,of*), nmod:of(occupation*,?human-12), cop(occupation*,is*), amod(occupation*,has*), sumo(?TYPEVAR0,?kind-2), sumo(?TYPEVAR1,?human-12), isSubclass(?TYPEVAR0,IntentionalProcess), isSubclass(?TYPEVAR1,Human) ==> {(hasOccupation ?human-12 ?kind-2)}.

nsubj(north*,?measure-4), compound(north*,compass*), cop(north*,is*), nmod:of(north*,?object-12), case(?object-12,of*), compound(north*,headingWRT*), isSubclass(?TYPEVAR0,PlaneAngleMeasure), sumo(?TYPEVAR0,?measure-4), sumo(?TYPEVAR1,?object-12), isSubclass(?TYPEVAR1,Object) ==> {(headingWRTCompassNorth ?object-12 ?measure-4)}.

nsubj(north*,?measure-4), amod(north*,magnetic*), compound(north*,headingWRT*), case(?object-12,of*), cop(north*,is*), nmod:of(north*,?object-12), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,PlaneAngleMeasure), sumo(?TYPEVAR1,?object-12), sumo(?TYPEVAR0,?measure-4) ==> {(headingWRTMagneticNorth ?object-12 ?measure-4)}.

case(?object-12,of*), cop(north*,is*), amod(north*,true*), compound(north*,headingWRT*), nsubj(north*,?measure-4), nmod:of(north*,?object-12), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-12), isSubclass(?TYPEVAR1,PlaneAngleMeasure), sumo(?TYPEVAR1,?measure-4) ==> {(headingWRTTrueNorth ?object-12 ?measure-4)}.

nmod:of(head*,government*), case(?human-11,for*), amod(head*,?geopolitical-2), compound(head*,?area-3), case(government*,of*), appos(head*,?position-8), sumo(?TYPEVAR1,?geopolitical-2), sumo(?TYPEVAR0,?human-11), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR3,Position), sumo(?TYPEVAR3,?position-8), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR2,?area-3) ==> {(headOfGovernment ?area-3 ?position-8 ?human-11)}.

nmod:of(speed*,?object-12), amod(speed*,high*), nsubj(speed*,?quantity-3), cop(speed*,is*), compound(speed*,altitude*), compound(speed*,wind*), case(?object-12,of*), isSubclass(?TYPEVAR1,ConstantQuantity), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?quantity-3), sumo(?TYPEVAR0,?object-12) ==> {(highAltitudeWindSpeed ?object-12 ?quantity-3)}.

; compound(velocity*,wind*), amod(velocity*,high*), compound(velocity*,altitude*), cop(velocity*,is*), nmod:of(velocity*,?object-12), nsubj(velocity*,?quantity-3), case(?object-12,of*), sumo(?TYPEVAR0,?object-12), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR1,PhysicalQuantity) ==> {(highAltitudeWindVelocity ?object-12 ?quantity-3 null)}.

case(income*,of*), compound(income*,household*), amod(share*,decile*), case(?area-15,of*), nsubj(share*,?number-3), cop(share*,is*), amod(share*,highest*), nmod:of(income*,?area-15), nmod:of(share*,income*), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?area-15), sumo(?TYPEVAR1,?number-3), isSubclass(?TYPEVAR1,RealNumber) ==> {(highestDecileShareOfHouseholdIncome ?area-15 ?number-3)}.

case(period*,in*), dep(period*,?number-14), compound(income*,household*), amod(share*,highest*), case(income*,of*), case(?kind-17,for*), amod(share*,decile*), dep(?area-3,share*), nmod:of(share*,income*), nmod:in(share*,period*), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR0,RealNumber), sumo(?TYPEVAR1,?kind-17), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR0,?number-14), isSubclass(?TYPEVAR1,TimeInterval) ==> {(highestDecileShareOfHouseholdIncomeInPeriod ?area-3 ?number-14 ?kind-17)}.

dep(period*,?time-9), dep(?area-3,temperature*), amod(temperature*,highest*), nmod:for(temperature*,period*), case(?measure-14,for*), case(period*,for*), sumo(?TYPEVAR2,?measure-14), sumo(?TYPEVAR0,?time-9), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR1,GeographicArea), isSubclass(?TYPEVAR2,TemperatureMeasure), isSubclass(?TYPEVAR0,TimeDuration) ==> {(highestTemperatureForPeriod ?area-3 ?time-9 ?measure-14)}.

case(?measure-11,for*), nsubj(tide*,?region-2), amod(tide*,high*), dobj(tide*,?time-6), sumo(?TYPEVAR0,?measure-11), isSubclass(?TYPEVAR1,Region), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR1,?region-2), sumo(?TYPEVAR2,?time-6), isSubclass(?TYPEVAR2,TimeInterval) ==> {(highTide ?region-2 ?time-6 ?measure-11)}.

case(?area-13,of*), compound(time*,holiday*), nmod:of(area*,?area-13), nmod:in(time*,area*), case(area*,in*), nsubj(time*,?position-3), cop(time*,is*), sumo(?TYPEVAR0,?area-13), sumo(?TYPEVAR1,?position-3), isSubclass(?TYPEVAR1,TimePosition), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(holidayTimeInArea ?area-13 ?position-3)}.

case(?residence-10,of*), compound(address*,home*), nmod:of(address*,?residence-10), cop(address*,is*), nsubj(address*,?human-2), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR1,?human-2), sumo(?TYPEVAR0,?residence-10), isSubclass(?TYPEVAR0,PermanentResidence) ==> {(homeAddress ?residence-10 ?human-2)}.

amod(forces*,hostile*), nsubj(forces*,?unit-4), case(?unit-12,of*), nmod:of(forces*,?unit-12), cop(forces*,is*), isSubclass(?TYPEVAR0,MilitaryUnit), isSubclass(?TYPEVAR1,MilitaryUnit), sumo(?TYPEVAR0,?unit-4), sumo(?TYPEVAR1,?unit-12) ==> {(hostileForces ?unit-12 ?unit-4)}.

case(?computer-10,of*), compound(jitter*,host*), nsubj(jitter*,?quantity-3), nmod:of(jitter*,?computer-10), cop(jitter*,is*), sumo(?TYPEVAR0,?computer-10), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR1,ConstantQuantity), isSubclass(?TYPEVAR0,Computer) ==> {(hostJitter ?computer-10 ?quantity-3)}.

nmod:of(host*,?system-10), nsubj(host*,?computer-2), case(?system-10,of*), case(?system-10,of*), cop(host*,is*), sumo(?TYPEVAR1,?computer-2), isSubclass(?TYPEVAR1,Computer), isSubclass(?TYPEVAR0,ComputationalSystem), sumo(?TYPEVAR0,?system-10) ==> {(hostOf ?system-10 ?computer-2)}.

dep(season*,?kind-2), case(area*,in*), nmod:of(season*,?time-4), nsubj(season*,?interval-5), cop(season*,is*), nmod:of(area*,?area-15), case(?area-15,of*), nmod:in(season*,area*), amod(season*,hot*), sumo(?TYPEVAR2,?interval-5), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR1,?time-4), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR0,?kind-2), sumo(?TYPEVAR3,?area-15), isSubclass(?TYPEVAR3,GeographicArea) ==> {(hotSeasonInArea ?area-15 ?kind-2)}.

case(?artifact-11,of*), nsubj(capacity*,?integer-3), cop(capacity*,is*), amod(capacity*,human*), nmod:of(capacity*,?artifact-11), sumo(?TYPEVAR1,?integer-3), isSubclass(?TYPEVAR1,PositiveInteger), isSubclass(?TYPEVAR0,StationaryArtifact), sumo(?TYPEVAR0,?artifact-11) ==> {(humanCapacity ?artifact-11 ?integer-3)}.

amod(items*,identical*), nsubj(items*,?list-3), compound(items*,list*), cop(items*,is*), case(?list-11,of*), nmod:of(items*,?list-11), sumo(?TYPEVAR0,?list-3), sumo(?TYPEVAR1,?list-11), isSubclass(?TYPEVAR1,List), isSubclass(?TYPEVAR0,List) ==> {(identicalListItems ?list-11 ?list-3)}.

cop(affiliation*,is*), case(?organization-13,of*), nsubj(affiliation*,?form-2), amod(affiliation*,ideological*), case(organization*,of*), nmod:of(organization*,?organization-13), nmod:of(affiliation*,organization*), sumo(?TYPEVAR1,?form-2), isSubclass(?TYPEVAR1,FormOfGovernment), sumo(?TYPEVAR0,?organization-13), isSubclass(?TYPEVAR0,Organization) ==> {(ideologicalAffiliationOfOrganization ?organization-13 ?form-2)}.

nsubj(consumer*,?kind-2), cop(consumer*,is*), amod(consumer*,illicit*), compound(consumer*,drug*), case(?area-14,of*), nmod:of(consumer*,?area-14), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR0,IllicitDrug), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR1,?area-14) ==> {(illicitDrugConsumer ?area-14 ?kind-2)}.

case(?area-14,of*), cop(producer*,is*), nmod:of(producer*,?area-14), compound(producer*,drug*), amod(producer*,illicit*), nsubj(producer*,?kind-2), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?area-14), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,IllicitDrug) ==> {(illicitDrugProducer ?area-14 ?kind-2)}.

case(?area-17,for*), nsubj(destination*,?area-3), amod(destination*,illicit*), compound(destination*,shipment*), dobj(destination*,?kind-9), compound(destination*,drug*), sumo(?TYPEVAR0,?area-17), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR2,?kind-9), isSubclass(?TYPEVAR2,IllicitDrug), sumo(?TYPEVAR1,?area-3) ==> {(illicitDrugShipmentDestination ?area-3 ?kind-9 ?area-17)}.

compound(point*,drug*), case(?area-17,for*), amod(point*,illicit*), compound(point*,transshipment*), dobj(point*,?kind-9), nsubj(point*,?area-3), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,IllicitDrug), sumo(?TYPEVAR1,?kind-9), sumo(?TYPEVAR0,?area-17), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR2,GeopoliticalArea) ==> {(illicitDrugTransshipmentPoint ?area-3 ?kind-9 ?area-17)}.

compound(resolution*,image*), cop(resolution*,is*), nsubj(resolution*,?quantity-3), nmod:of(resolution*,?file-11), case(?file-11,of*), isSubclass(?TYPEVAR1,ImageFile), sumo(?TYPEVAR0,?quantity-3), isSubclass(?TYPEVAR0,PhysicalQuantity), sumo(?TYPEVAR1,?file-11) ==> {(imageResolution ?file-11 ?quantity-3)}.

nmod:of(type*,?area-13), cop(type*,is*), compound(type*,import*), compound(type*,commodity*), case(?area-13,of*), nsubj(type*,?kind-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?area-13), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(importCommodityType ?area-13 ?kind-2)}.

dep(rank*,?kind-10), compound(type*,?area-3), case(rank*,by*), amod(type*,?geopolitical-2), compound(type*,import*), compound(type*,commodity*), nmod:by(type*,rank*), case(?integer-16,for*), sumo(?TYPEVAR2,?geopolitical-2), isSubclass(?TYPEVAR3,PositiveInteger), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR0,?kind-10), sumo(?TYPEVAR1,?area-3), sumo(?TYPEVAR3,?integer-16), isSubclass(?TYPEVAR2,GeopoliticalArea) ==> {(importCommodityTypeByRank ?area-3 ?kind-10 ?integer-16)}.

compound(partner*,import*), nmod:of(partner*,?agent-10), cop(partner*,is*), nsubj(partner*,?agent-3), case(?agent-10,of*), sumo(?TYPEVAR0,?agent-10), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,Agent) ==> {(importPartner ?agent-10 ?agent-3)}.

case(?number-16,for*), compound(partner*,?area-3), dep(fraction*,?area-11), nmod:by(partner*,fraction*), amod(partner*,?geopolitical-2), case(fraction*,by*), compound(partner*,import*), sumo(?TYPEVAR2,?area-11), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR0,PositiveRealNumber), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR0,?number-16), sumo(?TYPEVAR3,?geopolitical-2) ==> {(importPartnerByFraction ?geopolitical-2 ?area-11 ?number-16)}.

case(?number-18,for*), case(?kind-21,with*), compound(partner*,?area-3), case(period*,in*), nmod:by(partner*,fraction*), dep(period*,?area-13), amod(partner*,?geopolitical-2), compound(partner*,import*), nmod:in(partner*,period*), case(fraction*,by*), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR3,?area-13), isSubclass(?TYPEVAR4,GeopoliticalArea), isSubclass(?TYPEVAR0,PositiveRealNumber), sumo(?TYPEVAR0,?number-18), sumo(?TYPEVAR2,?area-3), sumo(?TYPEVAR1,?kind-21), sumo(?TYPEVAR4,?geopolitical-2) ==> {(importPartnerByFractionInPeriod ?geopolitical-2 ?area-13 ?number-18 ?kind-21)}.

amod(partner*,?geopolitical-2), compound(partner*,?area-3), case(?integer-15,for*), compound(partner*,import*), nmod:by(partner*,rank*), case(rank*,by*), amod(rank*,?area-11), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?area-3), sumo(?TYPEVAR3,?area-11), sumo(?TYPEVAR0,?geopolitical-2), isSubclass(?TYPEVAR2,PositiveInteger), sumo(?TYPEVAR2,?integer-15), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR3,GeopoliticalArea) ==> {(importPartnerByRank ?geopolitical-2 ?area-11 ?integer-15)}.

compound(partner*,import*), case(period*,in*), case(rank*,by*), case(?kind-20,with*), dobj(period*,?area-13), amod(partner*,?geopolitical-2), compound(partner*,?area-3), nmod:in(partner*,period*), case(?integer-17,for*), nmod:by(partner*,rank*), sumo(?TYPEVAR2,?geopolitical-2), isSubclass(?TYPEVAR4,PositiveInteger), sumo(?TYPEVAR4,?integer-17), sumo(?TYPEVAR0,?kind-20), sumo(?TYPEVAR3,?area-3), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR1,?area-13), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR3,GeopoliticalArea), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(importPartnerByRankInPeriod ?area-3 ?area-13 ?integer-17 ?kind-20)}.

compound(partner*,import*), nmod:in(partner*,period*), case(period*,in*), dep(period*,?agent-9), case(?kind-12,for*), compound(partner*,?agent-2), sumo(?TYPEVAR1,?kind-12), isSubclass(?TYPEVAR2,Agent), sumo(?TYPEVAR0,?agent-9), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR2,?agent-2) ==> {(importPartnerInPeriod ?agent-2 ?agent-9 ?kind-12)}.

case(?kind-13,for*), compound(total*,import*), dep(total*,?measure-10), case(period*,in*), amod(total*,?geopolitical-2), compound(total*,?area-3), nmod:in(total*,period*), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR3,?area-3), sumo(?TYPEVAR1,?measure-10), sumo(?TYPEVAR0,?kind-13), sumo(?TYPEVAR2,?geopolitical-2), isSubclass(?TYPEVAR3,GeopoliticalArea), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR0,TimeInterval) ==> {(importTotalInPeriod ?geopolitical-2 ?measure-10 ?kind-13)}.

dep(income*,?measure-6), case(?time-9,for*), amod(income*,?human-2), isSubclass(?TYPEVAR2,Human), sumo(?TYPEVAR2,?human-2), sumo(?TYPEVAR0,?measure-6), isSubclass(?TYPEVAR0,CurrencyMeasure), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR1,?time-9) ==> {(income ?human-2 ?measure-6 ?time-9)}.

cop(distribution*,is*), nsubj(distribution*,?number-4), case(?area-15,of*), compound(distribution*,income*), nmod:by(distribution*,index*), nmod:of(index*,?area-15), case(index*,by*), compound(index*,gini*), sumo(?TYPEVAR0,?number-4), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR1,?area-15), isSubclass(?TYPEVAR0,NonnegativeRealNumber) ==> {(incomeDistributionByGiniIndex ?area-15 ?number-4)}.

nmod:in(distribution*,period*), compound(distribution*,income*), dep(period*,?number-14), nmod:by(distribution*,index*), case(index*,by*), case(period*,in*), case(?kind-17,for*), compound(index*,gini*), amod(distribution*,?geopolitical-2), compound(distribution*,?area-3), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR3,GeopoliticalArea), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR2,?geopolitical-2), sumo(?TYPEVAR0,?number-14), sumo(?TYPEVAR1,?kind-17), isSubclass(?TYPEVAR0,NonnegativeRealNumber), sumo(?TYPEVAR3,?area-3) ==> {(incomeDistributionByGiniIndexInPeriod ?area-3 ?number-14 ?kind-17)}.

amod(income*,?human-2), nmod:for(earned*,?process-11), dobj(earned*,?measure-7), nsubj(earned*,income*), case(?process-11,for*), sumo(?TYPEVAR2,?measure-7), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?process-11), sumo(?TYPEVAR0,?human-2), isSubclass(?TYPEVAR1,OrganizationalProcess), isSubclass(?TYPEVAR2,CurrencyMeasure) ==> {(incomeEarned ?human-2 ?measure-7 ?process-11)}.

nsubj(date*,?interval-5), compound(date*,independence*), acl:relcl(?time-4,date*), cop(date*,is*), case(?area-13,of*), nmod:of(date*,?area-13), sumo(?TYPEVAR2,?area-13), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR1,?time-4), sumo(?TYPEVAR0,?interval-5) ==> {(independenceDate ?area-13 ?interval-5)}.

amod(rate*,industrial*), compound(rate*,growth*), nmod:of(rate*,?area-13), case(?area-13,of*), compound(rate*,production*), nsubj(rate*,?number-3), cop(rate*,is*), sumo(?TYPEVAR0,?area-13), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR1,?number-3) ==> {(industrialProductionGrowthRate ?area-13 ?number-3)}.

case(?kind-15,for*), amod(rate*,industrial*), compound(rate*,?area-3), case(period*,in*), dep(period*,?number-12), amod(rate*,?geopolitical-2), compound(rate*,growth*), compound(rate*,production*), nmod:in(rate*,period*), isSubclass(?TYPEVAR0,TimeInterval), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR0,?kind-15), isSubclass(?TYPEVAR2,RealNumber), sumo(?TYPEVAR1,?area-3), sumo(?TYPEVAR3,?geopolitical-2), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR2,?number-12) ==> {(industrialProductionGrowthRateInPeriod ?geopolitical-2 ?number-12 ?kind-15)}.

cop(industry*,is*), nmod:of(area*,?area-12), case(area*,of*), nmod:of(industry*,area*), nsubj(industry*,?attribute-3), case(?area-12,of*), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?attribute-3), isSubclass(?TYPEVAR1,IndustryAttribute), sumo(?TYPEVAR0,?area-12) ==> {(industryOfArea ?area-12 ?attribute-3)}.

cop(type*,is*), compound(type*,product*), case(?attribute-13,of*), compound(type*,industry*), nmod:of(type*,?attribute-13), nsubj(type*,?kind-2), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,IndustryAttribute), sumo(?TYPEVAR0,?attribute-13), sumo(?TYPEVAR1,?kind-2) ==> {(industryProductType ?attribute-13 ?kind-2)}.

amod(rank*,?geopolitical-2), dep(output*,?attribute-10), compound(rank*,industry*), case(output*,by*), case(?integer-14,for*), nmod:by(rank*,output*), compound(rank*,?area-3), sumo(?TYPEVAR3,?area-3), sumo(?TYPEVAR1,?attribute-10), isSubclass(?TYPEVAR1,IndustryAttribute), isSubclass(?TYPEVAR2,PositiveInteger), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR2,?integer-14), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR0,?geopolitical-2) ==> {(industryRankByOutput ?geopolitical-2 ?attribute-10 ?integer-14)}.

cop(type*,is*), compound(type*,service*), compound(type*,industry*), nmod:of(type*,?attribute-14), case(?attribute-14,of*), nsubj(type*,?kind-2), sumo(?TYPEVAR0,?attribute-14), isSubclass(?TYPEVAR0,IndustryAttribute), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR1,IntentionalProcess) ==> {(industryServiceType ?attribute-14 ?kind-2)}.

cop(rate*,is*), compound(rate*,inflation*), nsubj(rate*,?number-3), nmod:of(rate*,?inflation-10), case(?inflation-10,of*), sumo(?TYPEVAR0,?number-3), sumo(?TYPEVAR1,?inflation-10), isSubclass(?TYPEVAR1,Inflation), isSubclass(?TYPEVAR0,RealNumber) ==> {(inflationRate ?inflation-10 ?number-3)}.

case(prices*,of*), case(?area-14,of*), cop(rate*,is*), compound(prices*,consumer*), nsubj(rate*,?number-3), nmod:of(prices*,?area-14), nmod:of(rate*,prices*), compound(rate*,inflation*), sumo(?TYPEVAR0,?area-14), isSubclass(?TYPEVAR1,RealNumber), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?number-3) ==> {(inflationRateOfConsumerPrices ?area-14 ?number-3)}.

compound(rate*,?area-3), compound(prices*,consumer*), nmod:in(rate*,period*), case(?kind-16,for*), compound(rate*,inflation*), dep(period*,?number-13), amod(rate*,?geopolitical-2), nmod:of(rate*,prices*), case(period*,in*), case(prices*,of*), sumo(?TYPEVAR3,?geopolitical-2), sumo(?TYPEVAR2,?number-13), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR0,?area-3), sumo(?TYPEVAR1,?kind-16), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR2,RealNumber) ==> {(inflationRateOfConsumerPricesInPeriod ?area-3 ?number-13 ?kind-16)}.

nsubj(insured*,?organization-2), cop(insured*,is*), nmod:of(insured*,?proposition-8), case(?proposition-8,of*), sumo(?TYPEVAR1,?proposition-8), sumo(?TYPEVAR0,?organization-2), isSubclass(?TYPEVAR0,Organization), isSubclass(?TYPEVAR1,Proposition) ==> {(insured ?proposition-8 ?organization-2)}.

cop(quotient*,is*), compound(quotient*,intelligence*), nsubj(quotient*,?number-3), case(?human-10,of*), nmod:of(quotient*,?human-10), sumo(?TYPEVAR0,?number-3), sumo(?TYPEVAR1,?human-10), isSubclass(?TYPEVAR1,Human), isSubclass(?TYPEVAR0,RationalNumber) ==> {(intelligenceQuotient ?human-10 ?number-3)}.

compound(interest*,?account-3), case(?time-10,for*), dobj(earned*,?interest-7), amod(interest*,?financial-2), nsubj(earned*,interest*), isSubclass(?TYPEVAR2,Interest), sumo(?TYPEVAR0,?account-3), isSubclass(?TYPEVAR3,FinancialAccount), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR1,?time-10), sumo(?TYPEVAR3,?financial-2), isSubclass(?TYPEVAR0,FinancialAccount), sumo(?TYPEVAR2,?interest-7) ==> {(interestEarned ?financial-2 ?interest-7 ?time-10)}.

dep(period*,?rate-10), case(period*,per*), compound(rate*,?account-3), compound(rate*,interest*), case(?time-13,for*), nmod:per(rate*,period*), amod(rate*,?financial-2), sumo(?TYPEVAR1,?account-3), isSubclass(?TYPEVAR3,FinancialAccount), sumo(?TYPEVAR2,?time-13), isSubclass(?TYPEVAR1,FinancialAccount), sumo(?TYPEVAR3,?financial-2), isSubclass(?TYPEVAR0,InterestRate), sumo(?TYPEVAR0,?rate-10), isSubclass(?TYPEVAR2,TimeInterval) ==> {(interestRatePerPeriod ?financial-2 ?rate-10 ?time-13)}.

nsubj(dispute*,?area-4), cop(dispute*,is*), amod(dispute*,international*), nmod:of(dispute*,?area-12), case(?area-12,of*), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR0,?area-4), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(internationalDispute ?area-12 ?area-4)}.

nsubj(code*,?string-3), nmod:of(code*,?area-12), compound(code*,internet*), compound(code*,country*), cop(code*,is*), case(?area-12,of*), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR0,?string-3) ==> {(internetCountryCode ?area-12 ?string-3)}.

case(money*,in*), nmod:of(money*,?option-11), nsubj(is*,an*), case(?option-11,of*), nmod:in(an*,money*), amod(?position-3,is*), sumo(?TYPEVAR0,?option-11), isSubclass(?TYPEVAR0,Option), sumo(?TYPEVAR1,?position-3), isSubclass(?TYPEVAR1,TimePosition) ==> {(inTheMoney ?option-11 ?position-3)}.

cop(virus*,is*), nmod:of(virus*,?invasion-11), amod(virus*,invading*), case(?invasion-11,of*), nsubj(virus*,?virus-2), sumo(?TYPEVAR1,?virus-2), sumo(?TYPEVAR0,?invasion-11), isSubclass(?TYPEVAR1,Virus), isSubclass(?TYPEVAR0,ViralCellInvasion) ==> {(invadingVirus ?invasion-11 ?virus-2)}.

dep(of*,?the-7), nsubj(inventory*,?collection-2), amod(inventory*,of*), cop(inventory*,is*), isSubclass(?TYPEVAR0,ContentBearingObject), isSubclass(?TYPEVAR1,Collection), sumo(?TYPEVAR0,?the-7), sumo(?TYPEVAR1,?collection-2) ==> {(inventory ?the-7 ?collection-2)}.

nmod:in(involved*,event*), case(?process-10,of*), auxpass(involved*,is*), case(event*,in*), nsubjpass(involved*,?entity-2), nmod:of(event*,?process-10), sumo(?TYPEVAR0,?process-10), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,Process) ==> {(involvedInEvent ?process-10 ?entity-2)}.

nsubj(address*,?address-3), case(?computer-11,of*), cop(address*,is*), amod(address*,ip*), nmod:of(address*,?computer-11), case(?computer-11,of*), sumo(?TYPEVAR0,?address-3), isSubclass(?TYPEVAR1,Computer), isSubclass(?TYPEVAR0,IPAddress), sumo(?TYPEVAR1,?computer-11) ==> {(ipAddressOf ?computer-11 ?address-3)}.

case(?area-12,of*), nmod:of(area*,?area-12), compound(area*,land*), amod(area*,irrigated*), nsubj(area*,?quantity-3), cop(area*,is*), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-12), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR1,ConstantQuantity) ==> {(irrigatedLandArea ?area-12 ?quantity-3)}.

nmod:agent(issued*,?certificate-10), case(?certificate-10,by*), auxpass(issued*,is*), nsubjpass(issued*,?agent-3), case(?certificate-10,of*), sumo(?TYPEVAR0,?certificate-10), isSubclass(?TYPEVAR0,Certificate), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR1,?agent-3) ==> {(issuedBy ?certificate-10 ?agent-3)}.

case(?organization-9,of*), nmod:of(branch*,?organization-9), amod(branch*,judicial*), nsubj(branch*,?agent-2), cop(branch*,is*), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?organization-9), isSubclass(?TYPEVAR1,Agent) ==> {(judicialBranch ?organization-9 ?agent-2)}.

compound(fraction*,labor*), amod(fraction*,?geopolitical-2), compound(fraction*,force*), case(?number-14,for*), case(occupation*,by*), compound(fraction*,?area-3), dep(fraction*,?attribute-10), nmod:by(fraction*,occupation*), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?number-14), isSubclass(?TYPEVAR1,RealNumber), isSubclass(?TYPEVAR3,Attribute), sumo(?TYPEVAR3,?attribute-10), sumo(?TYPEVAR0,?geopolitical-2), sumo(?TYPEVAR2,?area-3) ==> {(laborForceFractionByOccupation ?area-3 ?attribute-10 ?number-14)}.

case(?number-16,for*), case(occupation*,by*), amod(fraction*,?geopolitical-2), case(period*,in*), compound(fraction*,labor*), nmod:by(fraction*,occupation*), case(?kind-19,with*), compound(fraction*,force*), nmod:in(fraction*,period*), compound(fraction*,?area-3), dep(period*,?attribute-12), sumo(?TYPEVAR1,?geopolitical-2), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR3,?area-3), sumo(?TYPEVAR2,?kind-19), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR3,GeopoliticalArea), isSubclass(?TYPEVAR4,Attribute), sumo(?TYPEVAR0,?number-16), isSubclass(?TYPEVAR0,RealNumber), sumo(?TYPEVAR4,?attribute-12) ==> {(laborForceFractionByOccupationInPeriod ?area-3 ?attribute-12 ?number-16 ?kind-19)}.

compound(total*,labor*), nmod:of(total*,?area-13), nsubj(total*,?number-4), case(?area-13,of*), cop(total*,is*), compound(total*,force*), sumo(?TYPEVAR0,?area-13), sumo(?TYPEVAR1,?number-4), isSubclass(?TYPEVAR1,NonnegativeRealNumber), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(laborForceTotal ?area-13 ?number-4)}.

compound(total*,force*), compound(total*,labor*), case(?kind-15,for*), nmod:in(total*,period*), case(period*,in*), dep(period*,?number-12), compound(total*,?area-3), amod(total*,?geopolitical-2), isSubclass(?TYPEVAR3,GeopoliticalArea), isSubclass(?TYPEVAR1,NonnegativeRealNumber), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR3,?geopolitical-2), sumo(?TYPEVAR0,?kind-15), sumo(?TYPEVAR1,?number-12), isSubclass(?TYPEVAR2,GeopoliticalArea) ==> {(laborForceTotalInPeriod ?geopolitical-2 ?number-12 ?kind-15)}.

nmod:of(draft*,?vehicle-11), cop(draft*,is*), amod(draft*,laden*), nsubj(draft*,?measure-3), case(?vehicle-11,of*), sumo(?TYPEVAR0,?vehicle-11), isSubclass(?TYPEVAR1,LengthMeasure), isSubclass(?TYPEVAR0,WaterVehicle), sumo(?TYPEVAR1,?measure-3) ==> {(ladenDraft ?vehicle-11 ?measure-3)}.

nsubj(area*,?measure-3), compound(area*,land*), advmod(?area-12,only*), cop(area*,is*), nmod:of(area*,?area-12), case(?area-12,of*), sumo(?TYPEVAR0,?measure-3), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR1,GeographicArea), isSubclass(?TYPEVAR0,AreaMeasure) ==> {(landAreaOnly ?area-12 ?measure-3)}.

nmod:of(landlord*,?agent-9), cop(landlord*,is*), nsubj(landlord*,?residence-3), case(?agent-9,of*), sumo(?TYPEVAR0,?agent-9), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,PermanentResidence), sumo(?TYPEVAR1,?residence-3) ==> {(landlord ?agent-9 ?residence-3)}.

nsubj(statement*,?statement-3), cop(statement*,is*), nmod:of(statement*,?account-11), case(?account-11,of*), amod(statement*,last*), isSubclass(?TYPEVAR1,FinancialAccount), sumo(?TYPEVAR0,?statement-3), isSubclass(?TYPEVAR0,BankStatement), sumo(?TYPEVAR1,?account-11) ==> {(lastStatement ?account-11 ?statement-3)}.

compound(balance*,statement*), amod(balance*,last*), cop(balance*,is*), case(?account-12,of*), nmod:of(balance*,?account-12), nsubj(balance*,?measure-3), isSubclass(?TYPEVAR0,FinancialAccount), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?account-12), isSubclass(?TYPEVAR1,CurrencyMeasure) ==> {(lastStatementBalance ?account-12 ?measure-3)}.

compound(position*,leader*), nsubj(position*,?position-2), cop(position*,is*), nmod:of(position*,?agent-9), case(?agent-9,of*), sumo(?TYPEVAR0,?position-2), isSubclass(?TYPEVAR0,Position), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR1,?agent-9) ==> {(leaderPosition ?agent-9 ?position-2)}.

amod(guardian*,legal*), case(?human-10,of*), nsubj(guardian*,?human-3), nmod:of(guardian*,?human-10), cop(guardian*,is*), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?human-10), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?human-3) ==> {(legalGuardian ?human-10 ?human-3)}.

cop(type*,is*), case(?area-13,of*), nsubj(type*,?attribute-4), amod(type*,legal*), compound(type*,system*), nmod:of(type*,?area-13), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,LegalSystemAttribute), sumo(?TYPEVAR0,?area-13), sumo(?TYPEVAR1,?attribute-4) ==> {(legalSystemType ?area-13 ?attribute-4)}.

amod(branch*,legislative*), nmod:of(branch*,?organization-9), nsubj(branch*,?agent-2), case(?organization-9,of*), cop(branch*,is*), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?organization-9), isSubclass(?TYPEVAR0,Organization) ==> {(legislativeBranch ?organization-9 ?agent-2)}.

case(railway*,of*), cop(length*,is*), compound(railway*,gauge*), nsubj(length*,?measure-3), nmod:of(railway*,?area-14), amod(railway*,broad*), case(?area-14,of*), nmod:of(length*,railway*), sumo(?TYPEVAR1,?area-14), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR0,?measure-3) ==> {(lengthOfBroadGaugeRailway ?area-14 ?measure-3)}.

cop(length*,is*), amod(pipeline*,crude*), case(?area-14,of*), nsubj(length*,?measure-3), nmod:of(pipeline*,?area-14), nmod:of(length*,pipeline*), case(pipeline*,of*), compound(pipeline*,oil*), sumo(?TYPEVAR0,?area-14), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,LengthMeasure), isSubclass(?TYPEVAR0,GeographicArea) ==> {(lengthOfCrudeOilPipeline ?area-14 ?measure-3)}.

case(railway*,of*), compound(railway*,gauge*), amod(railway*,dual*), nsubj(length*,?measure-3), case(?area-14,of*), cop(length*,is*), nmod:of(railway*,?area-14), nmod:of(length*,railway*), sumo(?TYPEVAR1,?area-14), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR0,?measure-3) ==> {(lengthOfDualGaugeRailway ?area-14 ?measure-3)}.

nmod:of(length*,railway*), case(railway*,of*), cop(length*,is*), nsubj(length*,?measure-3), case(?area-13,of*), nmod:of(railway*,?area-13), amod(railway*,electrified*), sumo(?TYPEVAR0,?measure-3), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR1,?area-13), isSubclass(?TYPEVAR1,GeographicArea) ==> {(lengthOfElectrifiedRailway ?area-13 ?measure-3)}.

nmod:of(length*,system*), case(?area-13,of*), nmod:of(system*,?area-13), compound(system*,expressway*), cop(length*,is*), case(system*,of*), nsubj(length*,?measure-3), sumo(?TYPEVAR0,?area-13), isSubclass(?TYPEVAR0,GeographicArea), isSubclass(?TYPEVAR1,LengthMeasure), sumo(?TYPEVAR1,?measure-3) ==> {(lengthOfExpresswaySystem ?area-13 ?measure-3)}.

compound(railway*,track*), case(railway*,of*), nmod:of(length*,railway*), cop(length*,is*), amod(railway*,multiple*), case(?area-14,of*), nsubj(length*,?measure-3), nmod:of(railway*,?area-14), sumo(?TYPEVAR0,?area-14), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,LengthMeasure) ==> {(lengthOfMultipleTrackRailway ?area-14 ?measure-3)}.

case(?area-14,of*), nsubj(length*,?measure-3), case(railway*,of*), cop(length*,is*), nmod:of(length*,railway*), compound(railway*,gauge*), amod(railway*,narrow*), nmod:of(railway*,?area-14), sumo(?TYPEVAR0,?area-14), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,LengthMeasure) ==> {(lengthOfNarrowGaugeRailway ?area-14 ?measure-3)}.

cop(length*,is*), case(pipeline*,of*), compound(pipeline*,gas*), amod(pipeline*,natural*), nmod:of(length*,pipeline*), nmod:of(pipeline*,?area-14), case(?area-14,of*), nsubj(length*,?measure-3), sumo(?TYPEVAR0,?area-14), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR0,GeographicArea), isSubclass(?TYPEVAR1,LengthMeasure) ==> {(lengthOfNaturalGasPipeline ?area-14 ?measure-3)}.

nsubj(length*,?measure-3), case(highway*,of*), amod(highway*,paved*), nmod:of(length*,highway*), case(?area-13,of*), nmod:of(highway*,?area-13), cop(length*,is*), sumo(?TYPEVAR1,?area-13), isSubclass(?TYPEVAR1,GeographicArea), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR0,?measure-3) ==> {(lengthOfPavedHighway ?area-13 ?measure-3)}.

nsubj(length*,?measure-3), compound(pipeline*,product*), nmod:of(length*,pipeline*), cop(length*,is*), case(pipeline*,of*), nmod:of(pipeline*,?area-14), compound(pipeline*,petroleum*), case(?area-14,of*), isSubclass(?TYPEVAR1,GeographicArea), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR0,?measure-3), sumo(?TYPEVAR1,?area-14) ==> {(lengthOfPetroleumProductPipeline ?area-14 ?measure-3)}.

amod(railway*,standard*), compound(railway*,gauge*), case(?area-14,of*), nsubj(length*,?measure-3), nmod:of(length*,railway*), case(railway*,of*), nmod:of(railway*,?area-14), cop(length*,is*), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-14), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,LengthMeasure) ==> {(lengthOfStandardGaugeRailway ?area-14 ?measure-3)}.

cop(length*,is*), nsubj(length*,?measure-3), amod(railway*,unclassified*), nmod:of(railway*,?area-14), nmod:of(length*,railway*), case(?area-14,of*), compound(railway*,gauge*), case(railway*,of*), sumo(?TYPEVAR0,?measure-3), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR1,?area-14) ==> {(lengthOfUnclassifiedGaugeRailway ?area-14 ?measure-3)}.

case(highway*,of*), nmod:of(length*,highway*), nsubj(length*,?measure-3), amod(highway*,unpaved*), cop(length*,is*), nmod:of(highway*,?area-13), case(?area-13,of*), sumo(?TYPEVAR1,?area-13), sumo(?TYPEVAR0,?measure-3), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR1,GeographicArea) ==> {(lengthOfUnpavedHighway ?area-13 ?measure-3)}.

amod(dose*,lethal*), nsubj(dose*,?quantity-3), cop(dose*,is*), case(?kind-10,of*), nmod:of(dose*,?kind-10), sumo(?TYPEVAR0,?quantity-3), isSubclass(?TYPEVAR1,BiochemicalAgent), isSubclass(?TYPEVAR0,FunctionQuantity), sumo(?TYPEVAR1,?kind-10) ==> {(lethalDose ?kind-10 ?quantity-3)}.

acl(stage*,achieved*), nmod:of(achieved*,?process-12), nsubj(stage*,?attribute-3), case(?process-12,of*), cop(stage*,is*), compound(stage*,life*), sumo(?TYPEVAR1,?attribute-3), isSubclass(?TYPEVAR1,DevelopmentalAttribute), sumo(?TYPEVAR0,?process-12), isSubclass(?TYPEVAR0,BiologicalProcess) ==> {(lifeStageAchieved ?process-12 ?attribute-3)}.

nsubj(price*,?measure-3), cop(price*,is*), case(?order-11,of*), nmod:of(price*,?order-11), compound(price*,limit*), sumo(?TYPEVAR0,?measure-3), isSubclass(?TYPEVAR0,CurrencyMeasure), isSubclass(?TYPEVAR1,LimitOrder), sumo(?TYPEVAR1,?order-11) ==> {(limitPrice ?order-11 ?measure-3)}.

compound(measure*,line*), nsubj(measure*,?measure-3), nmod:of(measure*,?figure-12), cop(measure*,is*), case(?figure-12,of*), sumo(?TYPEVAR0,?measure-3), sumo(?TYPEVAR1,?figure-12), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR1,OneDimensionalFigure) ==> {(lineMeasure ?figure-12 ?measure-3)}.

compound(amount*,fee*), nmod:of(amount*,?loan-11), compound(amount*,loan*), nsubj(amount*,?measure-3), case(?loan-11,of*), cop(amount*,is*), isSubclass(?TYPEVAR0,Loan), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?loan-11) ==> {(loanFeeAmount ?loan-11 ?measure-3)}.

nsubj(loan*,?object-2), case(?loan-10,of*), nmod:of(purchase*,?loan-10), nmod:for(loan*,purchase*), case(purchase*,for*), cop(loan*,is*), sumo(?TYPEVAR1,?loan-10), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Loan) ==> {(loanForPurchase ?loan-10 ?object-2)}.

case(?loan-10,of*), compound(interest*,loan*), cop(interest*,is*), nsubj(interest*,?measure-3), nmod:of(interest*,?loan-10), isSubclass(?TYPEVAR0,Loan), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?loan-10) ==> {(loanInterest ?loan-10 ?measure-3)}.

amod(name*,long*), nmod:of(name*,?string-11), case(?string-11,of*), nsubj(name*,?entity-2), amod(name*,local*), cop(name*,is*), sumo(?TYPEVAR0,?string-11), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR1,Entity) ==> {(localLongName ?string-11 ?entity-2)}.

amod(name*,short*), nmod:of(name*,?string-11), case(?string-11,of*), nsubj(name*,?entity-2), cop(name*,is*), amod(name*,local*), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-11) ==> {(localShortName ?string-11 ?entity-2)}.

case(time*,at*), case(?object-12,for*), nmod:at(located*,time*), dep(time*,?position-8), acl(?object-2,located*), sumo(?TYPEVAR0,?object-12), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,TimePosition), isSubclass(?TYPEVAR2,Object), sumo(?TYPEVAR1,?position-8), sumo(?TYPEVAR2,?object-2) ==> {(locatedAtTime ?object-2 ?position-8 ?object-12)}.

compound(speed*,wind*), compound(speed*,altitude*), amod(speed*,low*), nsubj(speed*,?quantity-3), cop(speed*,is*), nmod:of(speed*,?object-12), case(?object-12,of*), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,PhysicalQuantity), sumo(?TYPEVAR0,?quantity-3), sumo(?TYPEVAR1,?object-12) ==> {(lowAltitudeWindSpeed ?object-12 ?quantity-3)}.

; amod(velocity*,low*), compound(velocity*,wind*), compound(velocity*,altitude*), cop(velocity*,is*), nmod:of(velocity*,?object-12), case(?object-12,of*), nsubj(velocity*,?quantity-3), sumo(?TYPEVAR1,?quantity-3), sumo(?TYPEVAR0,?object-12), isSubclass(?TYPEVAR1,PhysicalQuantity), isSubclass(?TYPEVAR0,Object) ==> {(lowAltitudeWindVelocity ?object-12 ?quantity-3 null)}.

nmod:of(income*,?area-15), nsubj(share*,?number-3), amod(share*,decile*), cop(share*,is*), case(income*,of*), compound(income*,household*), case(?area-15,of*), amod(share*,lowest*), nmod:of(share*,income*), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?area-15), sumo(?TYPEVAR1,?number-3), isSubclass(?TYPEVAR1,RealNumber) ==> {(lowestDecileShareOfHouseholdIncome ?area-15 ?number-3)}.

nmod:of(share*,income*), dep(?area-3,share*), case(?kind-17,for*), dep(period*,?number-14), nmod:in(share*,period*), compound(income*,household*), case(period*,in*), amod(share*,lowest*), case(income*,of*), amod(share*,decile*), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR2,RealNumber), sumo(?TYPEVAR2,?number-14), sumo(?TYPEVAR1,?kind-17), sumo(?TYPEVAR0,?area-3), isSubclass(?TYPEVAR1,TimeInterval) ==> {(lowestDecileShareOfHouseholdIncomeInPeriod ?area-3 ?number-14 ?kind-17)}.

case(period*,for*), dep(?area-3,temperature*), dep(period*,?time-9), case(?measure-14,for*), amod(temperature*,lowest*), nmod:for(temperature*,period*), sumo(?TYPEVAR0,?area-3), sumo(?TYPEVAR2,?measure-14), isSubclass(?TYPEVAR2,TemperatureMeasure), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR1,?time-9), isSubclass(?TYPEVAR0,GeographicArea) ==> {(lowestTemperatureForPeriod ?area-3 ?time-9 ?measure-14)}.

nsubj(tide*,?region-2), amod(tide*,low*), case(?measure-11,for*), dobj(tide*,?time-6), sumo(?TYPEVAR0,?region-2), sumo(?TYPEVAR1,?measure-11), isSubclass(?TYPEVAR1,LengthMeasure), isSubclass(?TYPEVAR0,Region), sumo(?TYPEVAR2,?time-6), isSubclass(?TYPEVAR2,TimeInterval) ==> {(lowTide ?region-2 ?time-6 ?measure-11)}.

case(?attribute-13,for*), amod(variation*,?geographic-2), dep(variation*,?measure-9), compound(variation*,?area-3), amod(variation*,magnetic*), sumo(?TYPEVAR2,?measure-9), isSubclass(?TYPEVAR1,GeographicArea), isSubclass(?TYPEVAR0,DirectionalAttribute), sumo(?TYPEVAR0,?attribute-13), sumo(?TYPEVAR3,?area-3), isSubclass(?TYPEVAR3,GeographicArea), sumo(?TYPEVAR1,?geographic-2), isSubclass(?TYPEVAR2,PlaneAngleMeasure) ==> {(magneticVariation ?geographic-2 ?measure-9 ?attribute-13)}.

case(area*,of*), nmod:of(area*,?region-11), nmod:of(map*,area*), cop(map*,is*), nsubj(map*,?string-3), case(?region-11,of*), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR0,?region-11), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR0,Region) ==> {(mapOfArea ?region-11 ?string-3)}.

compound(amount*,?account-3), compound(amount*,margin*), nmod:for(amount*,?measure-12), compound(amount*,balance*), nmod:tmod(amount*,?day-8), amod(amount*,?financial-2), case(?measure-12,for*), sumo(?TYPEVAR2,?day-8), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR2,Day), sumo(?TYPEVAR0,?account-3), sumo(?TYPEVAR1,?measure-12), sumo(?TYPEVAR3,?financial-2), isSubclass(?TYPEVAR0,FinancialAccount), isSubclass(?TYPEVAR3,FinancialAccount) ==> {(marginBalanceAmount ?financial-2 ?day-8 ?measure-12)}.

cop(inventory*,is*), amod(inventory*,marine*), nsubj(inventory*,?register-3), nmod:of(inventory*,?marine-11), case(?marine-11,of*), sumo(?TYPEVAR1,?marine-11), sumo(?TYPEVAR0,?register-3), isSubclass(?TYPEVAR0,ShipRegister), isSubclass(?TYPEVAR1,MerchantMarine) ==> {(marineInventory ?marine-11 ?register-3)}.

case(?area-15,of*), nmod:of(type*,?area-15), compound(type*,claim*), nsubj(type*,?kind-2), compound(type*,maritime*), cop(type*,is*), sumo(?TYPEVAR0,?area-15), isSubclass(?TYPEVAR1,MaritimeClaimArea), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(maritimeClaimType ?area-15 ?kind-2)}.

nmod:for(amount*,?measure-12), compound(value*,?account-3), compound(value*,market*), case(?measure-12,for*), nsubj(amount*,value*), nmod:tmod(amount*,?day-8), amod(value*,?financial-2), sumo(?TYPEVAR1,?account-3), isSubclass(?TYPEVAR1,FinancialAccount), sumo(?TYPEVAR3,?financial-2), sumo(?TYPEVAR0,?measure-12), isSubclass(?TYPEVAR3,FinancialAccount), isSubclass(?TYPEVAR2,Day), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR2,?day-8) ==> {(marketValueAmount ?financial-2 ?day-8 ?measure-12)}.

nsubj(date*,?day-2), compound(date*,maturity*), cop(date*,is*), case(?account-10,of*), nmod:of(date*,?account-10), isSubclass(?TYPEVAR1,FinancialAccount), sumo(?TYPEVAR1,?account-10), sumo(?TYPEVAR0,?day-2), isSubclass(?TYPEVAR0,Day) ==> {(maturityDate ?account-10 ?day-2)}.

cop(capacity*,is*), amod(capacity*,maximum*), nmod:of(capacity*,?vehicle-11), compound(capacity*,payload*), nsubj(capacity*,?measure-3), case(?vehicle-11,of*), isSubclass(?TYPEVAR1,MassMeasure), isSubclass(?TYPEVAR0,Vehicle), sumo(?TYPEVAR0,?vehicle-11), sumo(?TYPEVAR1,?measure-3) ==> {(maximumPayloadCapacity ?vehicle-11 ?measure-3)}.

nmod:for(width*,?measure-14), dep(?vehicle-2,width*), compound(height*,maximum*), nsubj(width*,height*), dobj(width*,?measure-9), case(?measure-14,for*), compound(height*,payload*), sumo(?TYPEVAR2,?measure-9), sumo(?TYPEVAR1,?vehicle-2), sumo(?TYPEVAR0,?measure-14), isSubclass(?TYPEVAR1,Vehicle), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR2,LengthMeasure) ==> {(maximumPayloadHeightWidth ?vehicle-2 ?measure-9 ?measure-14)}.

nsubj(replications*,?integer-3), nmod:of(replications*,?program-11), cop(replications*,is*), case(?program-11,of*), compound(replications*,maximum*), sumo(?TYPEVAR1,?program-11), isSubclass(?TYPEVAR0,PositiveInteger), isSubclass(?TYPEVAR1,ComputerProgram), sumo(?TYPEVAR0,?integer-3) ==> {(maximumReplications ?program-11 ?integer-3)}.

amod(level*,mean*), cop(level*,is*), case(?area-12,of*), compound(level*,sea*), nmod:of(level*,?area-12), nsubj(level*,?measure-3), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,LengthMeasure), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-12) ==> {(meanSeaLevel ?area-12 ?measure-3)}.

case(?device-11,of*), acl(measurement*,reading*), cop(measurement*,is*), nsubj(measurement*,?quantity-3), nmod:of(reading*,?device-11), sumo(?TYPEVAR0,?device-11), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR0,MeasuringDevice), isSubclass(?TYPEVAR1,ConstantQuantity) ==> {(measurementReading ?device-11 ?quantity-3)}.

amod(patient*,medical*), nsubj(patient*,?organization-3), cop(patient*,is*), case(?human-10,of*), nmod:of(patient*,?human-10), isSubclass(?TYPEVAR0,CareOrganization), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?organization-3), sumo(?TYPEVAR1,?human-10) ==> {(medicalPatient ?human-10 ?organization-3)}.

compound(speed*,wind*), nmod:of(speed*,?object-12), case(?object-12,of*), cop(speed*,is*), compound(speed*,altitude*), amod(speed*,medium*), nsubj(speed*,?quantity-3), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR1,ConstantQuantity), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-12) ==> {(mediumAltitudeWindSpeed ?object-12 ?quantity-3)}.

; case(?object-12,of*), amod(velocity*,medium*), nsubj(velocity*,?quantity-3), cop(velocity*,is*), compound(velocity*,altitude*), compound(velocity*,wind*), nmod:of(velocity*,?object-12), isSubclass(?TYPEVAR1,PhysicalQuantity), sumo(?TYPEVAR0,?object-12), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?quantity-3) ==> {(mediumAltitudeWindVelocity ?object-12 ?quantity-3 null)}.

nmod:of(point*,?kind-10), cop(point*,is*), nsubj(point*,?measure-3), amod(point*,melting*), case(?kind-10,of*), sumo(?TYPEVAR0,?kind-10), isSubclass(?TYPEVAR0,PureSubstance), isSubclass(?TYPEVAR1,TemperatureMeasure), sumo(?TYPEVAR1,?measure-3) ==> {(meltingPoint ?kind-10 ?measure-3)}.

nmod:of(count*,?collection-9), case(?collection-9,of*), cop(count*,is*), compound(count*,member*), nsubj(count*,?integer-2), sumo(?TYPEVAR0,?collection-9), sumo(?TYPEVAR1,?integer-2), isSubclass(?TYPEVAR1,Integer), isSubclass(?TYPEVAR0,Collection) ==> {(memberCount ?collection-9 ?integer-2)}.

nsubj(type*,?class-4), cop(type*,is*), nmod:of(type*,?collection-11), compound(type*,member*), nsubj(type*,?set-2), case(?collection-11,of*), isSubclass(?TYPEVAR0,SetOrClass), isSubclass(?TYPEVAR2,SetOrClass), sumo(?TYPEVAR0,?class-4), sumo(?TYPEVAR1,?collection-11), sumo(?TYPEVAR2,?set-2), isSubclass(?TYPEVAR1,Collection) ==> {(memberType ?collection-11 ?set-2)}.

compound(count*,member*), compound(count*,type*), compound(count*,?collection-2), dep(count*,?class-9), case(?integer-13,for*), dep(count*,?set-7), sumo(?TYPEVAR1,?class-9), sumo(?TYPEVAR3,?set-7), sumo(?TYPEVAR0,?collection-2), isSubclass(?TYPEVAR3,SetOrClass), isSubclass(?TYPEVAR2,NonnegativeInteger), sumo(?TYPEVAR2,?integer-13), isSubclass(?TYPEVAR1,SetOrClass), isSubclass(?TYPEVAR0,Collection) ==> {(memberTypeCount ?collection-2 ?set-7 ?integer-13)}.

case(?string-10,of*), cop(name*,is*), nsubj(name*,?human-2), amod(name*,middle*), nmod:of(name*,?string-10), sumo(?TYPEVAR1,?human-2), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?string-10) ==> {(middleName ?string-10 ?human-2)}.

nmod:of(age*,?area-11), acl:relcl(?time-2,age*), amod(age*,military*), case(?area-11,of*), nsubj(age*,?duration-3), cop(age*,is*), isSubclass(?TYPEVAR1,TimeDuration), isSubclass(?TYPEVAR2,TimeDuration), sumo(?TYPEVAR0,?area-11), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR2,?duration-3), sumo(?TYPEVAR1,?time-2) ==> {(militaryAge ?area-11 ?time-2)}.

compound(p*,expenditures*), compound(p*,fraction*), compound(p*,ofGD*), amod(p*,military*), cop(p*,is*), nmod:of(p*,?area-14), case(?area-14,of*), nsubj(p*,?number-3), sumo(?TYPEVAR1,?number-3), sumo(?TYPEVAR0,?area-14), isSubclass(?TYPEVAR1,RationalNumber), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(militaryExpendituresFractionOfGDP ?area-14 ?number-3)}.

amod(ofGDP*,military*), compound(ofGDP*,expenditures*), amod(ofGDP*,?geopolitical-2), dobj(period*,?number-12), case(?time-15,for*), compound(ofGDP*,?area-3), nmod:in(ofGDP*,period*), case(period*,in*), compound(ofGDP*,fraction*), isSubclass(?TYPEVAR1,RationalNumber), sumo(?TYPEVAR0,?geopolitical-2), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR1,?number-12), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR2,?time-15), sumo(?TYPEVAR3,?area-3), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(militaryExpendituresFractionOfGDPInPeriod ?area-3 ?number-12 ?time-15)}.

amod(expenditures*,military*), nmod:of(dollars*,?area-13), case(?area-13,of*), nsubj(expenditures*,?measure-3), cop(expenditures*,is*), compound(dollars*,inUS*), dobj(expenditures*,dollars*), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?area-13) ==> {(militaryExpendituresInUSDollars ?area-13 ?measure-3)}.

case(period*,in*), dobj(dollars*,?measure-12), nmod:in(dollars*,period*), case(?time-15,for*), compound(expenditures*,?area-3), compound(dollars*,inUS*), amod(expenditures*,?geopolitical-2), amod(expenditures*,military*), nsubj(dollars*,expenditures*), sumo(?TYPEVAR2,?area-3), sumo(?TYPEVAR3,?geopolitical-2), isSubclass(?TYPEVAR3,GeopoliticalArea), sumo(?TYPEVAR0,?measure-12), sumo(?TYPEVAR1,?time-15), isSubclass(?TYPEVAR0,CurrencyMeasure), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR1,TimeInterval) ==> {(militaryExpendituresInUSDollarsInPeriod ?geopolitical-2 ?measure-12 ?time-15)}.

nsubj(military*,?area-3), case(?organization-12,of*), nmod:of(area*,?organization-12), nmod:of(military*,area*), case(area*,of*), cop(military*,is*), sumo(?TYPEVAR0,?area-3), sumo(?TYPEVAR1,?organization-12), isSubclass(?TYPEVAR1,MilitaryOrganization), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(militaryOfArea ?organization-12 ?area-3)}.

case(?measure-14,for*), compound(balance*,?account-3), compound(balance*,minimum*), amod(balance*,?financial-2), dep(balance*,?kind-7), sumo(?TYPEVAR0,?measure-14), sumo(?TYPEVAR2,?financial-2), isSubclass(?TYPEVAR2,FinancialAccount), sumo(?TYPEVAR3,?kind-7), isSubclass(?TYPEVAR3,FinancialTransaction), sumo(?TYPEVAR1,?account-3), isSubclass(?TYPEVAR0,CurrencyMeasure), isSubclass(?TYPEVAR1,FinancialAccount) ==> {(minimumBalance ?account-3 ?kind-7 ?measure-14)}.

case(?time-11,for*), compound(payment*,?liability-2), amod(payment*,minimum*), compound(payment*,?account-3), nsubj(?measure-8,payment*), isSubclass(?TYPEVAR1,LiabilityAccount), isSubclass(?TYPEVAR0,TimeDuration), sumo(?TYPEVAR3,?measure-8), sumo(?TYPEVAR2,?account-3), sumo(?TYPEVAR0,?time-11), isSubclass(?TYPEVAR3,CurrencyMeasure), isSubclass(?TYPEVAR2,LiabilityAccount), sumo(?TYPEVAR1,?liability-2) ==> {(minimumPayment ?liability-2 ?measure-8 ?time-11)}.

nsubj(replications*,?integer-3), amod(replications*,minimum*), cop(replications*,is*), case(?program-11,of*), nmod:of(replications*,?program-11), isSubclass(?TYPEVAR1,ComputerProgram), sumo(?TYPEVAR0,?integer-3), sumo(?TYPEVAR1,?program-11), isSubclass(?TYPEVAR0,PositiveInteger) ==> {(minimumReplications ?program-11 ?integer-3)}.

advmod(wage*,?human-6), amod(wage*,monetary*), case(?measure-14,with*), dep(?organization-2,wage*), case(?time-9,for*), sumo(?TYPEVAR0,?human-6), isSubclass(?TYPEVAR0,Human), isSubclass(?TYPEVAR3,TimeDuration), sumo(?TYPEVAR1,?measure-14), isSubclass(?TYPEVAR2,Organization), sumo(?TYPEVAR2,?organization-2), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR3,?time-9) ==> {(monetaryWage ?organization-2 ?human-6 ?time-9 ?measure-14)}.

nmod:of(data*,?position-12), compound(data*,monitor*), nsubj(data*,?program-3), cop(data*,is*), case(?position-12,of*), compound(data*,application*), sumo(?TYPEVAR0,?position-12), sumo(?TYPEVAR1,?program-3), isSubclass(?TYPEVAR1,ComputerProgram), isSubclass(?TYPEVAR0,TimePosition) ==> {(monitorApplicationData ?position-12 ?program-3)}.

compound(data*,monitor*), case(?number-13,for*), compound(data*,component*), compound(data*,?position-3), dep(data*,?string-9), compound(data*,?time-2), isSubclass(?TYPEVAR2,SymbolicString), isSubclass(?TYPEVAR3,TimePosition), sumo(?TYPEVAR3,?time-2), isSubclass(?TYPEVAR0,RealNumber), isSubclass(?TYPEVAR1,TimePosition), sumo(?TYPEVAR1,?position-3), sumo(?TYPEVAR2,?string-9), sumo(?TYPEVAR0,?number-13) ==> {(monitorComponentData ?position-3 ?string-9 ?number-13)}.

case(?integer-10,of*), amod(factor*,multiplicative*), nmod:of(factor*,?integer-10), nsubj(factor*,?integer-3), cop(factor*,is*), isSubclass(?TYPEVAR1,Integer), sumo(?TYPEVAR0,?integer-10), sumo(?TYPEVAR1,?integer-3), isSubclass(?TYPEVAR0,Integer) ==> {(multiplicativeFactor ?integer-10 ?integer-3)}.

nsubj(acquaintance*,?human-3), nmod:of(acquaintance*,?human-10), cop(acquaintance*,is*), amod(acquaintance*,mutual*), case(?human-10,of*), sumo(?TYPEVAR1,?human-10), isSubclass(?TYPEVAR0,Human), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?human-3) ==> {(mutualAcquaintance ?human-10 ?human-3)}.

nsubj(stranger*,?human-3), case(?human-10,of*), amod(stranger*,mutual*), nmod:of(stranger*,?human-10), cop(stranger*,is*), sumo(?TYPEVAR1,?human-10), isSubclass(?TYPEVAR0,Human), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?human-3) ==> {(mutualStranger ?human-10 ?human-3)}.

nsubj(celebration*,?kind-2), nmod:of(celebration*,?area-12), case(?area-12,of*), cop(celebration*,is*), amod(celebration*,national*), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR0,Holiday), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(nationalCelebration ?area-12 ?kind-2)}.

cop(holiday*,is*), nmod:of(holiday*,?area-12), case(?area-12,of*), nsubj(holiday*,?kind-2), amod(holiday*,national*), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,Holiday), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?area-12) ==> {(nationalHoliday ?area-12 ?kind-2)}.

nmod:of(area*,?area-15), amod(type*,natural*), compound(type*,hazard*), case(?area-15,of*), cop(type*,is*), case(area*,in*), nsubj(type*,?kind-2), nmod:in(type*,area*), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR0,?area-15) ==> {(naturalHazardTypeInArea ?area-15 ?kind-2)}.

case(?area-15,of*), compound(type*,resource*), cop(type*,is*), nsubj(type*,?kind-2), nmod:of(area*,?area-15), case(area*,in*), nmod:in(type*,area*), amod(type*,natural*), sumo(?TYPEVAR0,?area-15), isSubclass(?TYPEVAR0,GeographicArea), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-2) ==> {(naturalResourceTypeInArea ?area-15 ?kind-2)}.

nmod:for(navigable*,draft*), nmod:of(draft*,?area-12), case(?area-12,of*), case(draft*,for*), cop(navigable*,is*), nsubj(navigable*,?measure-3), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR0,WaterArea), isSubclass(?TYPEVAR1,LengthMeasure), sumo(?TYPEVAR1,?measure-3) ==> {(navigableForDraft ?area-12 ?measure-3)}.

case(tonnage*,for*), nsubj(navigable*,?quantity-3), cop(navigable*,is*), nmod:of(tonnage*,?area-13), case(?area-13,of*), nmod:for(navigable*,tonnage*), compound(tonnage*,shipping*), sumo(?TYPEVAR1,?area-13), sumo(?TYPEVAR0,?quantity-3), isSubclass(?TYPEVAR0,PhysicalQuantity), isSubclass(?TYPEVAR1,WaterArea) ==> {(navigableForShippingTonnage ?area-13 ?quantity-3)}.

nsubj(neighbor*,?human-3), nmod:of(neighbor*,?human-9), cop(neighbor*,is*), case(?human-9,of*), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?human-9), sumo(?TYPEVAR0,?human-3), isSubclass(?TYPEVAR1,Human) ==> {(neighbor ?human-9 ?human-3)}.

case(?investment-10,of*), nmod:of(amount*,?investment-10), cop(amount*,is*), nsubj(amount*,?measure-3), amod(amount*,net*), sumo(?TYPEVAR0,?investment-10), isSubclass(?TYPEVAR0,Investment), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-3) ==> {(netAmount ?investment-10 ?measure-3)}.

dobj(worth*,?measure-8), amod(net*,?cognitive-2), compound(net*,?agent-3), acl(net*,worth*), case(?day-11,for*), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR3,?day-11), sumo(?TYPEVAR0,?measure-8), sumo(?TYPEVAR1,?cognitive-2), isSubclass(?TYPEVAR3,Day), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR2,?agent-3), isSubclass(?TYPEVAR2,CognitiveAgent) ==> {(netWorth ?agent-3 ?measure-8 ?day-11)}.

nmod:of(us*,?computer-11), dobj(number*,us*), cop(number*,is*), case(?computer-11,of*), nsubj(number*,?integer-3), compound(us*,ofCP*), sumo(?TYPEVAR0,?computer-11), isSubclass(?TYPEVAR0,Computer), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR1,?integer-3) ==> {(numberOfCPUs ?computer-11 ?integer-3)}.

compound(object*,?object-2), dobj(coordinates*,?latitude-7), nmod:for(coordinates*,?longitude-10), case(?longitude-10,for*), nsubj(coordinates*,object*), amod(object*,geographic*), isSubclass(?TYPEVAR1,Latitude), sumo(?TYPEVAR2,?longitude-10), sumo(?TYPEVAR1,?latitude-7), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR2,Longitude) ==> {(objectGeographicCoordinates ?object-2 ?latitude-7 ?longitude-10)}.

case(time*,at*), case(?position-13,for*), dep(place*,?agent-9), case(?object-17,with*), nmod:in(time*,place*), nmod:at(observed*,time*), acl(?object-2,observed*), case(place*,in*), isSubclass(?TYPEVAR0,TimePosition), isSubclass(?TYPEVAR2,Object), sumo(?TYPEVAR1,?agent-9), isSubclass(?TYPEVAR3,Object), sumo(?TYPEVAR0,?position-13), sumo(?TYPEVAR2,?object-17), sumo(?TYPEVAR3,?object-2), isSubclass(?TYPEVAR1,Agent) ==> {(observedAtTimeInPlace ?object-2 ?agent-9 ?position-13 ?object-17)}.

nsubj(occupation*,?transaction-3), cop(occupation*,is*), case(?human-9,of*), nmod:of(occupation*,?human-9), sumo(?TYPEVAR1,?human-9), sumo(?TYPEVAR0,?transaction-3), isSubclass(?TYPEVAR0,FinancialTransaction), isSubclass(?TYPEVAR1,Human) ==> {(occupation ?human-9 ?transaction-3)}.

cop(older*,is*), nsubj(older*,?object-3), nmod:of(older*,?object-9), case(?object-9,of*), sumo(?TYPEVAR0,?object-3), sumo(?TYPEVAR1,?object-9), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Object) ==> {(older ?object-9 ?object-3)}.

cop(operator*,is*), nmod:of(operator*,?object-8), case(?object-8,of*), nsubj(operator*,?agent-2), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?object-8) ==> {(operator ?object-8 ?agent-2)}.

nsubj(direction*,?attribute-4), nmod:of(direction*,?attribute-12), case(?attribute-12,of*), amod(direction*,opposite*), cop(direction*,is*), isSubclass(?TYPEVAR1,PositionalAttribute), sumo(?TYPEVAR1,?attribute-12), isSubclass(?TYPEVAR0,PositionalAttribute), sumo(?TYPEVAR0,?attribute-4) ==> {(oppositeDirection ?attribute-12 ?attribute-4)}.

nsubj(orbits*,?body-3), cop(orbits*,is*), case(?object-9,of*), nmod:of(orbits*,?object-9), sumo(?TYPEVAR1,?object-9), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,AstronomicalBody), sumo(?TYPEVAR0,?body-3) ==> {(orbits ?object-9 ?body-3)}.

nmod:for(order*,?security-13), case(?security-13,for*), case(?kind-7,for*), amod(order*,?financial-2), compound(order*,?transaction-3), nmod:for(order*,?kind-7), isSubclass(?TYPEVAR1,FinancialTransaction), isSubclass(?TYPEVAR3,FinancialTransaction), sumo(?TYPEVAR3,?transaction-3), isSubclass(?TYPEVAR2,FinancialTransaction), sumo(?TYPEVAR0,?security-13), sumo(?TYPEVAR1,?kind-7), sumo(?TYPEVAR2,?financial-2), isSubclass(?TYPEVAR0,Security) ==> {(orderFor ?financial-2 ?kind-7 ?security-13)}.

cop(objective*,is*), nsubj(objective*,?area-2), case(?agent-11,of*), nmod:of(objective*,?agent-11), amod(objective*,organizational*), isSubclass(?TYPEVAR0,AreaOfConcern), sumo(?TYPEVAR1,?agent-11), sumo(?TYPEVAR0,?area-2), isSubclass(?TYPEVAR1,Agent) ==> {(organizationalObjective ?agent-11 ?area-2)}.

case(?organization-12,of*), cop(type*,is*), compound(type*,product*), nmod:of(type*,?organization-12), compound(type*,organization*), nsubj(type*,?kind-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR0,?organization-12) ==> {(organizationProductType ?organization-12 ?kind-2)}.

nmod:of(type*,?organization-13), cop(type*,is*), nsubj(type*,?kind-2), compound(type*,organization*), case(?organization-13,of*), compound(type*,service*), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?organization-13), isSubclass(?TYPEVAR1,IntentionalProcess) ==> {(organizationServiceType ?organization-13 ?kind-2)}.

cop(balance*,is*), case(?account-11,of*), amod(balance*,original*), nmod:of(balance*,?account-11), nsubj(balance*,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?account-11), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR0,FinancialAccount) ==> {(originalBalance ?account-11 ?measure-3)}.

nmod:of(area*,?area-13), case(?area-13,of*), cop(area*,is*), compound(area*,use*), amod(area*,other*), nsubj(area*,?quantity-3), compound(area*,land*), sumo(?TYPEVAR1,?quantity-3), sumo(?TYPEVAR0,?area-13), isSubclass(?TYPEVAR1,ConstantQuantity), isSubclass(?TYPEVAR0,GeographicArea) ==> {(otherLandUseArea ?area-13 ?quantity-3)}.

nmod:out_of(an*,money*), amod(?position-3,is*), nsubj(is*,an*), case(money*,out*), nmod:of(money*,?option-12), case(?option-12,of*), mwe(out*,of*), isSubclass(?TYPEVAR0,TimePosition), sumo(?TYPEVAR1,?option-12), isSubclass(?TYPEVAR1,Option), sumo(?TYPEVAR0,?position-3) ==> {(outOfTheMoney ?option-12 ?position-3)}.

; case(period*,in*), case(?area-13,of*), cop(days*,is*), nmod:in(days*,period*), nmod:of(period*,?area-13), acl:relcl(?time-2,days*), amod(days*,overcast*), nsubj(days*,?duration-3), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR2,?duration-3), isSubclass(?TYPEVAR1,TimeDuration), isSubclass(?TYPEVAR2,TimeDuration), sumo(?TYPEVAR0,?area-13), sumo(?TYPEVAR1,?time-2) ==> {(overcastDaysInPeriod ?area-13 ?time-2 null)}.

case(?day-10,for*), amod(overdraft*,?financial-2), compound(overdraft*,?account-3), dep(overdraft*,?measure-7), sumo(?TYPEVAR1,?financial-2), sumo(?TYPEVAR2,?account-3), sumo(?TYPEVAR3,?measure-7), isSubclass(?TYPEVAR1,FinancialAccount), isSubclass(?TYPEVAR3,CurrencyMeasure), isSubclass(?TYPEVAR0,Day), sumo(?TYPEVAR0,?day-10), isSubclass(?TYPEVAR2,FinancialAccount) ==> {(overdraft ?account-3 ?measure-7 ?day-10)}.

case(?figure-13,of*), nmod:of(parallel*,?figure-13), cop(parallel*,is*), nsubj(parallel*,?figure-5), sumo(?TYPEVAR1,?figure-5), isSubclass(?TYPEVAR1,OneDimensionalFigure), sumo(?TYPEVAR0,?figure-13), isSubclass(?TYPEVAR0,OneDimensionalFigure) ==> {(parallel ?figure-13 ?figure-5)}.

cop(parasite*,is*), nmod:of(parasite*,?organism-9), nsubj(parasite*,?organism-3), case(?organism-9,of*), sumo(?TYPEVAR0,?organism-9), sumo(?TYPEVAR1,?organism-3), isSubclass(?TYPEVAR0,Organism), isSubclass(?TYPEVAR1,Organism) ==> {(parasite ?organism-9 ?organism-3)}.

cop(party*,is*), nmod:to(party*,agreement*), nsubj(party*,?agreement-2), nmod:of(agreement*,?agent-11), case(?agent-11,of*), case(agreement*,to*), isSubclass(?TYPEVAR0,Agreement), sumo(?TYPEVAR1,?agent-11), sumo(?TYPEVAR0,?agreement-2), isSubclass(?TYPEVAR1,CognitiveAgent) ==> {(partyToAgreement ?agent-11 ?agreement-2)}.

nmod:between(?agreement,?E1), isChildOf(?agreement,Agreement), isChildOf(?E1,Agent) ==> {(partyToAgreement ?E1 ?agreement)}.

compound(number*,max*), compound(number*,capacity*), case(?device-12,of*), cop(number*,is*), nmod:of(number*,?device-12), nsubj(number*,?number-2), compound(number*,passenger*), sumo(?TYPEVAR1,?number-2), isSubclass(?TYPEVAR1,Number), sumo(?TYPEVAR0,?device-12), isSubclass(?TYPEVAR0,TransportationDevice) ==> {(passengerCapacityMaxNumber ?device-12 ?number-2)}.

case(?transitway-11,of*), nmod:in(path*,system*), case(system*,in*), nsubj(path*,?system-3), nmod:of(system*,?transitway-11), cop(path*,is*), sumo(?TYPEVAR0,?transitway-11), isSubclass(?TYPEVAR1,TransitSystem), sumo(?TYPEVAR1,?system-3), isSubclass(?TYPEVAR0,Transitway) ==> {(pathInSystem ?transitway-11 ?system-3)}.

nsubj(patient*,?agent-3), amod(patient*,medical*), nmod:of(medical*,?human-10), cop(patient*,is*), case(?human-10,of*), sumo(?TYPEVAR0,?agent-3), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR1,?human-10), isSubclass(?TYPEVAR0,CognitiveAgent) ==> {(patientMedical ?human-10 ?agent-3)}.

dobj(period*,?measure-9), nmod:per(payments*,period*), case(period*,per*), compound(payments*,?account-3), case(?time-12,for*), amod(payments*,?financial-2), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR1,FinancialAccount), sumo(?TYPEVAR1,?account-3), sumo(?TYPEVAR0,?measure-9), sumo(?TYPEVAR2,?time-12), isSubclass(?TYPEVAR3,FinancialAccount), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR3,?financial-2) ==> {(paymentsPerPeriod ?financial-2 ?measure-9 ?time-12)}.

cop(p*,is*), nsubj(p*,?measure-3), amod(p*,per*), compound(p*,capitaGD*), case(?area-12,of*), nmod:of(p*,?area-12), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR0,?measure-3), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(perCapitaGDP ?area-12 ?measure-3)}.

nmod:in(?area-3,period*), case(capitaGDP*,per*), dep(period*,?measure-10), case(?kind-13,for*), nmod:per(?area-3,capitaGDP*), case(period*,in*), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR2,?kind-13), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR1,?measure-10), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?area-3) ==> {(perCapitaGDPInPeriod ?area-3 ?measure-10 ?kind-13)}.

amod(performance*,?measuring-2), nsubj(result*,performance*), compound(performance*,?performance-3), dobj(result*,?component-8), case(?number-12,for*), isSubclass(?TYPEVAR0,MeasuringPerformance), isSubclass(?TYPEVAR1,MeasuringPerformance), sumo(?TYPEVAR2,?component-8), isSubclass(?TYPEVAR2,ComputerComponent), sumo(?TYPEVAR3,?number-12), sumo(?TYPEVAR0,?measuring-2), sumo(?TYPEVAR1,?performance-3), isSubclass(?TYPEVAR3,RealNumber) ==> {(performanceResult ?performance-3 ?component-8 ?number-12)}.

amod(payment*,periodic*), dep(payment*,?measure-8), case(?time-11,for*), dep(?account-3,payment*), sumo(?TYPEVAR1,?time-11), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR0,?measure-8), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR2,?account-3), isSubclass(?TYPEVAR2,FinancialAccount) ==> {(periodicPayment ?account-3 ?measure-8 ?time-11)}.

amod(area*,permanent*), compound(area*,crop*), case(?area-13,of*), compound(area*,land*), nsubj(area*,?quantity-3), cop(area*,is*), nmod:of(area*,?area-13), isSubclass(?TYPEVAR1,ConstantQuantity), sumo(?TYPEVAR0,?area-13), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?quantity-3) ==> {(permanentCropLandArea ?area-13 ?quantity-3)}.

nmod:of(capability*,?vehicle-12), compound(capability*,transport*), compound(capability*,person*), nsubj(capability*,?integer-3), case(?vehicle-12,of*), cop(capability*,is*), isSubclass(?TYPEVAR0,PassengerVehicle), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR0,?vehicle-12), sumo(?TYPEVAR1,?integer-3) ==> {(personTransportCapability ?vehicle-12 ?integer-3)}.

compound(number*,phone*), case(?string-10,of*), nsubj(number*,?telephone-2), nmod:of(number*,?string-10), cop(number*,is*), sumo(?TYPEVAR0,?string-10), sumo(?TYPEVAR1,?telephone-2), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,Telephone) ==> {(phoneNumber ?string-10 ?telephone-2)}.

cop(pin*,is*), case(?string-10,of*), nsubj(pin*,?card-3), nmod:of(pin*,?string-10), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?card-3), sumo(?TYPEVAR0,?string-10), isSubclass(?TYPEVAR1,BankCard) ==> {(pin ?string-10 ?card-3)}.

nmod:in(plays*,event*), dobj(plays*,role*), case(event*,in*), dobj(event*,?role-9), case(?process-12,for*), nsubj(plays*,?object-2), isSubclass(?TYPEVAR1,Process), isSubclass(?TYPEVAR2,Object), sumo(?TYPEVAR1,?process-12), isSubclass(?TYPEVAR0,CaseRole), sumo(?TYPEVAR2,?object-2), sumo(?TYPEVAR0,?role-9) ==> {(playsRoleInEvent ?object-2 ?role-9 ?process-12)}.

; case(?position-20,with*), nmod:in(plays*,event*), dobj(plays*,role*), case(event*,in*), dep(event*,?role-11), nmod:of(event*,type*), case(?kind-14,for*), nsubj(plays*,?object-2), case(type*,of*), cc(?kind-14,and*), sumo(?TYPEVAR0,?position-20), isSubclass(?TYPEVAR1,CaseRole), isSubclass(?TYPEVAR2,Process), isSubclass(?TYPEVAR3,Object), sumo(?TYPEVAR2,?kind-14), sumo(?TYPEVAR3,?object-2), isSubclass(?TYPEVAR0,TimePosition), sumo(?TYPEVAR1,?role-11) ==> {(playsRoleInEventOfType ?object-2 ?role-11 ?kind-14 ?position-20 null)}.

compound(point*,?figure-4), case(intersection*,of*), case(?point-16,for*), dep(point*,?figure-12), nummod(point*,?one-2), amod(point*,?dimensional-3), nmod:of(point*,intersection*), isSubclass(?TYPEVAR3,OneDimensionalFigure), isSubclass(?TYPEVAR4,OneDimensionalFigure), isSubclass(?TYPEVAR0,OneDimensionalFigure), isSubclass(?TYPEVAR1,GeometricPoint), isSubclass(?TYPEVAR2,OneDimensionalFigure), sumo(?TYPEVAR3,?one-2), sumo(?TYPEVAR0,?figure-4), sumo(?TYPEVAR1,?point-16), sumo(?TYPEVAR2,?figure-12), sumo(?TYPEVAR4,?dimensional-3) ==> {(pointOfIntersection ?dimensional-3 ?figure-12 ?point-16)}.

nsubj(party*,?area-3), nmod:of(country*,?party-13), amod(party*,political*), cop(party*,is*), case(country*,of*), nmod:of(party*,country*), case(?party-13,of*), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?party-13), isSubclass(?TYPEVAR1,PoliticalParty), sumo(?TYPEVAR0,?area-3) ==> {(politicalPartyOfCountry ?party-13 ?area-3)}.

nmod:of(line*,?area-14), compound(fraction*,population*), case(?area-14,of*), case(line*,below*), cop(fraction*,is*), compound(line*,poverty*), nsubj(fraction*,?number-3), nmod:below(fraction*,line*), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR0,?area-14), sumo(?TYPEVAR1,?number-3), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(populationFractionBelowPovertyLine ?area-14 ?number-3)}.

case(?kind-16,for*), compound(fraction*,population*), amod(fraction*,?geopolitical-2), case(line*,below*), compound(fraction*,?area-3), nmod:below(fraction*,line*), nmod:in(fraction*,period*), compound(line*,poverty*), dep(period*,?number-13), case(period*,in*), isSubclass(?TYPEVAR2,GeopoliticalArea), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR3,?number-13), sumo(?TYPEVAR0,?kind-16), sumo(?TYPEVAR2,?area-3), sumo(?TYPEVAR1,?geopolitical-2), isSubclass(?TYPEVAR3,RealNumber), isSubclass(?TYPEVAR0,TimeInterval) ==> {(populationFractionBelowPovertyLineInPeriod ?geopolitical-2 ?number-13 ?kind-16)}.

cop(number*,is*), amod(number*,port*), nmod:of(number*,?program-11), case(?program-11,of*), nsubj(number*,?integer-3), sumo(?TYPEVAR0,?program-11), sumo(?TYPEVAR1,?integer-3), isSubclass(?TYPEVAR1,PositiveInteger), isSubclass(?TYPEVAR0,ComputerProgram) ==> {(portNumber ?program-11 ?integer-3)}.

dep(loss*,?investment-7), amod(loss*,potential*), compound(loss*,?agent-3), case(?measure-11,for*), amod(loss*,?cognitive-2), sumo(?TYPEVAR2,?measure-11), isSubclass(?TYPEVAR2,CurrencyMeasure), sumo(?TYPEVAR0,?investment-7), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR3,CognitiveAgent), isSubclass(?TYPEVAR0,Investment), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR3,?cognitive-2) ==> {(potentialLoss ?cognitive-2 ?investment-7 ?measure-11)}.

nmod:of(hydrogen*,?solution-11), cop(potential*,is*), case(?solution-11,of*), case(hydrogen*,of*), nsubj(potential*,?number-3), nmod:of(potential*,hydrogen*), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR0,?solution-11), isSubclass(?TYPEVAR0,Solution), sumo(?TYPEVAR1,?number-3) ==> {(potentialOfHydrogen ?solution-11 ?number-3)}.

compound(component*,power*), nsubj(component*,?kind-2), cop(component*,is*), case(?object-12,of*), nmod:of(component*,?object-12), isSubclass(?TYPEVAR0,Artifact), isSubclass(?TYPEVAR1,CorpuscularObject), sumo(?TYPEVAR1,?object-12), sumo(?TYPEVAR0,?kind-2) ==> {(powerComponent ?object-12 ?kind-2)}.

nmod:of(amount*,?precipitation-10), compound(amount*,precipitation*), cop(amount*,is*), nsubj(amount*,?quantity-3), case(?precipitation-10,of*), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR1,ConstantQuantity), sumo(?TYPEVAR0,?precipitation-10), isSubclass(?TYPEVAR0,Precipitation) ==> {(precipitationAmount ?precipitation-10 ?quantity-3)}.

cop(rate*,is*), compound(rate*,precipitation*), nsubj(rate*,?quantity-3), case(?precipitation-10,of*), nmod:of(rate*,?precipitation-10), sumo(?TYPEVAR0,?quantity-3), isSubclass(?TYPEVAR0,FunctionQuantity), isSubclass(?TYPEVAR1,Precipitation), sumo(?TYPEVAR1,?precipitation-10) ==> {(precipitationRate ?precipitation-10 ?quantity-3)}.

nsubj(state*,?state-3), compound(state*,precipitation*), case(?process-11,of*), nmod:of(state*,?process-11), cop(state*,is*), sumo(?TYPEVAR0,?state-3), isSubclass(?TYPEVAR1,WeatherProcess), sumo(?TYPEVAR1,?process-11), isSubclass(?TYPEVAR0,PhysicalState) ==> {(precipitationState ?process-11 ?state-3)}.

case(?argument-8,of*), nmod:of(premise*,?argument-8), nsubj(premise*,?proposition-2), cop(premise*,is*), sumo(?TYPEVAR1,?proposition-2), isSubclass(?TYPEVAR0,Argument), isSubclass(?TYPEVAR1,Proposition), sumo(?TYPEVAR0,?argument-8) ==> {(premise ?argument-8 ?proposition-2)}.

cop(premium*,is*), nmod:of(premium*,?agreement-9), nsubj(premium*,?measure-3), case(?agreement-9,of*), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR0,Agreement), sumo(?TYPEVAR0,?agreement-9) ==> {(premium ?agreement-9 ?measure-3)}.

amod(price*,?physical-2), case(?agent-9,for*), dep(price*,?measure-6), sumo(?TYPEVAR2,?measure-6), sumo(?TYPEVAR0,?physical-2), isSubclass(?TYPEVAR2,CurrencyMeasure), isSubclass(?TYPEVAR0,Physical), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR1,?agent-9) ==> {(price ?physical-2 ?measure-6 ?agent-9)}.

amod(subdivision*,primary*), cop(subdivision*,is*), amod(subdivision*,geopolitical*), case(?area-13,of*), nmod:of(subdivision*,?area-13), nsubj(subdivision*,?area-4), sumo(?TYPEVAR1,?area-4), sumo(?TYPEVAR0,?area-13), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(primaryGeopoliticalSubdivision ?area-13 ?area-4)}.

amod(type*,geopolitical*), cop(type*,is*), amod(type*,primary*), compound(type*,subdivision*), case(?area-15,of*), nmod:of(type*,?area-15), nsubj(type*,?kind-2), sumo(?TYPEVAR0,?area-15), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(primaryGeopoliticalSubdivisionType ?area-15 ?kind-2)}.

cop(rate*,is*), compound(rate*,interest*), nmod:of(rate*,?day-11), case(?day-11,of*), amod(rate*,prime*), nsubj(rate*,?rate-3), sumo(?TYPEVAR1,?rate-3), isSubclass(?TYPEVAR1,InterestRate), isSubclass(?TYPEVAR0,Day), sumo(?TYPEVAR0,?day-11) ==> {(primeInterestRate ?day-11 ?rate-3)}.

nmod:of(amount*,?account-11), case(?account-11,of*), cop(amount*,is*), amod(amount*,principal*), nsubj(amount*,?measure-3), isSubclass(?TYPEVAR0,FinancialAccount), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?account-11) ==> {(principalAmount ?account-11 ?measure-3)}.

case(?system-10,of*), nsubj(priority*,?attribute-3), nmod:of(priority*,?system-10), cop(priority*,is*), sumo(?TYPEVAR1,?attribute-3), sumo(?TYPEVAR0,?system-10), isSubclass(?TYPEVAR0,ComputationalSystem), isSubclass(?TYPEVAR1,PriorityAttribute) ==> {(priority ?system-10 ?attribute-3)}.

cop(process*,is*), acl(process*,aborted*), case(?abort-10,of*), nmod:of(aborted*,?abort-10), nsubj(process*,?process-3), isSubclass(?TYPEVAR1,ComputerProcess), isSubclass(?TYPEVAR0,Abort), sumo(?TYPEVAR0,?abort-10), sumo(?TYPEVAR1,?process-3) ==> {(processAborted ?abort-10 ?process-3)}.

case(?process-11,of*), nsubj(d*,?integer-3), nmod:of(d*,?process-11), compound(d*,processI*), cop(d*,is*), isSubclass(?TYPEVAR0,ComputerProcess), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR0,?process-11), sumo(?TYPEVAR1,?integer-3) ==> {(processID ?process-11 ?integer-3)}.

nsubj(program*,?program-3), nmod:of(running*,?process-11), case(?process-11,of*), cop(program*,is*), dep(program*,running*), isSubclass(?TYPEVAR0,ComputerProgram), sumo(?TYPEVAR0,?program-3), isSubclass(?TYPEVAR1,ComputerProcess), sumo(?TYPEVAR1,?process-11) ==> {(programRunning ?process-11 ?program-3)}.

cop(number*,is*), compound(number*,proton*), case(?substance-11,of*), nmod:of(number*,?substance-11), nsubj(number*,?integer-3), isSubclass(?TYPEVAR0,PureSubstance), sumo(?TYPEVAR1,?integer-3), sumo(?TYPEVAR0,?substance-11), isSubclass(?TYPEVAR1,PositiveInteger) ==> {(protonNumber ?substance-11 ?integer-3)}.

compound(purchases*,?account-3), dobj(period*,?measure-9), case(period*,per*), amod(purchases*,?financial-2), nmod:per(purchases*,period*), case(?time-12,for*), isSubclass(?TYPEVAR3,TimeInterval), sumo(?TYPEVAR2,?financial-2), isSubclass(?TYPEVAR0,FinancialAccount), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?account-3), isSubclass(?TYPEVAR2,FinancialAccount), sumo(?TYPEVAR3,?time-12), sumo(?TYPEVAR1,?measure-9) ==> {(purchasesPerPeriod ?account-3 ?measure-9 ?time-12)}.

nmod:in(season*,area*), dep(season*,?kind-2), nsubj(season*,?interval-5), case(?area-15,of*), amod(season*,rainy*), nmod:of(season*,?time-4), cop(season*,is*), case(area*,in*), nmod:of(area*,?area-15), isSubclass(?TYPEVAR2,GeographicArea), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR1,?interval-5), sumo(?TYPEVAR2,?area-15), isSubclass(?TYPEVAR3,TimeInterval), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR3,?time-4) ==> {(rainySeasonInArea ?area-15 ?time-4)}.

compound(p*,rate*), nsubj(p*,?number-3), compound(p*,ofGD*), compound(p*,growth*), amod(p*,real*), nmod:of(p*,?area-14), cop(p*,is*), case(?area-14,of*), isSubclass(?TYPEVAR0,RealNumber), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR1,?area-14), sumo(?TYPEVAR0,?number-3) ==> {(realGrowthRateOfGDP ?area-14 ?number-3)}.

compound(ofGDP*,growth*), case(period*,in*), case(?kind-15,for*), compound(ofGDP*,rate*), dep(period*,?number-12), nmod:in(ofGDP*,period*), dep(?area-3,ofGDP*), amod(ofGDP*,real*), sumo(?TYPEVAR0,?kind-15), isSubclass(?TYPEVAR0,TimeInterval), isSubclass(?TYPEVAR1,RealNumber), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR1,?number-12), sumo(?TYPEVAR2,?area-3) ==> {(realGrowthRateOfGDPInPeriod ?area-3 ?number-12 ?kind-15)}.

amod(issue*,regional*), case(?area-12,of*), cop(issue*,is*), nsubj(issue*,?area-2), nmod:of(issue*,?area-12), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?area-2), isSubclass(?TYPEVAR1,AreaOfConcern) ==> {(regionalIssue ?area-12 ?area-2)}.

nsubj(item*,?physical-2), cop(item*,is*), case(?text-9,of*), amod(item*,registered*), nmod:of(item*,?text-9), sumo(?TYPEVAR0,?physical-2), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR1,?text-9), isSubclass(?TYPEVAR1,Text) ==> {(registeredItem ?text-9 ?physical-2)}.

cop(event*,is*), nmod:of(event*,?process-10), nsubj(event*,?process-3), amod(event*,related*), case(?process-10,of*), isSubclass(?TYPEVAR1,Process), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?process-3), sumo(?TYPEVAR0,?process-10) ==> {(relatedEvent ?process-10 ?process-3)}.

case(?organism-9,of*), nsubj(relative*,?organism-3), cop(relative*,is*), nmod:of(relative*,?organism-9), sumo(?TYPEVAR0,?organism-9), sumo(?TYPEVAR1,?organism-3), isSubclass(?TYPEVAR0,Organism), isSubclass(?TYPEVAR1,Organism) ==> {(relative ?organism-9 ?organism-3)}.

amod(bearing*,relative*), dobj(bearing*,?object-7), acl(?object-2,bearing*), case(?measure-12,for*), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR2,?measure-12), isSubclass(?TYPEVAR2,PlaneAngleMeasure), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?object-7) ==> {(relativeBearing ?object-2 ?object-7 ?measure-12)}.

nsubj(humidity*,?number-4), amod(humidity*,relative*), nmod:of(humidity*,?object-11), case(?object-11,of*), cop(humidity*,is*), sumo(?TYPEVAR1,?object-11), isSubclass(?TYPEVAR0,NonnegativeRealNumber), sumo(?TYPEVAR0,?number-4), isSubclass(?TYPEVAR1,Object) ==> {(relativeHumidity ?object-11 ?number-4)}.

nsubj(affiliation*,?group-3), amod(affiliation*,religious*), cop(affiliation*,is*), nmod:of(organization*,?organization-12), case(?organization-12,of*), case(organization*,of*), nmod:of(affiliation*,organization*), isSubclass(?TYPEVAR1,Organization), isSubclass(?TYPEVAR0,BeliefGroup), sumo(?TYPEVAR0,?group-3), sumo(?TYPEVAR1,?organization-12) ==> {(religiousAffiliationOfOrganization ?organization-12 ?group-3)}.

case(?agent-13,for*), nmod:for(agent*,?agent-13), dobj(agent*,?agent-9), compound(agent*,representative*), acl(agent*,agent*), mark(agent*,to*), compound(agent*,?agent-2), isSubclass(?TYPEVAR2,Agent), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?agent-9), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR2,?agent-2), sumo(?TYPEVAR0,?agent-13) ==> {(representativeAgentToAgent ?agent-2 ?agent-9 ?agent-13)}.

case(?request-11,of*), acl:relcl(?time-2,time*), nsubj(time*,?duration-3), cop(time*,is*), nmod:of(time*,?request-11), compound(time*,response*), sumo(?TYPEVAR1,?time-2), sumo(?TYPEVAR0,?request-11), isSubclass(?TYPEVAR2,TimeDuration), isSubclass(?TYPEVAR0,UserRequest), sumo(?TYPEVAR2,?duration-3), isSubclass(?TYPEVAR1,TimeDuration) ==> {(responseTime ?request-11 ?duration-3)}.

nmod:of(type*,?process-11), compound(type*,result*), cop(type*,is*), nsubj(type*,?kind-2), case(?process-11,of*), isSubclass(?TYPEVAR0,Process), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?process-11), sumo(?TYPEVAR1,?kind-2) ==> {(resultType ?process-11 ?kind-2)}.

cop(tolerance*,is*), nsubj(tolerance*,?attribute-3), nmod:of(tolerance*,?investor-10), compound(tolerance*,risk*), case(?investor-10,of*), sumo(?TYPEVAR1,?investor-10), sumo(?TYPEVAR0,?attribute-3), isSubclass(?TYPEVAR0,RiskAttribute), isSubclass(?TYPEVAR1,Investor) ==> {(riskTolerance ?investor-10 ?attribute-3)}.

case(?program-12,of*), nsubj(program-of*,?system-3), cop(program-of*,is*), compound(program-of*,rM*), nmod:of(program-of*,?program-12), isSubclass(?TYPEVAR1,SoftwareSystem), sumo(?TYPEVAR1,?system-3), sumo(?TYPEVAR0,?program-12), isSubclass(?TYPEVAR0,ResourceManagementProgram) ==> {(rMProgram-of ?program-12 ?system-3)}.

dobj(role*,?role-8), compound(role*,appoints*), nsubj(role*,role*), case(?role-13,for*), compound(role*,?agent-2), isSubclass(?TYPEVAR1,SocialRole), sumo(?TYPEVAR0,?role-8), sumo(?TYPEVAR2,?agent-2), isSubclass(?TYPEVAR0,SocialRole), sumo(?TYPEVAR1,?role-13), isSubclass(?TYPEVAR2,Agent) ==> {(roleAppointsRole ?agent-2 ?role-8 ?role-13)}.

case(?role-13,for*), nsubj(approves*,role*), compound(?role-8,role*), dobj(approves*,?role-8), compound(role*,?agent-2), sumo(?TYPEVAR2,?agent-2), sumo(?TYPEVAR0,?role-13), sumo(?TYPEVAR1,?role-8), isSubclass(?TYPEVAR2,Agent), isSubclass(?TYPEVAR1,SocialRole), isSubclass(?TYPEVAR0,SocialRole) ==> {(roleApprovesRole ?agent-2 ?role-8 ?role-13)}.

compound(role*,?agent-2), nsubj(role*,role*), dobj(role*,?role-8), compound(role*,nominates*), case(?role-13,for*), sumo(?TYPEVAR1,?role-8), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,SocialRole), sumo(?TYPEVAR2,?role-13), isSubclass(?TYPEVAR2,SocialRole), sumo(?TYPEVAR0,?agent-2) ==> {(roleNominatesRole ?agent-2 ?role-8 ?role-13)}.

nmod:between(route*,?region-6), case(?region-10,for*), compound(route*,?transitway-2), case(?region-6,between*), nmod:for(route*,?region-10), isSubclass(?TYPEVAR1,Region), sumo(?TYPEVAR1,?region-10), sumo(?TYPEVAR2,?transitway-2), isSubclass(?TYPEVAR0,Region), isSubclass(?TYPEVAR2,Transitway), sumo(?TYPEVAR0,?region-6) ==> {(routeBetween ?transitway-2 ?region-6 ?region-10)}.

nmod:in(route*,system*), case(?transitway-11,of*), nmod:of(system*,?transitway-11), cop(route*,is*), case(system*,in*), nsubj(route*,?system-3), sumo(?TYPEVAR1,?system-3), isSubclass(?TYPEVAR0,Transitway), isSubclass(?TYPEVAR1,TransitSystem), sumo(?TYPEVAR0,?transitway-11) ==> {(routeInSystem ?transitway-11 ?system-3)}.

cop(runs*,is*), case(?program-10,on*), case(?program-10,of*), nmod:of(runs*,?program-10), nsubj(runs*,?computer-2), sumo(?TYPEVAR0,?program-10), isSubclass(?TYPEVAR0,ComputerProgram), sumo(?TYPEVAR1,?computer-2), isSubclass(?TYPEVAR1,Computer) ==> {(runsOn ?program-10 ?computer-2)}.

compound(temperature*,surface*), nmod:of(temperature*,?area-12), cop(temperature*,is*), case(?area-12,of*), compound(temperature*,sea*), nsubj(temperature*,?quantity-3), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR0,WaterArea), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR1,ConstantQuantity) ==> {(seaSurfaceTemperature ?area-12 ?quantity-3)}.

dobj(held*,?agent-8), case(?integer-12,for*), compound(seats*,?organization-2), acl(seats*,held*), nmod:in(held*,organization*), case(organization*,in*), sumo(?TYPEVAR1,?integer-12), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,NonnegativeInteger), sumo(?TYPEVAR0,?agent-8), isSubclass(?TYPEVAR2,Organization), sumo(?TYPEVAR2,?organization-2) ==> {(seatsHeldInOrganization ?organization-2 ?agent-8 ?integer-12)}.

case(?organization-11,of*), nmod:in(seats*,count*), cop(seats*,is*), nmod:of(count*,?organization-11), case(count*,in*), compound(count*,organization*), nsubj(seats*,?integer-2), isSubclass(?TYPEVAR1,Integer), sumo(?TYPEVAR0,?organization-11), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR1,?integer-2) ==> {(seatsInOrganizationCount ?organization-11 ?integer-2)}.

nsubj(won*,seats*), compound(seats*,?election-2), dep(election*,?agent-8), case(election*,in*), case(?integer-11,for*), nmod:in(won*,election*), sumo(?TYPEVAR1,?agent-8), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?election-2), isSubclass(?TYPEVAR0,Election), sumo(?TYPEVAR2,?integer-11), isSubclass(?TYPEVAR2,Integer) ==> {(seatsWonInElection ?election-2 ?agent-8 ?integer-11)}.

cop(substance*,is*), amod(substance*,secretes*), nmod:of(substance*,?kind-12), case(?kind-12,of*), nsubj(substance*,?kind-2), isSubclass(?TYPEVAR0,OrganicObject), isSubclass(?TYPEVAR1,NaturalSubstance), sumo(?TYPEVAR0,?kind-12), sumo(?TYPEVAR1,?kind-2) ==> {(secretesSubstance ?kind-12 ?kind-2)}.

cop(toxin*,is*), case(?kind-11,of*), amod(toxin*,secretes*), nsubj(toxin*,?kind-2), nmod:of(toxin*,?kind-11), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?kind-11), isSubclass(?TYPEVAR1,Toxin), isSubclass(?TYPEVAR0,Organism) ==> {(secretesToxin ?kind-11 ?kind-2)}.

amod(composition*,?geopolitical-2), nsubj(?attribute-10,composition*), compound(composition*,sector*), dep(?attribute-10,p*), compound(composition*,?area-3), dep(?attribute-10,ofGD*), case(?number-14,for*), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,IndustryAttribute), sumo(?TYPEVAR3,?number-14), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR2,?area-3), sumo(?TYPEVAR0,?geopolitical-2), sumo(?TYPEVAR1,?attribute-10), isSubclass(?TYPEVAR3,RealNumber) ==> {(sectorCompositionOfGDP ?geopolitical-2 ?attribute-10 ?number-14)}.

compound(composition*,?area-3), case(period*,in*), case(?number-15,for*), nmod:in(ofGDP*,period*), dep(period*,?attribute-11), dep(composition*,ofGDP*), case(?kind-18,with*), amod(composition*,?geopolitical-2), compound(composition*,sector*), sumo(?TYPEVAR3,?kind-18), sumo(?TYPEVAR0,?area-3), sumo(?TYPEVAR1,?number-15), isSubclass(?TYPEVAR1,RealNumber), isSubclass(?TYPEVAR3,TimeInterval), isSubclass(?TYPEVAR4,GeopoliticalArea), isSubclass(?TYPEVAR2,IndustryAttribute), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR2,?attribute-11), sumo(?TYPEVAR4,?geopolitical-2) ==> {(sectorCompositionOfGDPInPeriod ?geopolitical-2 ?attribute-11 ?number-15 ?kind-18)}.

; dep(?attribute-10,ofGD*), case(?measure-14,for*), dep(?attribute-10,value*), compound(?attribute-10,sector*), dep(?attribute-10,p*), isSubclass(?TYPEVAR0,IndustryAttribute), sumo(?TYPEVAR0,?attribute-10), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-14) ==> {(sectorValueOfGDP null ?attribute-10 ?measure-14)}.

amod(value*,?geopolitical-2), nmod:in(ofGDP*,period*), compound(value*,sector*), case(?kind-18,with*), dep(value*,ofGDP*), case(?measure-15,for*), case(period*,in*), dep(period*,?attribute-11), compound(value*,?area-3), sumo(?TYPEVAR0,?geopolitical-2), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR3,?attribute-11), sumo(?TYPEVAR1,?kind-18), isSubclass(?TYPEVAR2,CurrencyMeasure), isSubclass(?TYPEVAR3,IndustryAttribute), sumo(?TYPEVAR2,?measure-15), sumo(?TYPEVAR4,?area-3), isSubclass(?TYPEVAR4,GeopoliticalArea), isSubclass(?TYPEVAR1,TimeInterval) ==> {(sectorValueOfGDPInPeriod ?area-3 ?attribute-11 ?measure-15 ?kind-18)}.

nsubjpass(secured*,?collateral-2), case(?account-10,by*), nmod:agent(secured*,?account-10), case(?account-10,of*), auxpass(secured*,is*), sumo(?TYPEVAR0,?collateral-2), sumo(?TYPEVAR1,?account-10), isSubclass(?TYPEVAR0,Collateral), isSubclass(?TYPEVAR1,FinancialAccount) ==> {(securedBy ?account-10 ?collateral-2)}.

case(?measure-12,for*), compound(fee*,?organization-3), dep(fee*,?transaction-8), amod(fee*,?financial-2), compound(fee*,service*), sumo(?TYPEVAR3,?financial-2), isSubclass(?TYPEVAR1,FinancialOrganization), isSubclass(?TYPEVAR3,FinancialOrganization), sumo(?TYPEVAR0,?measure-12), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR1,?organization-3), sumo(?TYPEVAR2,?transaction-8), isSubclass(?TYPEVAR2,FinancialTransaction) ==> {(serviceFee ?organization-3 ?transaction-8 ?measure-12)}.

nsubj(time*,?duration-3), nmod:of(time*,?program-11), acl:relcl(?time-2,time*), amod(time*,settling*), cop(time*,is*), case(?program-11,of*), sumo(?TYPEVAR0,?duration-3), isSubclass(?TYPEVAR1,ComputerProgram), sumo(?TYPEVAR2,?time-2), sumo(?TYPEVAR1,?program-11), isSubclass(?TYPEVAR0,TimeDuration), isSubclass(?TYPEVAR2,TimeDuration) ==> {(settlingTime ?program-11 ?time-2)}.

nsubj(holder*,?agent-3), cop(holder*,is*), case(?share-10,of*), compound(holder*,share*), nmod:of(holder*,?share-10), isSubclass(?TYPEVAR1,Share), sumo(?TYPEVAR0,?agent-3), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR1,?share-10) ==> {(shareHolder ?share-10 ?agent-3)}.

compound(amount*,balance*), amod(amount*,short*), case(?measure-12,for*), nmod:tmod(amount*,?day-8), nsubj(amount*,?account-3), nmod:for(amount*,?measure-12), sumo(?TYPEVAR1,?day-8), sumo(?TYPEVAR2,?account-3), sumo(?TYPEVAR0,?measure-12), isSubclass(?TYPEVAR2,FinancialAccount), isSubclass(?TYPEVAR0,CurrencyMeasure), isSubclass(?TYPEVAR1,Day) ==> {(shortBalanceAmount ?account-3 ?day-8 ?measure-12)}.

cop(shutdown*,is*), nsubj(shutdown*,?program-3), case(?block-11,of*), case(?block-11,of*), nmod:of(shutdown*,?block-11), sumo(?TYPEVAR0,?program-3), isSubclass(?TYPEVAR0,ComputerProgram), isSubclass(?TYPEVAR1,ShutdownBlock), sumo(?TYPEVAR1,?block-11) ==> {(shutdownOf ?block-11 ?program-3)}.

nsubjpass(signed*,?agent-3), nmod:agent(signed*,?certificate-10), case(?certificate-10,of*), case(?certificate-10,by*), auxpass(signed*,is*), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-3), sumo(?TYPEVAR1,?certificate-10), isSubclass(?TYPEVAR1,Certificate) ==> {(signedBy ?certificate-10 ?agent-3)}.

case(?path-11,of*), nmod:of(deadline*,?path-11), cop(deadline*,is*), nsubj(deadline*,?duration-3), acl:relcl(?time-2,deadline*), amod(deadline*,simple*), isSubclass(?TYPEVAR0,ComputerPath), isSubclass(?TYPEVAR2,TimeDuration), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR1,?duration-3), sumo(?TYPEVAR0,?path-11), sumo(?TYPEVAR2,?time-2) ==> {(simpleDeadline ?path-11 ?time-2)}.

amod(interest*,simple*), dobj(interest*,?interest-7), dep(?account-3,interest*), case(?time-10,for*), sumo(?TYPEVAR2,?time-10), sumo(?TYPEVAR1,?account-3), sumo(?TYPEVAR0,?interest-7), isSubclass(?TYPEVAR1,FinancialAccount), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR0,Interest) ==> {(simpleInterest ?account-3 ?interest-7 ?time-10)}.

cop(slice*,is*), nmod:of(slice*,figure*), nsubj(slice*,?object-3), nmod:of(figure*,?object-13), case(?object-13,of*), case(figure*,of*), isSubclass(?TYPEVAR0,CorpuscularObject), sumo(?TYPEVAR1,?object-13), isSubclass(?TYPEVAR1,TwoDimensionalObject), sumo(?TYPEVAR0,?object-3) ==> {(sliceOfFigure ?object-13 ?object-3)}.

amod(size*,sliding*), nmod:of(size*,?path-12), compound(size*,window*), cop(size*,is*), case(?path-12,of*), nsubj(size*,?integer-3), sumo(?TYPEVAR1,?integer-3), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR0,?path-12), isSubclass(?TYPEVAR0,ComputerPath) ==> {(slidingWindowSize ?path-12 ?integer-3)}.

nsubj(gradient*,?number-4), compound(gradient*,slope*), case(?area-12,of*), cop(gradient*,is*), nmod:of(gradient*,?area-12), sumo(?TYPEVAR0,?number-4), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR1,LandArea), isSubclass(?TYPEVAR0,NonnegativeRealNumber) ==> {(slopeGradient ?area-12 ?number-4)}.

case(?number-14,for*), compound(gradient*,?land-2), compound(gradient*,?area-3), nsubj(?attribute-10,gradient*), compound(gradient*,slope*), case(orientation*,towards*), nmod:towards(gradient*,orientation*), isSubclass(?TYPEVAR1,LandArea), isSubclass(?TYPEVAR0,RationalNumber), sumo(?TYPEVAR0,?number-14), sumo(?TYPEVAR1,?land-2), sumo(?TYPEVAR3,?attribute-10), isSubclass(?TYPEVAR2,LandArea), sumo(?TYPEVAR2,?area-3), isSubclass(?TYPEVAR3,DirectionalAttribute) ==> {(slopeGradientTowardsOrientation ?area-3 ?attribute-10 ?number-14)}.

cop(path*,is*), case(?system-11,of*), nsubj(path*,?path-3), nmod:of(path*,?system-11), compound(path*,software*), isSubclass(?TYPEVAR1,ComputerPath), sumo(?TYPEVAR0,?system-11), isSubclass(?TYPEVAR0,SoftwareSystem), sumo(?TYPEVAR1,?path-3) ==> {(softwarePath ?system-11 ?path-3)}.

nsubj(language*,?language-2), case(?agent-10,of*), cop(language*,is*), amod(language*,speaks*), nmod:of(language*,?agent-10), sumo(?TYPEVAR1,?agent-10), isSubclass(?TYPEVAR1,SentientAgent), isSubclass(?TYPEVAR0,Language), sumo(?TYPEVAR0,?language-2) ==> {(speaksLanguage ?agent-10 ?language-2)}.

nmod:for(split*,?integer-7), compound(split*,?stock-2), case(?integer-11,for*), case(?integer-7,for*), compound(split*,?split-3), sumo(?TYPEVAR3,?split-3), isSubclass(?TYPEVAR0,Integer), isSubclass(?TYPEVAR1,StockSplit), sumo(?TYPEVAR2,?integer-11), isSubclass(?TYPEVAR2,Integer), isSubclass(?TYPEVAR3,StockSplit), sumo(?TYPEVAR0,?integer-7), sumo(?TYPEVAR1,?stock-2) ==> {(splitFor ?stock-2 ?integer-7 ?integer-11)}.

cop(startup*,is*), case(?block-11,of*), nsubj(startup*,?program-3), nmod:of(startup*,?block-11), case(?block-11,of*), isSubclass(?TYPEVAR0,StartupBlock), isSubclass(?TYPEVAR1,ComputerProgram), sumo(?TYPEVAR0,?block-11), sumo(?TYPEVAR1,?program-3) ==> {(startupOf ?block-11 ?program-3)}.

cop(account*,is*), nsubj(account*,?account-3), compound(account*,statement*), nmod:of(account*,?statement-11), case(?statement-11,of*), sumo(?TYPEVAR0,?account-3), isSubclass(?TYPEVAR1,BankStatement), sumo(?TYPEVAR1,?statement-11), isSubclass(?TYPEVAR0,FinancialAccount) ==> {(statementAccount ?statement-11 ?account-3)}.

nmod:of(interest*,?statement-11), case(?statement-11,of*), cop(interest*,is*), nsubj(interest*,?measure-3), compound(interest*,statement*), sumo(?TYPEVAR0,?statement-11), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR0,BankStatement) ==> {(statementInterest ?statement-11 ?measure-3)}.

compound(period*,statement*), nmod:of(period*,?statement-11), nsubj(period*,?interval-3), acl:relcl(?time-2,period*), case(?statement-11,of*), cop(period*,is*), sumo(?TYPEVAR2,?time-2), sumo(?TYPEVAR0,?statement-11), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR1,?interval-3), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR0,BankStatement) ==> {(statementPeriod ?statement-11 ?interval-3)}.

nsubj(holder*,?agent-3), compound(holder*,stock*), case(?stock-10,of*), cop(holder*,is*), nmod:of(holder*,?stock-10), sumo(?TYPEVAR0,?agent-3), isSubclass(?TYPEVAR1,Stock), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR1,?stock-10) ==> {(stockHolder ?stock-10 ?agent-3)}.

nsubj(symbol*,?string-3), compound(symbol*,stock*), case(?stock-10,of*), cop(symbol*,is*), nmod:of(symbol*,?stock-10), sumo(?TYPEVAR0,?string-3), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?stock-10), isSubclass(?TYPEVAR1,Stock) ==> {(stockSymbol ?stock-10 ?string-3)}.

nsubj(stranger*,?human-3), nmod:of(stranger*,?human-9), case(?human-9,of*), cop(stranger*,is*), sumo(?TYPEVAR0,?human-3), sumo(?TYPEVAR1,?human-9), isSubclass(?TYPEVAR1,Human), isSubclass(?TYPEVAR0,Human) ==> {(stranger ?human-9 ?human-3)}.

case(?instrument-11,of*), compound(price*,strike*), nsubj(price*,?measure-3), cop(price*,is*), nmod:of(price*,?instrument-11), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?instrument-11), isSubclass(?TYPEVAR0,FinancialInstrument), isSubclass(?TYPEVAR1,CurrencyMeasure) ==> {(strikePrice ?instrument-11 ?measure-3)}.

case(?kind-12,of*), nsubj(echelon*,?kind-2), compound(echelon*,sub*), nmod:of(echelon*,?kind-12), cop(echelon*,is*), isSubclass(?TYPEVAR1,MilitaryUnit), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR0,MilitaryUnit), sumo(?TYPEVAR0,?kind-12) ==> {(subEchelon ?kind-12 ?kind-2)}.

case(?human-11,for*), nmod:in(subordinate*,organization*), compound(subordinate*,?organization-2), case(organization*,in*), amod(subordinate*,?human-7), sumo(?TYPEVAR2,?human-7), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR0,?human-11), sumo(?TYPEVAR1,?organization-2), isSubclass(?TYPEVAR1,Organization), isSubclass(?TYPEVAR2,Human) ==> {(subordinateInOrganization ?organization-2 ?human-7 ?human-11)}.

case(?position-10,for*), dep(position*,?position-6), compound(position*,?organization-2), amod(position*,subordinate*), sumo(?TYPEVAR1,?position-6), sumo(?TYPEVAR2,?organization-2), sumo(?TYPEVAR0,?position-10), isSubclass(?TYPEVAR2,Organization), isSubclass(?TYPEVAR1,Position), isSubclass(?TYPEVAR0,Position) ==> {(subordinatePosition ?organization-2 ?position-6 ?position-10)}.

nsubj(system*,?system-4), case(?system-12,of*), cop(system*,is*), compound(system*,sub*), nmod:of(system*,?system-12), isSubclass(?TYPEVAR0,PhysicalSystem), sumo(?TYPEVAR1,?system-12), sumo(?TYPEVAR0,?system-4), isSubclass(?TYPEVAR1,PhysicalSystem) ==> {(subSystem ?system-12 ?system-4)}.

compound(organization*,successor*), nsubj(organization*,?organization-3), cop(organization*,is*), case(?organization-10,of*), nmod:of(organization*,?organization-10), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR0,?organization-3), isSubclass(?TYPEVAR1,Organization), sumo(?TYPEVAR1,?organization-10) ==> {(successorOrganization ?organization-10 ?organization-3)}.

nmod:of(maximum*,?agent-11), nsubj(age*,?duration-3), cop(age*,is*), case(?agent-11,of*), amod(age*,maximum*), compound(age*,suffrage*), acl:relcl(?time-2,age*), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR0,?agent-11), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR1,?duration-3), isSubclass(?TYPEVAR2,TimeDuration), sumo(?TYPEVAR2,?time-2) ==> {(suffrageAgeMaximum ?agent-11 ?time-2)}.

cop(minimum*,is*), compound(minimum*,suffrage*), compound(minimum*,age*), acl:relcl(?time-2,minimum*), case(?agent-11,of*), nmod:of(minimum*,?agent-11), nsubj(minimum*,?duration-3), isSubclass(?TYPEVAR0,TimeDuration), sumo(?TYPEVAR1,?agent-11), isSubclass(?TYPEVAR2,TimeDuration), sumo(?TYPEVAR0,?time-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR2,?duration-3) ==> {(suffrageAgeMinimum ?agent-11 ?duration-3)}.

nmod:of(direction*,?object-11), cop(direction*,is*), case(?object-11,of*), compound(direction*,wind*), nsubj(direction*,?attribute-3), compound(direction*,surface*), sumo(?TYPEVAR0,?object-11), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,DirectionalAttribute), sumo(?TYPEVAR1,?attribute-3) ==> {(surfaceWindDirection ?object-11 ?attribute-3)}.

compound(speed*,surface*), nsubj(speed*,?quantity-3), compound(speed*,wind*), case(?object-11,of*), cop(speed*,is*), nmod:of(speed*,?object-11), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?quantity-3), isSubclass(?TYPEVAR0,PhysicalQuantity), sumo(?TYPEVAR1,?object-11) ==> {(surfaceWindSpeed ?object-11 ?quantity-3)}.

compound(velocity*,wind*), dep(velocity*,?quantity-8), case(?attribute-12,for*), compound(velocity*,?object-2), compound(velocity*,surface*), sumo(?TYPEVAR1,?attribute-12), isSubclass(?TYPEVAR1,DirectionalAttribute), isSubclass(?TYPEVAR2,Object), isSubclass(?TYPEVAR0,PhysicalQuantity), sumo(?TYPEVAR0,?quantity-8), sumo(?TYPEVAR2,?object-2) ==> {(surfaceWindVelocity ?object-2 ?quantity-8 ?attribute-12)}.

nmod:of(measured*,?performance-11), nsubj(system*,?system-3), case(?performance-11,of*), acl(system*,measured*), cop(system*,is*), isSubclass(?TYPEVAR0,MeasuringPerformance), sumo(?TYPEVAR1,?system-3), sumo(?TYPEVAR0,?performance-11), isSubclass(?TYPEVAR1,ComputationalSystem) ==> {(systemMeasured ?performance-11 ?system-3)}.

nsubj(target*,?object-2), nmod:of(attack*,?process-10), case(?process-10,of*), case(attack*,in*), cop(target*,is*), nmod:in(target*,attack*), sumo(?TYPEVAR1,?process-10), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR0,?object-2) ==> {(targetInAttack ?process-10 ?object-2)}.

nmod:of(task*,?process-10), case(?process-10,of*), cop(task*,is*), nsubj(task*,?task-3), isSubclass(?TYPEVAR1,ProcessTask), sumo(?TYPEVAR0,?process-10), sumo(?TYPEVAR1,?task-3), isSubclass(?TYPEVAR0,ComputerProcess) ==> {(task ?process-10 ?task-3)}.

nmod:of(tenant*,?agent-8), nsubj(tenant*,?residence-2), cop(tenant*,is*), case(?agent-8,of*), sumo(?TYPEVAR1,?residence-2), isSubclass(?TYPEVAR1,Residence), sumo(?TYPEVAR0,?agent-8), isSubclass(?TYPEVAR0,Agent) ==> {(tenant ?agent-8 ?residence-2)}.

compound(length*,term*), compound(length*,?agent-2), case(?time-10,for*), dep(length*,?role-7), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR0,?agent-2), sumo(?TYPEVAR2,?role-7), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR2,SocialRole), sumo(?TYPEVAR1,?time-10) ==> {(termLength ?agent-2 ?role-7 ?time-10)}.

nmod:in(terrain*,area*), nmod:of(area*,?area-12), nsubj(terrain*,?attribute-3), case(?area-12,of*), cop(terrain*,is*), case(area*,in*), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR1,TerrainAttribute), sumo(?TYPEVAR1,?attribute-3) ==> {(terrainInArea ?area-12 ?attribute-3)}.

case(?computer-11,of*), nsubj(threshold*,?number-4), cop(threshold*,is*), nmod:of(threshold*,?computer-11), case(?computer-11,of*), isSubclass(?TYPEVAR1,PositiveRealNumber), isSubclass(?TYPEVAR0,Computer), sumo(?TYPEVAR0,?computer-11), sumo(?TYPEVAR1,?number-4) ==> {(thresholdOf ?computer-11 ?number-4)}.

cop(area*,is*), nmod:of(area*,?region-10), nsubj(area*,?measure-3), amod(area*,total*), case(?region-10,of*), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR0,Region), sumo(?TYPEVAR0,?region-10), isSubclass(?TYPEVAR1,AreaMeasure) ==> {(totalArea ?region-10 ?measure-3)}.

cop(balance*,is*), nmod:of(balance*,?account-11), amod(balance*,total*), case(?account-11,of*), nsubj(balance*,?measure-3), isSubclass(?TYPEVAR0,FinancialAccount), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?account-11), sumo(?TYPEVAR1,?measure-3) ==> {(totalBalance ?account-11 ?measure-3)}.

amod(biomass*,total*), case(?area-11,of*), nmod:of(biomass*,?area-11), cop(biomass*,is*), nsubj(biomass*,?quantity-3), sumo(?TYPEVAR0,?area-11), isSubclass(?TYPEVAR1,PhysicalQuantity), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR0,GeographicArea) ==> {(totalBiomass ?area-11 ?quantity-3)}.

case(?area-11,of*), nsubj(coastline*,?measure-3), cop(coastline*,is*), amod(coastline*,total*), nmod:of(coastline*,?area-11), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-11), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,LengthMeasure) ==> {(totalCoastline ?area-11 ?measure-3)}.

amod(type*,?geographic-2), dep(type*,?class-10), amod(type*,total*), case(?integer-14,for*), case(area*,in*), compound(type*,?area-3), nmod:in(type*,area*), compound(type*,facility*), sumo(?TYPEVAR0,?geographic-2), sumo(?TYPEVAR1,?class-10), isSubclass(?TYPEVAR0,GeographicArea), isSubclass(?TYPEVAR2,NonnegativeInteger), isSubclass(?TYPEVAR3,GeographicArea), sumo(?TYPEVAR2,?integer-14), isSubclass(?TYPEVAR1,Class), sumo(?TYPEVAR3,?area-3) ==> {(totalFacilityTypeInArea ?area-3 ?class-10 ?integer-14)}.

nmod:of(p*,?area-11), nsubj(p*,?measure-3), compound(p*,totalGD*), cop(p*,is*), case(?area-11,of*), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?area-11), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,CurrencyMeasure) ==> {(totalGDP ?area-11 ?measure-3)}.

case(?kind-12,for*), amod(totalGDP*,?geopolitical-2), nmod:in(totalGDP*,period*), case(period*,in*), compound(totalGDP*,?area-3), dep(period*,?measure-9), sumo(?TYPEVAR3,?measure-9), isSubclass(?TYPEVAR2,GeopoliticalArea), sumo(?TYPEVAR2,?area-3), sumo(?TYPEVAR1,?geopolitical-2), isSubclass(?TYPEVAR3,CurrencyMeasure), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR0,?kind-12), isSubclass(?TYPEVAR1,GeopoliticalArea) ==> {(totalGDPInPeriod ?geopolitical-2 ?measure-9 ?kind-12)}.

compound(boundary*,land*), amod(boundary*,total*), cop(boundary*,is*), nsubj(boundary*,?measure-3), case(?area-12,of*), nmod:of(boundary*,?area-12), isSubclass(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR0,?measure-3), sumo(?TYPEVAR1,?area-12), isSubclass(?TYPEVAR0,LengthMeasure) ==> {(totalLandBoundary ?area-12 ?measure-3)}.

nmod:of(length*,system*), nmod:of(system*,?area-14), cop(length*,is*), compound(system*,highway*), amod(length*,total*), nsubj(length*,?measure-3), case(?area-14,of*), case(system*,of*), sumo(?TYPEVAR0,?area-14), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,LengthMeasure) ==> {(totalLengthOfHighwaySystem ?area-14 ?measure-3)}.

nsubj(length*,?measure-3), nmod:of(length*,system*), case(system*,of*), compound(system*,railway*), cop(length*,is*), amod(length*,total*), nmod:of(system*,?area-14), case(?area-14,of*), sumo(?TYPEVAR0,?measure-3), isSubclass(?TYPEVAR1,GeographicArea), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR1,?area-14) ==> {(totalLengthOfRailwaySystem ?area-14 ?measure-3)}.

nmod:of(waterways*,?area-13), cop(length*,is*), case(waterways*,of*), nmod:of(length*,waterways*), case(?area-13,of*), nsubj(length*,?measure-3), amod(length*,total*), isSubclass(?TYPEVAR1,LengthMeasure), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-13), sumo(?TYPEVAR1,?measure-3) ==> {(totalLengthOfWaterways ?area-13 ?measure-3)}.

cop(pipeline*,is*), case(area*,in*), case(?area-13,of*), nmod:of(area*,?area-13), nmod:in(pipeline*,area*), nsubj(pipeline*,?measure-3), amod(pipeline*,total*), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,LengthMeasure), sumo(?TYPEVAR0,?area-13) ==> {(totalPipelineInArea ?area-13 ?measure-3)}.

case(period*,for*), dep(period*,?time-9), dep(?area-3,precipitation*), case(?quantity-14,for*), amod(precipitation*,total*), nmod:for(precipitation*,period*), sumo(?TYPEVAR1,?area-3), isSubclass(?TYPEVAR2,ConstantQuantity), isSubclass(?TYPEVAR1,GeographicArea), isSubclass(?TYPEVAR0,TimeDuration), sumo(?TYPEVAR0,?time-9), sumo(?TYPEVAR2,?quantity-14) ==> {(totalPrecipitationForPeriod ?area-3 ?time-9 ?quantity-14)}.

cop(width*,is*), case(?railway-10,of*), nsubj(width*,?measure-3), compound(width*,track*), nmod:of(width*,?railway-10), isSubclass(?TYPEVAR0,Railway), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?railway-10), isSubclass(?TYPEVAR1,LengthMeasure) ==> {(trackWidth ?railway-10 ?measure-3)}.

nsubj(trafficable*,?kind-2), compound(type*,traffic*), nmod:for(trafficable*,type*), case(?object-15,of*), nmod:of(type*,?object-15), cop(trafficable*,is*), case(type*,for*), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-15), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR0,SelfConnectedObject) ==> {(trafficableForTrafficType ?object-15 ?kind-2)}.

nmod:of(amount*,?transaction-11), case(?transaction-11,of*), cop(amount*,is*), nsubj(amount*,?measure-3), compound(amount*,transaction*), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR1,?measure-3), sumo(?TYPEVAR0,?transaction-11), isSubclass(?TYPEVAR0,FinancialTransaction) ==> {(transactionAmount ?transaction-11 ?measure-3)}.

compound(count*,?transitway-2), compound(count*,transitway*), case(?integer-15,for*), compound(count*,capacity*), nmod:npmod(count*,?kind-7), isSubclass(?TYPEVAR0,Transitway), sumo(?TYPEVAR1,?integer-15), sumo(?TYPEVAR2,?kind-7), sumo(?TYPEVAR0,?transitway-2), isSubclass(?TYPEVAR2,SelfConnectedObject), isSubclass(?TYPEVAR1,NonnegativeInteger) ==> {(transitwayCapacityCount ?transitway-2 ?kind-7 ?integer-15)}.

compound(rate*,capacity*), dep(rate*,?kind-7), case(?quantity-15,for*), compound(rate*,transitway*), compound(rate*,?transitway-2), isSubclass(?TYPEVAR2,Transitway), sumo(?TYPEVAR0,?kind-7), isSubclass(?TYPEVAR0,SelfConnectedObject), sumo(?TYPEVAR1,?quantity-15), isSubclass(?TYPEVAR1,FunctionQuantity), sumo(?TYPEVAR2,?transitway-2) ==> {(transitwayCapacityRate ?transitway-2 ?kind-7 ?quantity-15)}.

nsubj(underlier*,?instrument-3), cop(underlier*,is*), case(?agreement-9,of*), nmod:of(underlier*,?agreement-9), isSubclass(?TYPEVAR1,Agreement), isSubclass(?TYPEVAR0,FinancialInstrument), sumo(?TYPEVAR0,?instrument-3), sumo(?TYPEVAR1,?agreement-9) ==> {(underlier ?agreement-9 ?instrument-3)}.

; compound(rate*,area*), compound(rate*,unemployment*), case(area*,of*), amod(rate*,geopolitical*), nmod:of(rate*,area*), dep(rate*,number*), acl(number*,for*), amod(number*,real*) ==> ; {(unemploymentRateOfArea null null)}.

case(period*,in*), compound(rate*,?area-3), amod(rate*,?geopolitical-2), case(?kind-15,for*), case(area*,of*), nmod:of(rate*,area*), nmod:in(rate*,period*), dep(period*,?number-12), compound(rate*,unemployment*), sumo(?TYPEVAR1,?geopolitical-2), sumo(?TYPEVAR0,?area-3), isSubclass(?TYPEVAR1,GeopoliticalArea), sumo(?TYPEVAR2,?kind-15), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR3,?number-12), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR3,RealNumber) ==> {(unemploymentRateOfAreaInPeriod ?area-3 ?number-12 ?kind-15)}.

cop(unit*,is*), acl(unit*,measuring*), nmod:of(performance*,?component-13), nsubj(unit*,?unit-2), dobj(measuring*,performance*), case(?component-13,of*), isSubclass(?TYPEVAR0,ComputerComponent), sumo(?TYPEVAR0,?component-13), sumo(?TYPEVAR1,?unit-2), isSubclass(?TYPEVAR1,UnitOfMeasure) ==> {(unitMeasuringPerformance ?component-13 ?unit-2)}.

nsubj(signatory*,?agreement-2), case(agreement*,to*), nmod:of(agreement*,?agent-11), cop(signatory*,is*), case(?agent-11,of*), nmod:to(signatory*,agreement*), amod(signatory*,unratified*), sumo(?TYPEVAR0,?agreement-2), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Agreement), sumo(?TYPEVAR1,?agent-11) ==> {(unratifiedSignatoryToAgreement ?agent-11 ?agreement-2)}.

compound(pattern*,vegetation*), case(?attribute-13,for*), compound(pattern*,type*), nmod:npmod(pattern*,?kind-8), compound(pattern*,?area-3), amod(pattern*,?geographic-2), isSubclass(?TYPEVAR2,GeographicArea), sumo(?TYPEVAR3,?geographic-2), sumo(?TYPEVAR1,?kind-8), isSubclass(?TYPEVAR3,GeographicArea), sumo(?TYPEVAR0,?attribute-13), isSubclass(?TYPEVAR1,Plant), isSubclass(?TYPEVAR0,Attribute), sumo(?TYPEVAR2,?area-3) ==> {(vegetationTypePattern ?area-3 ?kind-8 ?attribute-13)}.

compound(tonnage*,weight*), nsubj(vessel*,?measure-3), cop(vessel*,is*), amod(tonnage*,dead*), dobj(vessel*,tonnage*), nmod:of(tonnage*,?vehicle-13), case(?vehicle-13,of*), isSubclass(?TYPEVAR0,MassMeasure), isSubclass(?TYPEVAR1,WaterVehicle), sumo(?TYPEVAR1,?vehicle-13), sumo(?TYPEVAR0,?measure-3) ==> {(vesselDeadWeightTonnage ?vehicle-13 ?measure-3)}.

compound(displacement*,vessel*), nmod:of(displacement*,?vehicle-11), nsubj(displacement*,?quantity-3), case(?vehicle-11,of*), cop(displacement*,is*), sumo(?TYPEVAR1,?quantity-3), isSubclass(?TYPEVAR1,PhysicalQuantity), sumo(?TYPEVAR0,?vehicle-11), isSubclass(?TYPEVAR0,WaterVehicle) ==> {(vesselDisplacement ?vehicle-11 ?quantity-3)}.

cop(tonnage*,is*), nsubj(tonnage*,?quantity-3), amod(tonnage*,gross*), nmod:of(tonnage*,?vehicle-13), compound(tonnage*,vessel*), case(?vehicle-13,of*), amod(tonnage*,registered*), isSubclass(?TYPEVAR1,WaterVehicle), sumo(?TYPEVAR1,?vehicle-13), sumo(?TYPEVAR0,?quantity-3), isSubclass(?TYPEVAR0,PhysicalQuantity) ==> {(vesselGrossRegisteredTonnage ?vehicle-13 ?quantity-3)}.

nmod:with(received*,?number-15), nsubj(received*,fraction*), dobj(received*,?role-8), compound(fraction*,vote*), case(?number-15,with*), compound(fraction*,?election-2), case(?agent-11,for*), sumo(?TYPEVAR3,?agent-11), isSubclass(?TYPEVAR1,SocialRole), isSubclass(?TYPEVAR3,Agent), sumo(?TYPEVAR2,?election-2), isSubclass(?TYPEVAR0,RealNumber), isSubclass(?TYPEVAR2,Election), sumo(?TYPEVAR0,?number-15), sumo(?TYPEVAR1,?role-8) ==> {(voteFractionReceived ?election-2 ?role-8 ?agent-11 ?number-15)}.

case(?area-15,of*), case(area*,in*), dep(season*,?kind-2), cop(season*,is*), nmod:of(season*,?time-4), nsubj(season*,?interval-5), nmod:of(area*,?area-15), amod(season*,warm*), nmod:in(season*,area*), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR0,?area-15), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR3,TimeInterval), sumo(?TYPEVAR3,?interval-5), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR2,?time-4) ==> {(warmSeasonInArea ?area-15 ?time-4)}.

case(?area-12,of*), cop(area*,is*), nsubj(area*,?measure-3), compound(area*,water*), nmod:of(area*,?area-12), advmod(?area-12,only*), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,AreaMeasure), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR0,GeographicArea) ==> {(waterAreaOnly ?area-12 ?measure-3)}.

nsubj(depth*,?measure-3), cop(depth*,is*), case(?area-11,of*), compound(depth*,water*), nmod:of(depth*,?area-11), isSubclass(?TYPEVAR1,WaterArea), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR0,?measure-3), sumo(?TYPEVAR1,?area-11) ==> {(waterDepth ?area-11 ?measure-3)}.

dobj(carrying*,?kind-8), case(?integer-14,for*), compound(weapon*,?vehicle-3), acl(weapon*,carrying*), dobj(carrying*,capability*), amod(weapon*,?military-2), sumo(?TYPEVAR1,?integer-14), isSubclass(?TYPEVAR1,PositiveInteger), isSubclass(?TYPEVAR2,MilitaryVehicle), sumo(?TYPEVAR0,?kind-8), isSubclass(?TYPEVAR0,Weapon), sumo(?TYPEVAR2,?vehicle-3), sumo(?TYPEVAR3,?military-2), isSubclass(?TYPEVAR3,MilitaryVehicle) ==> {(weaponCarryingCapability ?military-2 ?kind-8 ?integer-14)}.

nmod:of(weight*,?object-11), cop(weight*,is*), nsubj(weight*,?measure-3), case(?object-11,of*), isSubclass(?TYPEVAR1,MassMeasure), sumo(?TYPEVAR0,?object-11), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR0,SelfConnectedObject) ==> {(weight ?object-11 ?measure-3)}.

cop(wind*,is*), nmod:of(position*,?object-10), case(?object-10,of*), nsubj(wind*,?attribute-2), amod(position*,relative*), dobj(wind*,position*), sumo(?TYPEVAR0,?object-10), isSubclass(?TYPEVAR1,Attribute), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?attribute-2) ==> {(windRelativePosition ?object-10 ?attribute-2)}.

nsubj(address*,?agent-3), cop(address*,is*), nmod:of(address*,?PostalPlace-10), case(?PostalPlace-10,of*), compound(address*,work*), isSubclass(?TYPEVAR1,PostalPlace), sumo(?TYPEVAR0,?agent-3), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR1,?PostalPlace-10) ==> {(workAddress ?PostalPlace-10 ?agent-3)}.

case(?organization-10,of*), nmod:of(year*,founding*), case(founding*,of*), nmod:of(founding*,?organization-10), nsubj(year*,?integer-2), cop(year*,is*), sumo(?TYPEVAR0,?organization-10), sumo(?TYPEVAR1,?integer-2), isSubclass(?TYPEVAR0,Organization), isSubclass(?TYPEVAR1,Integer) ==> {(yearOfFounding ?organization-10 ?integer-2)}.

cop(yield*,is*), case(?investment-9,of*), nsubj(yield*,?quantity-3), nmod:of(yield*,?investment-9), sumo(?TYPEVAR1,?quantity-3), sumo(?TYPEVAR0,?investment-9), isSubclass(?TYPEVAR1,FunctionQuantity), isSubclass(?TYPEVAR0,Investment) ==> {(yield ?investment-9 ?quantity-3)}.

cop(title*,is*), nsubj(title*,?string-3), case(?language-13,in*), case(?entity-10,of*), nmod:of(title*,?entity-10), amod(title*,short*), isSubclass(?TYPEVAR1,Language), sumo(?TYPEVAR0,?string-3), sumo(?TYPEVAR2,?entity-10), sumo(?TYPEVAR1,?language-13), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR2,Entity) ==> {(abbreviatedDisplayTitle ?string-3 ?entity-10 ?language-13)}.

amod(counterpart*,abstract*), cop(?abstract-9,is*), nmod:of(counterpart*,?physical-6), nsubj(?abstract-9,counterpart*), case(?physical-6,of*), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR0,?abstract-9), sumo(?TYPEVAR1,?physical-6), isSubclass(?TYPEVAR0,Abstract) ==> {(abstractCounterpart ?abstract-9 ?physical-6)}.

compound(level*,abstraction*), cop(?attribute-12,is*), case(?system-7,of*), nsubj(?attribute-12,level*), nmod:of(level*,?system-7), isSubclass(?TYPEVAR0,AbstractionLevelAttribute), isSubclass(?TYPEVAR1,RealtimeSystem), sumo(?TYPEVAR0,?attribute-12), sumo(?TYPEVAR1,?system-7) ==> {(abstractionLevel ?system-7 ?attribute-12)}.

nsubj(accessable*,?entity-2), cop(accessable*,is*), nmod:from(accessable*,?ComputerMenu-7), case(?ComputerMenu-7,from*), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?ComputerMenu-7), isSubclass(?TYPEVAR1,ComputerMenu), sumo(?TYPEVAR0,?entity-2) ==> {(accessableFromMenu ?entity-2 ?ComputerMenu-7)}.

nmod:from(accessable*,?ComputerMenuItem-7), nsubj(accessable*,?entity-2), cop(accessable*,is*), case(?ComputerMenuItem-7,from*), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,ComputerMenuItem), sumo(?TYPEVAR1,?entity-2), sumo(?TYPEVAR0,?ComputerMenuItem-7) ==> {(accessableFromMenuItem ?entity-2 ?ComputerMenuItem-7)}.

dobj(provides*,?package-6), nsubj(provides*,?organization-2), isSubclass(?TYPEVAR1,Organization), sumo(?TYPEVAR1,?organization-2), isSubclass(?TYPEVAR0,HotelPackage), sumo(?TYPEVAR0,?package-6) ==> {(accommodationProvider ?package-6 ?organization-2)}.

nmod:agent(held*,?organization-9), auxpass(held*,is*), nsubjpass(held*,?account-3), case(?organization-9,by*), sumo(?TYPEVAR0,?organization-9), isSubclass(?TYPEVAR1,FinancialAccount), isSubclass(?TYPEVAR0,FinancialOrganization), sumo(?TYPEVAR1,?account-3) ==> {(accountAt ?account-3 ?organization-9)}.

nmod:at(account*,?Website-9), case(?Website-9,at*), cop(account*,is*), nsubj(account*,?account-3), isSubclass(?TYPEVAR1,UserAccount), sumo(?TYPEVAR0,?Website-9), isSubclass(?TYPEVAR0,Website), sumo(?TYPEVAR1,?account-3) ==> {(accountAtSite ?account-3 ?Website-9)}.

nsubj(holds*,?agent-3), xcomp(holds*,account*), dobj(account*,?account-8), isSubclass(?TYPEVAR1,FinancialAccount), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR1,?account-8), sumo(?TYPEVAR0,?agent-3) ==> {(accountHolder ?account-8 ?agent-3)}.

cop(acronym*,is*), nsubj(acronym*,?string-3), nmod:for(acronym*,?entity-9), case(?entity-9,for*), sumo(?TYPEVAR0,?string-3), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?entity-9) ==> {(acronym ?string-3 ?entity-9)}.

nsubj(tends*,?state-3), xcomp(tends*,cause*), dobj(cause*,?kind-8), mark(cause*,to*), isSubclass(?TYPEVAR0,EmotionalState), sumo(?TYPEVAR0,?state-3), sumo(?TYPEVAR1,?kind-8), isSubclass(?TYPEVAR1,EmotionalBehavioralProcess) ==> {(actionTendency ?state-3 ?kind-8)}.

nmod:during(active*,?kind-7), cop(active*,is*), nsubj(active*,?proposition-2), case(?kind-7,during*), sumo(?TYPEVAR0,?kind-7), isSubclass(?TYPEVAR0,TimePosition), sumo(?TYPEVAR1,?proposition-2), isSubclass(?TYPEVAR1,Proposition) ==> {(ActivePolicy ?proposition-2 ?kind-7)}.

aux(hold*,can*), case(?kind-8,of*), nmod:of(kinds*,?kind-8), nsubj(hold*,?agent-2), dobj(hold*,kinds*), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR0,?kind-8), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR1,?agent-2) ==> {(activityCapability ?agent-2 ?kind-8)}.

case(?set-7,to*), nsubj(adjacent*,?object-2), nmod:to(adjacent*,?set-7), cop(adjacent*,is*), nmod:to(adjacent*,?class-9), sumo(?TYPEVAR0,?set-7), isSubclass(?TYPEVAR0,SetOrClass), isSubclass(?TYPEVAR2,SetOrClass), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR2,?class-9) ==> {(adjacentOrientation ?object-2 ?class-9)}.

; nmod:by(derived*,human*), nmod:from(human*,process*), compound(measure*,currency*), nsubj(measure*,The*), case(income*,after*), conj:&(tax*,$*), nmod:after(The*,income*), cc(tax*,&*), case(process*,from*), compound(income*,$*), amod(process*,organizational*), acl(income*,derived*), compound(income*,tax*), case(human*,by*), cop(measure*,is*) ==> ; ; {(afterTaxIncome null null null)}.

; acl(responsibility*,make*), dobj(make*,?proposition-10), nsubj(has*,?agent-3), mark(make*,to*), dobj(has*,responsibility*), case(?agreement-16,in*), isSubclass(?TYPEVAR0,Proposition), isSubclass(?TYPEVAR2,Agreement), sumo(?TYPEVAR1,?agent-3), sumo(?TYPEVAR0,?proposition-10), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR2,?agreement-16) ==> {(agreementClause ?proposition-10 null ?agreement-16 ?agent-3)}.

nsubj(has*,?agreement-2), dobj(has*,?point-7), compound(?point-7,expiration*), isSubclass(?TYPEVAR1,TimePoint), sumo(?TYPEVAR0,?agreement-2), isSubclass(?TYPEVAR0,Agreement), sumo(?TYPEVAR1,?point-7) ==> {(agreementExpirationDate ?agreement-2 ?point-7)}.

nsubj(produces*,?area-3), dobj(produces*,?kind-6), sumo(?TYPEVAR0,?area-3), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-6) ==> {(agriculturalArtifactType ?area-3 ?kind-6)}.

nmod:of(artifact*,?area-13), advmod(important*,most*), amod(artifact*,important*), dep(?integer-6,artifact*), cop(?kind-16,is*), case(?area-13,of*), isSubclass(?TYPEVAR2,Object), sumo(?TYPEVAR1,?integer-6), sumo(?TYPEVAR2,?kind-16), isSubclass(?TYPEVAR0,GeopoliticalArea), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR0,?area-13) ==> {(agriculturalArtifactTypeByRank ?area-13 ?kind-16 ?integer-6)}.

nsubj(performer*,?agent-3), cop(performer*,is*), nmod:on(performer*,?album-9), case(?album-9,on*), sumo(?TYPEVAR1,?album-9), isSubclass(?TYPEVAR1,Album), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-3) ==> {(albumArtist ?album-9 ?agent-3)}.

nsubj(image*,?Image-2), cop(image*,is*), case(?album-8,on*), nmod:on(image*,?album-8), sumo(?TYPEVAR0,?Image-2), isSubclass(?TYPEVAR0,Image), sumo(?TYPEVAR1,?album-8), isSubclass(?TYPEVAR1,Album) ==> {(albumCoverImage ?album-8 ?Image-2)}.

; cop(long*,is*), compound(duration*,time*), nsubj(long*,album*), nmod:npmod(long*,duration*) ==> ; {(albumLength null null)}.

case(?point-8,on*), nsubjpass(released*,?album-2), auxpass(released*,was*), nmod:on(released*,?point-8), sumo(?TYPEVAR0,?point-8), isSubclass(?TYPEVAR0,TimePoint), sumo(?TYPEVAR1,?album-2), isSubclass(?TYPEVAR1,Album) ==> {(albumRelease ?album-2 ?point-8)}.

case(?album-8,on*), cop(track*,is*), nmod:on(track*,?album-8), nsubj(track*,?recording-2), sumo(?TYPEVAR0,?album-8), sumo(?TYPEVAR1,?recording-2), isSubclass(?TYPEVAR1,Recording), isSubclass(?TYPEVAR0,Album) ==> {(albumTrack ?recording-2 ?album-8)}.

nmod:in(rooms*,?inventory-6), case(?inventory-6,in*), nsubj(have*,rooms*), dobj(have*,?kind-9), sumo(?TYPEVAR0,?inventory-6), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-9), isSubclass(?TYPEVAR0,RoomInventory) ==> {(allRoomsPhysicalAmenity ?inventory-6 ?kind-9)}.

dobj(have*,?policy-10), nmod:in(rooms*,?inventory-6), case(?inventory-6,in*), nsubj(have*,rooms*), compound(?policy-10,policy*), isSubclass(?TYPEVAR1,RoomInventory), isSubclass(?TYPEVAR0,Policy), sumo(?TYPEVAR0,?policy-10), sumo(?TYPEVAR1,?inventory-6) ==> {(allRoomsPolicy ?inventory-6 ?policy-10)}.

nsubj(have*,rooms*), nmod:in(rooms*,?inventory-6), dobj(service*,?kind-10), dobj(have*,service*), case(?inventory-6,in*), isSubclass(?TYPEVAR1,ServiceProcess), sumo(?TYPEVAR0,?inventory-6), isSubclass(?TYPEVAR0,RoomInventory), sumo(?TYPEVAR1,?kind-10) ==> {(allRoomsServiceAmenity ?inventory-6 ?kind-10)}.

cop(?string-13,is*), amod(title*,alternate*), case(?entity-6,of*), nmod:of(title*,?entity-6), nmod:in(title*,?language-9), nsubj(?string-13,title*), case(?language-9,in*), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-13), sumo(?TYPEVAR1,?entity-6), isSubclass(?TYPEVAR2,Language), sumo(?TYPEVAR2,?language-9) ==> {(alternativeTitle ?string-13 ?entity-6 ?language-9)}.

cop(amount*,is*), acl(amount*,charged*), case(?fee-11,in*), nmod:in(charged*,?fee-11), nsubj(amount*,?measure-3), sumo(?TYPEVAR1,?measure-3), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR0,ChargingAFee), sumo(?TYPEVAR0,?fee-11) ==> {(amountCharged ?fee-11 ?measure-3)}.

nsubj(bid*,?measure-3), nmod:of(bid*,?bidding-9), case(?bidding-9,of*), cop(bid*,is*), isSubclass(?TYPEVAR1,Bidding), sumo(?TYPEVAR0,?measure-3), sumo(?TYPEVAR1,?bidding-9), isSubclass(?TYPEVAR0,CurrencyMeasure) ==> {(amountOfBid ?bidding-9 ?measure-3)}.

nsubj(ancestor*,?organism-3), case(?organism-9,of*), cop(ancestor*,is*), nmod:of(ancestor*,?organism-9), isSubclass(?TYPEVAR0,Organism), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR1,?organism-9), sumo(?TYPEVAR0,?organism-3) ==> {(ancestor ?organism-9 ?organism-3)}.

nsubj(angle*,?angle-4), cop(angle*,is*), case(?figure-12,in*), nmod:in(found*,?figure-12), acl(angle*,found*), isSubclass(?TYPEVAR0,TwoDimensionalAngle), sumo(?TYPEVAR0,?angle-4), sumo(?TYPEVAR1,?figure-12), isSubclass(?TYPEVAR1,GeometricFigure) ==> {(angleOfFigure ?angle-4 ?figure-12)}.

nsubj(anthem*,?music-2), cop(anthem*,is*), nmod:of(anthem*,?object-8), case(?object-8,of*), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?music-2), isSubclass(?TYPEVAR0,Music), sumo(?TYPEVAR1,?object-8) ==> {(anthem ?music-2 ?object-8)}.

nsubjpass(appraised*,?collateral-2), auxpass(appraised*,is*), case(?measure-8,for*), nmod:for(appraised*,?measure-8), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR0,Collateral), sumo(?TYPEVAR0,?collateral-2), sumo(?TYPEVAR1,?measure-8) ==> {(appraisedValue ?collateral-2 ?measure-8)}.

dobj(approves*,?agent-8), nsubj(approves*,?agent-3), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-8), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR1,?agent-3) ==> {(approves ?agent-3 ?agent-8)}.

nsubj(?measure-12,diameter*), nmod:of(diameter*,?object-8), case(?object-8,of*), amod(diameter*,approximate*), cop(?measure-12,is*), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR1,SelfConnectedObject), sumo(?TYPEVAR0,?measure-12), sumo(?TYPEVAR1,?object-8) ==> {(approximateDiameter ?object-8 ?measure-12)}.

nmod:for(asks*,?measure-7), case(?object-10,for*), nsubj(asks*,?agent-2), case(?measure-7,for*), sumo(?TYPEVAR0,?measure-7), sumo(?TYPEVAR1,?object-10), isSubclass(?TYPEVAR2,Agent), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR2,?agent-2), isSubclass(?TYPEVAR1,Object) ==> {(askPrice ?object-10 ?measure-7 ?agent-2)}.

dobj(attends*,?demonstrating-5), nsubj(attends*,?human-2), isSubclass(?TYPEVAR0,Demonstrating), sumo(?TYPEVAR1,?human-2), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?demonstrating-5) ==> {(attends ?demonstrating-5 ?human-2)}.

case(?formula-11,to*), dep(attitude*,?state-8), nsubj(has*,?agent-2), dobj(has*,attitude*), sumo(?TYPEVAR1,?state-8), sumo(?TYPEVAR2,?agent-2), sumo(?TYPEVAR0,?formula-11), isSubclass(?TYPEVAR1,EmotionalState), isSubclass(?TYPEVAR2,Agent), isSubclass(?TYPEVAR0,Formula) ==> {(attitudeForFormula ?state-8 ?agent-2 ?formula-11)}.

case(?physical-11,to*), dep(attitude*,?state-8), dobj(has*,attitude*), nsubj(has*,?agent-2), sumo(?TYPEVAR1,?state-8), sumo(?TYPEVAR2,?agent-2), isSubclass(?TYPEVAR0,Physical), isSubclass(?TYPEVAR1,EmotionalState), sumo(?TYPEVAR0,?physical-11), isSubclass(?TYPEVAR2,Agent) ==> {(attitudeForObject ?state-8 ?agent-2 ?physical-11)}.

cop(aunt*,is*), nsubj(aunt*,?woman-2), case(?human-8,of*), nmod:of(aunt*,?human-8), isSubclass(?TYPEVAR0,Woman), sumo(?TYPEVAR0,?woman-2), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR1,?human-8) ==> {(aunt ?woman-2 ?human-8)}.

dobj(notifies*,destination*), nsubj(notifies*,agent*) ==> {(automatedNotification agent* destination*)}.

amod(balance*,available*), nmod:of(balance*,?account-7), case(?account-7,of*), nsubj(?measure-14,balance*), case(?day-10,on*), cop(?measure-14,is*), sumo(?TYPEVAR1,?measure-14), sumo(?TYPEVAR0,?account-7), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR0,FinancialAccount), sumo(?TYPEVAR2,?day-10), isSubclass(?TYPEVAR2,Day) ==> {(availableBalance ?account-7 ?day-10 ?measure-14)}.

case(?day-10,on*), nmod:on(cash*,?day-10), nmod:of(cash*,?account-7), nsubj(?measure-14,cash*), case(?account-7,of*), cop(?measure-14,is*), amod(cash*,available*), isSubclass(?TYPEVAR1,FinancialAccount), isSubclass(?TYPEVAR0,Day), isSubclass(?TYPEVAR2,CurrencyMeasure), sumo(?TYPEVAR0,?day-10), sumo(?TYPEVAR1,?account-7), sumo(?TYPEVAR2,?measure-14) ==> {(availableCash ?account-7 ?day-10 ?measure-14)}.

nsubjpass(baptised*,?human-2), nmod:on(baptised*,?day-7), case(?day-7,on*), auxpass(baptised*,was*), sumo(?TYPEVAR1,?day-7), isSubclass(?TYPEVAR0,Human), isSubclass(?TYPEVAR1,Day), sumo(?TYPEVAR0,?human-2) ==> {(baptismdate ?human-2 ?day-7)}.

nsubjpass(baptised*,?human-2), auxpass(baptised*,was*), case(?region-7,in*), nmod:in(baptised*,?region-7), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR0,?human-2), sumo(?TYPEVAR1,?region-7), isSubclass(?TYPEVAR1,Region) ==> {(baptismplace ?human-2 ?region-7)}.

acl:relcl(Employee*,based*), auxpass(based*,is*), case(?area-12,in*), case(?organization-6,in*), nsubjpass(based*,?human-3), nmod:in(based*,?area-12), sumo(?TYPEVAR1,?organization-6), isSubclass(?TYPEVAR1,Organization), isSubclass(?TYPEVAR2,Human), sumo(?TYPEVAR2,?human-3), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR0,GeopoliticalArea) ==> {(basedIn ?human-3 ?organization-6 ?area-12)}.

compound(taxes*,?currency-5), nsubj(pays*,?human-2), mark(doing*,for*), dobj(pays*,taxes*), advcl(pays*,doing*), compound(taxes*,?measure-6), dobj(doing*,?process-12), sumo(?TYPEVAR1,?human-2), isSubclass(?TYPEVAR1,Human), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR0,?currency-5), sumo(?TYPEVAR3,?process-12), isSubclass(?TYPEVAR3,OrganizationalProcess), sumo(?TYPEVAR2,?measure-6), isSubclass(?TYPEVAR2,CurrencyMeasure) ==> {(beforeTaxIncome ?human-2 ?measure-6 ?process-12)}.

compound(percent*,?number-3), case(?group-15,in*), case(?area-10,in*), nsubj(believe*,percent*), amod(percent*,?real-2), case(people*,of*), nmod:of(percent*,people*), nmod:in(percent*,?area-10), nmod:in(believe*,?group-15), sumo(?TYPEVAR0,?number-3), sumo(?TYPEVAR1,?group-15), isSubclass(?TYPEVAR0,RealNumber), isSubclass(?TYPEVAR1,BeliefGroup), isSubclass(?TYPEVAR2,GeographicArea), isSubclass(?TYPEVAR3,RealNumber), sumo(?TYPEVAR2,?area-10), sumo(?TYPEVAR3,?real-2) ==> {(beliefGroupPercentInRegion ?group-15 ?real-2 ?area-10)}.

dobj(bids*,?measure-6), case(?object-9,for*), nmod:for(bids*,?object-9), nsubj(bids*,?agent-2), sumo(?TYPEVAR2,?agent-2), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR0,?measure-6), isSubclass(?TYPEVAR2,Agent), sumo(?TYPEVAR1,?object-9), isSubclass(?TYPEVAR1,Object) ==> {(bidPrice ?object-9 ?measure-6 ?agent-2)}.

cop(?day-7,is*), nmod:poss(birthday*,?human-2), nsubj(?day-7,birthday*), sumo(?TYPEVAR1,?human-2), isSubclass(?TYPEVAR1,Human), isSubclass(?TYPEVAR0,Day), sumo(?TYPEVAR0,?day-7) ==> {(birthday ?human-2 ?day-7)}.

case(?bond-5,of*), nsubj(?rating-9,rating*), cop(?rating-9,is*), nmod:of(rating*,?bond-5), isSubclass(?TYPEVAR0,Bond), isSubclass(?TYPEVAR1,FinancialRating), sumo(?TYPEVAR1,?rating-9), sumo(?TYPEVAR0,?bond-5) ==> {(bondRating ?bond-5 ?rating-9)}.

cop(borrower*,is*), nsubj(borrower*,?loan-2), case(?agent-9,of*), nmod:of(borrower*,?agent-9), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR0,Loan), sumo(?TYPEVAR0,?loan-2), sumo(?TYPEVAR1,?agent-9) ==> {(borrower ?loan-2 ?agent-9)}.

nsubj(icon*,?icon-2), case(?brand-8,of*), nmod:of(icon*,?brand-8), cop(icon*,is*), isSubclass(?TYPEVAR0,Icon), sumo(?TYPEVAR1,?brand-8), isSubclass(?TYPEVAR1,Brand), sumo(?TYPEVAR0,?icon-2) ==> {(brandIcon ?brand-8 ?icon-2)}.

cop(brother*,is*), case(?human-8,of*), nsubj(brother*,?man-2), nmod:of(brother*,?human-8), isSubclass(?TYPEVAR1,Man), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?man-2), sumo(?TYPEVAR0,?human-8) ==> {(brother ?man-2 ?human-8)}.

advcl(ID*,accessing*), dobj(accessing*,?Website-13), advmod(accessing*,when*), nsubj(ID*,?Identifier-2), nmod:of(ID*,?browser-9), cop(ID*,is*), case(?browser-9,of*), isSubclass(?TYPEVAR2,WebBrowser), sumo(?TYPEVAR2,?browser-9), isSubclass(?TYPEVAR1,Identifier), sumo(?TYPEVAR1,?Identifier-2), isSubclass(?TYPEVAR0,Website), sumo(?TYPEVAR0,?Website-13) ==> {(browserID ?Identifier-2 ?browser-9 ?Website-13)}.

auxpass(ubried*,is*), nsubjpass(ubried*,?animal-2), case(?object-7,at*), nmod:at(ubried*,?object-7), isSubclass(?TYPEVAR0,Animal), sumo(?TYPEVAR0,?animal-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-7) ==> {(burialplace ?animal-2 ?object-7)}.

; acl(interval*,burn*), dobj(takes*,time*), dep(time*,interval*), nmod(burn*,in*), mark(burn*,to*), nsubj(takes*,experimenting*) ==> ; {(burnInPeriod null null)}.

cop(?kind-9,are*), nsubj(?kind-9,hours*), compound(hours*,business*), nmod:of(hours*,?agent-6), case(?agent-6,of*), isSubclass(?TYPEVAR0,TimeInterval), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?kind-9), sumo(?TYPEVAR1,?agent-6) ==> {(businessHours ?kind-9 ?agent-6)}.

nsubj(unit*,?organization-2), nmod:of(unit*,?Business-9), case(?Business-9,of*), compound(unit*,business*), cop(unit*,is*), isSubclass(?TYPEVAR1,Business), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR1,?Business-9), sumo(?TYPEVAR0,?organization-2) ==> {(businessUnit ?organization-2 ?Business-9)}.

case(?agent-11,from*), nsubj(buys*,?agent-3), nmod:from(buys*,?agent-11), dobj(buys*,?entity-6), sumo(?TYPEVAR0,?agent-11), sumo(?TYPEVAR2,?entity-6), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR2,Entity) ==> {(buys ?agent-3 ?agent-11 ?entity-6)}.

dobj(carry*,?object-6), nsubj(carry*,?CarryBot-2), aux(carry*,can*), sumo(?TYPEVAR1,?CarryBot-2), isSubclass(?TYPEVAR1,CarryBot), sumo(?TYPEVAR0,?object-6), isSubclass(?TYPEVAR0,Object) ==> {(canCarry ?CarryBot-2 ?object-6)}.

auxpass(called*,is*), dobj(called*,?region-7), case(?language-10,in*), nsubjpass(called*,?string-3), sumo(?TYPEVAR1,?language-10), isSubclass(?TYPEVAR0,Region), isSubclass(?TYPEVAR1,Language), sumo(?TYPEVAR2,?string-3), sumo(?TYPEVAR0,?region-7), isSubclass(?TYPEVAR2,SymbolicString) ==> {(canonicalPlaceName ?region-7 ?language-10 ?string-3)}.

cop(capable*,is*), case(?kind-13,in*), nsubj(capable*,?object-2), cop(?role-10,being*), advcl(capable*,?role-10), case(?kind-18,during*), mark(?role-10,of*), isSubclass(?TYPEVAR2,CaseRole), sumo(?TYPEVAR0,?kind-13), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR2,?role-10), sumo(?TYPEVAR3,?kind-18), isSubclass(?TYPEVAR3,TimeInterval), isSubclass(?TYPEVAR1,Object) ==> {(capabilityDuring ?kind-13 ?role-10 ?object-2 ?kind-18)}.

dobj(has*,capacity*), nsubj(has*,?region-2), nmod:according_to(has*,?proposition-11), case(?integer-7,for*), case(?proposition-11,according*), nmod:for(capacity*,?integer-7), mwe(according*,to*), sumo(?TYPEVAR2,?integer-7), isSubclass(?TYPEVAR1,Proposition), sumo(?TYPEVAR0,?region-2), isSubclass(?TYPEVAR0,Region), sumo(?TYPEVAR1,?proposition-11), isSubclass(?TYPEVAR2,Integer) ==> {(capacityByArrangement ?region-2 ?proposition-11 ?integer-7)}.

nsubj(carries*,?agent-2), dobj(carries*,?object-5), sumo(?TYPEVAR0,?agent-2), sumo(?TYPEVAR1,?object-5), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,Agent) ==> {(carries ?agent-2 ?object-5)}.

nsubj(ID*,?Identifier-2), cop(ID*,is*), nmod:for(ID*,?category-10), case(?category-10,for*), sumo(?TYPEVAR1,?category-10), isSubclass(?TYPEVAR0,Identifier), isSubclass(?TYPEVAR1,WebListingCategory), sumo(?TYPEVAR0,?Identifier-2) ==> {(categoryID ?Identifier-2 ?category-10)}.

dobj(includes*,category*), dep(category*,?category-9), nsubj(includes*,?WebSite-2), sumo(?TYPEVAR0,?category-9), isSubclass(?TYPEVAR0,WebListingCategory), sumo(?TYPEVAR1,?WebSite-2), isSubclass(?TYPEVAR1,WebSite) ==> {(categoryOf ?category-9 ?WebSite-2)}.

dobj(allows*,checkins*), nmod:after(allows*,?kind-7), nsubj(allows*,?organization-2), case(?kind-7,after*), sumo(?TYPEVAR1,?organization-2), isSubclass(?TYPEVAR0,TimePoint), sumo(?TYPEVAR0,?kind-7), isSubclass(?TYPEVAR1,Organization) ==> {(checkInTime ?organization-2 ?kind-7)}.

case(?check-5,of*), nsubj(?integer-9,number*), cop(?integer-9,is*), nmod:of(number*,?check-5), sumo(?TYPEVAR0,?check-5), isSubclass(?TYPEVAR0,Check), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR1,?integer-9) ==> {(checkNumber ?check-5 ?integer-9)}.

nmod:before(check*,?point-8), aux(check*,must*), nmod:at(check*,?agent-12), nsubj(check*,One*), case(?agent-12,at*), compound:prt(check*,out*), case(?point-8,before*), sumo(?TYPEVAR1,?agent-12), sumo(?TYPEVAR0,?point-8), isSubclass(?TYPEVAR0,TimePoint), isSubclass(?TYPEVAR1,CognitiveAgent) ==> {(checkOutTime ?agent-12 ?point-8)}.

nmod:of(intersection*,?set-5), nmod:of(intersection*,?set-11), nsubj(?set-17,intersection*), cop(?set-17,is*), case(?set-5,of*), cc(?set-5,and*), nmod:of(intersection*,?class-7), isSubclass(?TYPEVAR2,SetOrClass), sumo(?TYPEVAR0,?set-5), sumo(?TYPEVAR2,?set-17), sumo(?TYPEVAR1,?set-11), isSubclass(?TYPEVAR3,SetOrClass), sumo(?TYPEVAR3,?class-7), isSubclass(?TYPEVAR0,SetOrClass), isSubclass(?TYPEVAR1,SetOrClass) ==> {(classIntersection ?class-7 ?set-11 ?set-17)}.

; amod(student*,other*), cc(student*,and*), nsubj(classmates*,student*), nsubj(classmates*,student*), conj:and(student*,student*), cop(classmates*,are*) ==> ; {(classmate null null)}.

dep(coaches*,?human-6), amod(coaches*,?human-2), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR0,?human-6), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR1,?human-2) ==> {(coaches ?human-2 ?human-6)}.

nsubj(denotes*,?string-3), dobj(denotes*,?entity-9), case(?CodeMap-6,in*), isSubclass(?TYPEVAR2,CodeMap), sumo(?TYPEVAR2,?CodeMap-6), sumo(?TYPEVAR0,?string-3), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR1,?entity-9), isSubclass(?TYPEVAR0,SymbolicString) ==> {(codeMapping ?CodeMap-6 ?string-3 ?entity-9)}.

nsubjpass(encoded*,?object-4), nmod:in(encoded*,?CodingScheme-9), case(?CodingScheme-9,in*), auxpass(encoded*,is*), isSubclass(?TYPEVAR0,ContentBearingObject), sumo(?TYPEVAR1,?CodingScheme-9), isSubclass(?TYPEVAR1,CodingScheme), sumo(?TYPEVAR0,?object-4) ==> {(coding ?object-4 ?CodingScheme-9)}.

cop(colleague*,is*), nsubj(colleague*,?human-2), case(?human-9,of*), nmod:of(colleague*,?human-9), sumo(?TYPEVAR1,?human-9), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?human-2), isSubclass(?TYPEVAR0,Human) ==> {(colleague ?human-2 ?human-9)}.

dobj(collects*,data*), nsubj(collects*,?system-3), nmod:tmod(collects*,?duration-9), isSubclass(?TYPEVAR0,ComputationalSystem), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR1,?duration-9), sumo(?TYPEVAR0,?system-3) ==> {(collectRate ?system-3 ?duration-9)}.

cop(located*,is*), nmod:at(located*,?agent-10), case(?agent-10,at*), compound(organization*,?attribute-4), amod(organization*,?relational-3), nsubj(located*,organization*), isSubclass(?TYPEVAR2,RelationalAttribute), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR2,?relational-3), isSubclass(?TYPEVAR1,RelationalAttribute), sumo(?TYPEVAR0,?agent-10), sumo(?TYPEVAR1,?attribute-4) ==> {(colocatedAgent ?agent-10 ?attribute-4)}.

dobj(color*,?attribute-8), nsubj(color*,?object-2), cop(color*,is*), isSubclass(?TYPEVAR0,ColorAttribute), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR0,?attribute-8), isSubclass(?TYPEVAR1,Object) ==> {(color ?object-2 ?attribute-8)}.

dobj(states*,?string-8), case(?entity-11,about*), nsubj(states*,?string-4), sumo(?TYPEVAR0,?string-8), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR1,?entity-11), isSubclass(?TYPEVAR2,SymbolicString), sumo(?TYPEVAR2,?string-4) ==> {(comment ?entity-11 ?string-8 ?string-4)}.

case(?process-6,about*), nmod:about(comments*,?process-6), nsubj(comments*,?agent-2), isSubclass(?TYPEVAR0,Process), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?process-6) ==> {(commentator ?agent-2 ?process-6)}.

nmod:of(complexity*,?system-6), case(?system-6,of*), nsubj(?attribute-11,complexity*), cop(?attribute-11,is*), sumo(?TYPEVAR0,?system-6), isSubclass(?TYPEVAR1,TimingRequirementAttribute), isSubclass(?TYPEVAR0,RealtimeSystem), sumo(?TYPEVAR1,?attribute-11) ==> {(complexity ?system-6 ?attribute-11)}.

nsubj(composed*,?agent-2), dobj(composed*,?kind-5), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?kind-5), isSubclass(?TYPEVAR1,MusicalComposition), sumo(?TYPEVAR0,?agent-2) ==> {(composer ?agent-2 ?kind-5)}.

aux(running*,is*), case(?computer-8,on*), nsubj(running*,?process-3), nmod:on(running*,?computer-8), isSubclass(?TYPEVAR0,Computer), sumo(?TYPEVAR1,?process-3), isSubclass(?TYPEVAR1,ComputerProcess), sumo(?TYPEVAR0,?computer-8) ==> {(computerRunning ?process-3 ?computer-8)}.

cop(confidence*,is*), nmod:in(confidence*,?experimenting-9), case(?experimenting-9,in*), nsubj(confidence*,?number-3), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR0,?experimenting-9), isSubclass(?TYPEVAR0,Experimenting), sumo(?TYPEVAR1,?number-3) ==> {(confidenceInterval ?experimenting-9 ?number-3)}.

nsubjpass(registered*,?agent-2), auxpass(registered*,is*), nmod:on(registered*,?Website-7), case(?Website-7,on*), sumo(?TYPEVAR0,?agent-2), sumo(?TYPEVAR1,?Website-7), isSubclass(?TYPEVAR1,Website), isSubclass(?TYPEVAR0,Agent) ==> {(confirmedRegisteredUser ?agent-2 ?Website-7)}.

nsubj(conforms*,?object-2), case(?proposition-6,to*), nmod:to(conforms*,?proposition-6), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?proposition-6), isSubclass(?TYPEVAR1,Proposition) ==> {(conforms ?object-2 ?proposition-6)}.

case(?user-12,with*), nmod:with(connected*,?user-12), auxpass(connected*,is*), nsubjpass(connected*,?user-4), sumo(?TYPEVAR1,?user-4), isSubclass(?TYPEVAR0,SocialNetworkingUser), isSubclass(?TYPEVAR1,SocialNetworkingUser), sumo(?TYPEVAR0,?user-12) ==> {(connectedInSocialNetwork ?user-4 ?user-12)}.

nsubjpass(built*,?artifact-3), case(?time-8,during*), auxpass(built*,was*), nmod:during(built*,?time-8), isSubclass(?TYPEVAR0,StationaryArtifact), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR0,?artifact-3), sumo(?TYPEVAR1,?time-8) ==> {(constructionPeriod ?artifact-3 ?time-8)}.

case(?contest-9,in*), nmod:in(entered*,?contest-9), nsubj(entered*,?agent-3), dobj(entered*,?entity-6), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR0,Contest), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR2,Entity), sumo(?TYPEVAR2,?entity-6), sumo(?TYPEVAR0,?contest-9) ==> {(contestEntry ?entity-6 ?agent-3 ?contest-9)}.

nmod:in(entered*,?contest-8), nsubj(entered*,?agent-2), dobj(entered*,?object-5), case(?contest-8,in*), sumo(?TYPEVAR0,?contest-8), isSubclass(?TYPEVAR2,Object), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR0,Contest), sumo(?TYPEVAR2,?object-5), isSubclass(?TYPEVAR1,Agent) ==> {(contestObject ?contest-8 ?object-5 ?agent-2)}.

dobj(organizes*,?contest-6), nsubj(organizes*,?agent-3), isSubclass(?TYPEVAR0,Contest), sumo(?TYPEVAR0,?contest-6), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR1,?agent-3) ==> {(contestOrganizer ?contest-6 ?agent-3)}.

case(?contest-6,in*), nsubj(participates*,?agent-2), nmod:in(participates*,?contest-6), sumo(?TYPEVAR0,?contest-6), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Contest) ==> {(contestParticipant ?contest-6 ?agent-2)}.

nmod:in(represents*,?contest-9), dobj(represents*,?object-6), case(?contest-9,in*), nsubj(represents*,?agent-3), sumo(?TYPEVAR1,?object-6), isSubclass(?TYPEVAR0,Contest), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR2,CognitiveAgent), sumo(?TYPEVAR0,?contest-9), sumo(?TYPEVAR2,?agent-3) ==> {(contestParticipantRepresentation ?contest-9 ?agent-3 ?object-6)}.

case(?quantity-14,for*), nmod:of(rental*,?kind-8), dobj(specifies*,rental*), nsubj(specifies*,?agreement-2), nmod:for(rental*,?quantity-14), case(?kind-8,of*), sumo(?TYPEVAR0,?quantity-14), sumo(?TYPEVAR1,?kind-8), isSubclass(?TYPEVAR2,Agreement), isSubclass(?TYPEVAR0,FunctionQuantity), sumo(?TYPEVAR2,?agreement-2), isSubclass(?TYPEVAR1,Physical) ==> {(contractedRentalPrice ?kind-8 ?quantity-14 ?agreement-2)}.

acl(contract*,build*), nsubj(has*,?agent-2), dobj(build*,?artifact-10), mark(build*,to*), dobj(has*,contract*), sumo(?TYPEVAR1,?artifact-10), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,StationaryArtifact), sumo(?TYPEVAR0,?agent-2) ==> {(contractor ?artifact-10 ?agent-2)}.

advmod(exclusive*,mutually*), nmod:for(exclusive*,?predicate-13), cop(exclusive*,are*), case(?predicate-13,for*), nsubj(exclusive*,?attribute-2), nsubj(exclusive*,?attribute-6), cc(?attribute-2,and*), sumo(?TYPEVAR0,?predicate-13), sumo(?TYPEVAR1,?attribute-2), isSubclass(?TYPEVAR1,Attribute), isSubclass(?TYPEVAR0,BinaryPredicate), isSubclass(?TYPEVAR2,Attribute), sumo(?TYPEVAR2,?attribute-6) ==> {(contraryAttributeWRT ?attribute-2 ?attribute-6 ?predicate-13)}.

compound(group*,control*), cop(group*,is*), nmod:in(group*,?experimenting-9), nsubj(group*,?collection-2), case(?experimenting-9,in*), sumo(?TYPEVAR0,?experimenting-9), isSubclass(?TYPEVAR0,Experimenting), isSubclass(?TYPEVAR1,Collection), sumo(?TYPEVAR1,?collection-2) ==> {(controlGroup ?collection-2 ?experimenting-9)}.

cop(successful*,is*), nmod:in(successful*,?experimenting-7), case(?experimenting-7,in*), nsubj(successful*,?process-2), isSubclass(?TYPEVAR0,Experimenting), sumo(?TYPEVAR1,?process-2), sumo(?TYPEVAR0,?experimenting-7), isSubclass(?TYPEVAR1,Process) ==> {(conversionEvent ?experimenting-7 ?process-2)}.

nsubj(charges*,?agent-2), dobj(charges*,?measure-6), case(?kind-11,for*), nmod:in(charges*,corkage*), case(corkage*,in*), nmod:for(charges*,?kind-11), isSubclass(?TYPEVAR2,Object), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR2,?kind-11), sumo(?TYPEVAR1,?measure-6) ==> {(corkageFee ?measure-6 ?kind-11 ?agent-2)}.

; amod(human*,other*), conj:and(human*,human*), cc(human*,and*), cop(cousins*,are*), nsubj(cousins*,human*), nsubj(cousins*,human*) ==> ; {(cousin null null)}.

nsubj(created*,?agent-2), dobj(created*,?entity-5), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?entity-5), isSubclass(?TYPEVAR1,Entity) ==> {(creator ?agent-2 ?entity-5)}.

nmod:on(works*,?entity-7), case(?entity-7,on*), nsubj(works*,?team-3), sumo(?TYPEVAR0,?entity-7), isSubclass(?TYPEVAR1,CrossFunctionalTeam), sumo(?TYPEVAR1,?team-3), isSubclass(?TYPEVAR0,Entity) ==> {(crossFunctionalTeamFocus ?entity-7 ?team-3)}.

case(?Business-12,at*), nsubjpass(expected*,?human-2), xcomp(expected*,spend*), auxpass(expected*,is*), nmod:at(spend*,?Business-12), mark(spend*,to*), dobj(spend*,?measure-9), isSubclass(?TYPEVAR0,Business), sumo(?TYPEVAR2,?measure-9), isSubclass(?TYPEVAR2,CurrencyMeasure), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?Business-12), sumo(?TYPEVAR1,?human-2) ==> {(customerValue ?human-2 ?Business-12 ?measure-9)}.

nsubjpass(processed*,?data-3), case(?process-9,by*), auxpass(processed*,is*), nmod:agent(processed*,?process-9), isSubclass(?TYPEVAR0,DigitalData), sumo(?TYPEVAR1,?process-9), sumo(?TYPEVAR0,?data-3), isSubclass(?TYPEVAR1,ComputerProcess) ==> {(dataProcessed ?process-9 ?data-3)}.

case(?point-11,at*), nmod:at(used*,?point-11), case(?agent-7,by*), nmod:agent(used*,?agent-7), nsubjpass(used*,?object-2), auxpass(used*,is*), isSubclass(?TYPEVAR0,TimePoint), sumo(?TYPEVAR2,?object-2), isSubclass(?TYPEVAR2,Object), sumo(?TYPEVAR0,?point-11), sumo(?TYPEVAR1,?agent-7), isSubclass(?TYPEVAR1,Agent) ==> {(dateUsed ?object-2 ?point-11 ?agent-7)}.

case(?organism-9,of*), nmod:of(daughter*,?organism-9), cop(daughter*,is*), nsubj(daughter*,?organism-2), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?organism-9), sumo(?TYPEVAR1,?organism-2), isSubclass(?TYPEVAR1,Organism) ==> {(daughter ?organism-2 ?organism-9)}.

nmod:of(height*,?kind-7), case(?kind-7,of*), nsubj(?measure-13,height*), nsubj(height*,maximum*), amod(height*,expected*), cop(?measure-13,is*), sumo(?TYPEVAR1,?measure-13), isSubclass(?TYPEVAR1,LengthMeasure), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?kind-7) ==> {(defaultMaximumHeight ?kind-7 ?measure-13)}.

cop(?measure-13,is*), nmod:of(length*,?kind-7), nsubj(?measure-13,length*), case(?kind-7,of*), nsubj(length*,maximum*), amod(length*,expected*), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-7), sumo(?TYPEVAR0,?measure-13), isSubclass(?TYPEVAR0,LengthMeasure) ==> {(defaultMaximumLength ?kind-7 ?measure-13)}.

amod(value*,expected*), cop(?quantity-12,is*), nmod:of(value*,?kind-7), nsubj(?quantity-12,value*), nsubj(value*,maximum*), case(?kind-7,of*), isSubclass(?TYPEVAR0,Quantity), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?quantity-12), sumo(?TYPEVAR1,?kind-7) ==> {(defaultMaximumMeasure ?kind-7 ?quantity-12)}.

cop(?measure-13,is*), nsubj(?measure-13,radium*), amod(radium*,expected*), nmod:of(radium*,?kind-7), case(?kind-7,of*), nsubj(radium*,maximum*), sumo(?TYPEVAR1,?kind-7), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR0,?measure-13) ==> {(defaultMaximumSphereRadius ?kind-7 ?measure-13)}.

nmod:of(width*,?kind-7), nsubj(width*,maximum*), cop(?measure-13,is*), nsubj(?measure-13,width*), amod(width*,expected*), case(?kind-7,of*), sumo(?TYPEVAR0,?kind-7), isSubclass(?TYPEVAR1,LengthMeasure), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?measure-13) ==> {(defaultMaximumWidth ?kind-7 ?measure-13)}.

cop(?quantity-11,is*), amod(value*,expected*), case(?kind-6,of*), nmod:of(value*,?kind-6), nsubj(?quantity-11,value*), sumo(?TYPEVAR1,?kind-6), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?quantity-11), isSubclass(?TYPEVAR0,Quantity) ==> {(defaultMeasure ?kind-6 ?quantity-11)}.

nsubj(height*,minimum*), cop(?measure-13,is*), nsubj(?measure-13,height*), nmod:of(height*,?kind-7), case(?kind-7,of*), amod(height*,expected*), sumo(?TYPEVAR0,?measure-13), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR1,?kind-7) ==> {(defaultMinimumHeight ?kind-7 ?measure-13)}.

case(?kind-7,of*), nmod:of(length*,?kind-7), cop(?measure-13,is*), amod(length*,expected*), nsubj(?measure-13,length*), nsubj(length*,minimum*), isSubclass(?TYPEVAR1,LengthMeasure), sumo(?TYPEVAR0,?kind-7), sumo(?TYPEVAR1,?measure-13), isSubclass(?TYPEVAR0,Object) ==> {(defaultMinimumLength ?kind-7 ?measure-13)}.

case(?kind-7,of*), cop(?quantity-12,is*), nsubj(value*,minimum*), nmod:of(value*,?kind-7), nsubj(?quantity-12,value*), amod(value*,expected*), sumo(?TYPEVAR1,?quantity-12), sumo(?TYPEVAR0,?kind-7), isSubclass(?TYPEVAR1,Quantity), isSubclass(?TYPEVAR0,Object) ==> {(defaultMinimumMeasure ?kind-7 ?quantity-12)}.

dep(minimum*,radius*), cop(?measure-13,is*), amod(radius*,expected*), nsubj(?measure-13,minimum*), case(?kind-7,of*), nmod:of(radius*,?kind-7), sumo(?TYPEVAR0,?measure-13), sumo(?TYPEVAR1,?kind-7), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR1,Object) ==> {(defaultMinimumSphereRadius ?kind-7 ?measure-13)}.

nmod:of(width*,?kind-7), case(?kind-7,of*), nsubj(?measure-13,width*), cop(?measure-13,is*), nsubj(width*,minimum*), amod(width*,expected*), sumo(?TYPEVAR0,?kind-7), isSubclass(?TYPEVAR1,LengthMeasure), sumo(?TYPEVAR1,?measure-13), isSubclass(?TYPEVAR0,Object) ==> {(defaultMinimumWidth ?kind-7 ?measure-13)}.

nmod:in(defendant*,?action-10), case(?action-10,in*), nsubj(defendant*,?agent-3), cop(defendant*,is*), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR0,LegalAction), sumo(?TYPEVAR0,?action-10), isSubclass(?TYPEVAR1,CognitiveAgent) ==> {(defendant ?action-10 ?agent-3)}.

nsubj(area*,?area-3), cop(area*,is*), nmod:of(area*,?agent-10), compound(area*,delivery*), case(?agent-10,of*), sumo(?TYPEVAR0,?area-3), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?agent-10), isSubclass(?TYPEVAR1,Agent) ==> {(deliveryRegion ?agent-10 ?area-3)}.

case(?area-11,of*), cop(dependent*,is*), nsubj(dependent*,?area-3), nmod:of(dependent*,?area-11), sumo(?TYPEVAR0,?area-11), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?area-3) ==> {(dependentGeopoliticalArea ?area-3 ?area-11)}.

case(?physical-9,to*), nmod:from(depth*,?physical-5), case(?physical-5,from*), cop(?entity-12,is*), nsubj(?entity-12,depth*), isSubclass(?TYPEVAR2,Entity), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR1,?physical-5), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR2,?entity-12), sumo(?TYPEVAR0,?physical-9) ==> {(depth ?physical-5 ?physical-9 ?entity-12)}.

nsubj(describes*,?formula-2), dobj(describes*,?object-5), sumo(?TYPEVAR0,?formula-2), isSubclass(?TYPEVAR0,Formula), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-5) ==> {(describes ?formula-2 ?object-5)}.

ccomp(has*,?attribute-10), nsubj(has*,?system-3), nsubj(?attribute-10,pattern*), sumo(?TYPEVAR0,?attribute-10), sumo(?TYPEVAR1,?system-3), isSubclass(?TYPEVAR1,RealtimeSystem), isSubclass(?TYPEVAR0,DesignPatternAttribute) ==> {(designPattern ?system-3 ?attribute-10)}.

dobj(has*,?TelecomNumber-6), nsubj(has*,?TelephonyDevice-2), compound(?TelecomNumber-6,number*), isSubclass(?TYPEVAR1,TelephonyDevice), sumo(?TYPEVAR1,?TelephonyDevice-2), isSubclass(?TYPEVAR0,TelecomNumber), sumo(?TYPEVAR0,?TelecomNumber-6) ==> {(deviceTelecomNumber ?TelecomNumber-6 ?TelephonyDevice-2)}.

dobj(directed*,?picture-6), nsubj(directed*,?human-2), isSubclass(?TYPEVAR0,MotionPicture), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR1,?human-2), sumo(?TYPEVAR0,?picture-6) ==> {(directed ?human-2 ?picture-6)}.

dobj(discography*,?discography-7), dobj(has*,discography*), nsubj(has*,?agent-3), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR0,Discography), sumo(?TYPEVAR0,?discography-7), sumo(?TYPEVAR1,?agent-3) ==> {(discography ?agent-3 ?discography-7)}.

nsubj(discovers*,?agent-2), dobj(discovers*,?object-5), sumo(?TYPEVAR1,?object-5), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?agent-2) ==> {(discovers ?agent-2 ?object-5)}.

cc(reads*,or*), dobj(writes*,?kind-9), conj:or(reads*,writes*), nsubj(reads*,?kind-2), nsubj(writes*,?kind-2), isSubclass(?TYPEVAR1,DiskDrive), sumo(?TYPEVAR0,?kind-9), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR0,ComputerDisk) ==> {(diskTypeForDrive ?kind-9 ?kind-2)}.

nsubj(dislikes*,?agent-3), dobj(dislikes*,?object-6), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-6), sumo(?TYPEVAR0,?agent-3), isSubclass(?TYPEVAR0,CognitiveAgent) ==> {(dislikes ?agent-3 ?object-6)}.

nmod:on(displayed*,?ComputerDisplay-7), case(?ComputerDisplay-7,on*), nsubjpass(displayed*,?Image-2), auxpass(displayed*,is*), sumo(?TYPEVAR0,?ComputerDisplay-7), isSubclass(?TYPEVAR1,Image), isSubclass(?TYPEVAR0,ComputerDisplay), sumo(?TYPEVAR1,?Image-2) ==> {(displayedUpon ?Image-2 ?ComputerDisplay-7)}.

nmod:of(title*,?entity-9), case(?entity-9,of*), case(?language-12,in*), nsubj(title*,?string-3), cop(title*,is*), sumo(?TYPEVAR1,?language-12), isSubclass(?TYPEVAR2,SymbolicString), sumo(?TYPEVAR2,?string-3), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Language), sumo(?TYPEVAR0,?entity-9) ==> {(displayTitle ?string-3 ?entity-9 ?language-12)}.

nsubj(?quantity-9,distance*), case(?transitway-5,of*), cop(?quantity-9,is*), nmod:of(distance*,?transitway-5), sumo(?TYPEVAR1,?transitway-5), isSubclass(?TYPEVAR1,Transitway), sumo(?TYPEVAR0,?quantity-9), isSubclass(?TYPEVAR0,ConstantQuantity) ==> {(distanceOnPath ?quantity-9 ?transitway-5)}.

nsubj(requires*,?agent-2), acl(customers*,wear*), mark(wear*,to*), dobj(wear*,?ambience-8), dobj(requires*,customers*), sumo(?TYPEVAR1,?ambience-8), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,AmbienceAttribute) ==> {(dressCode ?ambience-8 ?agent-2)}.

; nmod:above(quantity*,ground*), case(ground*,above*), amod(quantity*,physical*), cop(quantity*,is*), nsubj(quantity*,object*) ==> ; {(earthAltitude null null)}.

nsubj(facilitates*,?WebSite-2), dobj(facilitates*,?transaction-6), sumo(?TYPEVAR0,?WebSite-2), isSubclass(?TYPEVAR0,WebSite), sumo(?TYPEVAR1,?transaction-6), isSubclass(?TYPEVAR1,FinancialTransaction) ==> {(eCommerceSite ?transaction-6 ?WebSite-2)}.

xcomp(tends*,?state-8), mark(?state-8,to*), cop(?state-8,be*), nsubj(tends*,?agent-2), isSubclass(?TYPEVAR0,EmotionalState), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?state-8) ==> {(emotionTendency ?agent-2 ?state-8)}.

nmod:of(displacement*,?IntermittentCombustionEngine-5), case(?IntermittentCombustionEngine-5,of*), nsubj(?measure-9,displacement*), cop(?measure-9,is*), sumo(?TYPEVAR1,?measure-9), isSubclass(?TYPEVAR1,VolumeMeasure), isSubclass(?TYPEVAR0,IntermittentCombustionEngine), sumo(?TYPEVAR0,?IntermittentCombustionEngine-5) ==> {(engineDisplacement ?IntermittentCombustionEngine-5 ?measure-9)}.

compound(engineers*,?agent-2), nsubj(?artifact-5,engineers*), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR0,?agent-2), sumo(?TYPEVAR1,?artifact-5), isSubclass(?TYPEVAR1,Artifact) ==> {(engineers ?agent-2 ?artifact-5)}.

dobj(enjoys*,?kind-6), nsubj(enjoys*,?agent-3), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR0,IntentionalProcess), sumo(?TYPEVAR0,?kind-6), sumo(?TYPEVAR1,?agent-3) ==> {(enjoys ?agent-3 ?kind-6)}.

cop(attribute*,is*), nmod:of(attribute*,?program-11), nsubj(attribute*,?attribute-4), case(?program-11,of*), isSubclass(?TYPEVAR0,ComputerProgram), sumo(?TYPEVAR1,?attribute-4), isSubclass(?TYPEVAR1,EnvironmentSoftwareAttribute), sumo(?TYPEVAR0,?program-11) ==> {(environmentAttributes ?program-11 ?attribute-4)}.

amod(percent*,?real-2), nmod:of(percent*,people*), compound(percent*,?number-3), case(?area-10,in*), case(people*,of*), nmod:in(percent*,?area-10), nsubj(?group-14,percent*), cop(?group-14,are*), sumo(?TYPEVAR3,?group-14), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR0,?real-2), isSubclass(?TYPEVAR0,RealNumber), sumo(?TYPEVAR2,?area-10), isSubclass(?TYPEVAR3,EthnicGroup), sumo(?TYPEVAR1,?number-3), isSubclass(?TYPEVAR2,GeographicArea) ==> {(ethnicityPercentInRegion ?group-14 ?number-3 ?area-10)}.

; nmod:at(located*,2*), nsubj(located*,process*), cop(located*,is*), case(2*,at*) ==> ; {(eventLocated null null)}.

nmod:at(located*,?object-8), nsubj(located*,?process-2), cop(located*,is*), advmod(located*,partly*), case(?object-8,at*), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-8), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR1,?process-2) ==> {(eventPartlyLocated ?process-2 ?object-8)}.

dobj(argument*,?integer-11), xcomp(values*,argument*), amod(values*,?other-5), case(?relation-14,of*), aux(values*,can*), expl(values*,There*), cop(values*,be*), compound(values*,?integer-6), mark(argument*,to*), sumo(?TYPEVAR2,?relation-14), sumo(?TYPEVAR3,?integer-6), sumo(?TYPEVAR0,?integer-11), sumo(?TYPEVAR1,?other-5), isSubclass(?TYPEVAR1,Integer), isSubclass(?TYPEVAR2,Relation), isSubclass(?TYPEVAR3,Integer), isSubclass(?TYPEVAR0,Integer) ==> {(exactCardinality ?relation-14 ?integer-11 ?other-5)}.

dobj(causes*,?process-5), nsubj(causes*,?experimenting-2), sumo(?TYPEVAR0,?process-5), sumo(?TYPEVAR1,?experimenting-2), isSubclass(?TYPEVAR0,Process), isSubclass(?TYPEVAR1,Experimenting) ==> {(exclusiveEvent ?experimenting-2 ?process-5)}.

cop(attributes*,are*), det:predet(attributes*,all*), case(?kind-10,of*), nsubj(attributes*,?attribute-3), nmod:of(attributes*,?kind-10), sumo(?TYPEVAR0,?kind-10), sumo(?TYPEVAR1,?attribute-3), isSubclass(?TYPEVAR0,Attribute), isSubclass(?TYPEVAR1,Attribute) ==> {(exhaustiveAttribute ?kind-10 ?attribute-3)}.

mark(receive*,to*), nsubj(expects*,?agent-3), xcomp(expects*,receive*), dobj(receive*,?entity-9), compound(?entity-9,degree*), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR0,?agent-3), sumo(?TYPEVAR1,?entity-9), isSubclass(?TYPEVAR0,CognitiveAgent) ==> {(expectedDegree ?agent-3 ?entity-9)}.

case(?year-8,in*), xcomp(expects*,graduate*), nmod:in(graduate*,?year-8), nsubj(expects*,?student-2), mark(graduate*,to*), sumo(?TYPEVAR0,?year-8), isSubclass(?TYPEVAR1,Student), sumo(?TYPEVAR1,?student-2), isSubclass(?TYPEVAR0,Year) ==> {(expectedYearOfGraduation ?student-2 ?year-8)}.

; nsubj(true*,formula*), aux(true*,will*), ccomp(expects*,true*), amod(agent*,cognitive*), cop(true*,be*), nsubj(expects*,agent*) ==> ; {(expects null null)}.

; nsubj(?process-9,control*), nmod:in(?process-9,experiment*), case(experiment*,in*), cop(?process-9,is*), sumo(?TYPEVAR0,?process-9), isSubclass(?TYPEVAR0,Process) ==> {(experimentalControlProcess null ?process-9)}.

case(?experimenting-8,in*), nsubj(subject*,?human-2), nmod:in(subject*,?experimenting-8), cop(subject*,is*), isSubclass(?TYPEVAR0,Experimenting), sumo(?TYPEVAR0,?experimenting-8), sumo(?TYPEVAR1,?human-2), isSubclass(?TYPEVAR1,Human) ==> {(experimentalSubject ?experimenting-8 ?human-2)}.

cop(processes*,are*), nmod:in(processes*,?experimenting-8), nsubj(processes*,?collection-2), case(?experimenting-8,in*), isSubclass(?TYPEVAR0,Experimenting), sumo(?TYPEVAR1,?collection-2), isSubclass(?TYPEVAR1,Collection), sumo(?TYPEVAR0,?experimenting-8) ==> {(experimentalTreatmentCollection ?collection-2 ?experimenting-8)}.

nmod:in(process*,?experimenting-8), case(?experimenting-8,in*), cop(process*,is*), nsubj(process*,?process-2), isSubclass(?TYPEVAR1,Process), isSubclass(?TYPEVAR0,Experimenting), sumo(?TYPEVAR0,?experimenting-8), sumo(?TYPEVAR1,?process-2) ==> {(experimentalVariableProcess ?experimenting-8 ?process-2)}.

nmod:in(experimenter*,?experimenting-9), case(?experimenting-9,in*), cop(experimenter*,is*), nsubj(experimenter*,?agent-3), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR0,?experimenting-9), isSubclass(?TYPEVAR0,Experimenting) ==> {(experimenter ?experimenting-9 ?agent-3)}.

nsubj(?Identifier-8,ID*), nmod:of(ID*,?experimenting-5), cop(?Identifier-8,is*), case(?experimenting-5,of*), sumo(?TYPEVAR1,?experimenting-5), isSubclass(?TYPEVAR0,Identifier), sumo(?TYPEVAR0,?Identifier-8), isSubclass(?TYPEVAR1,Experimenting) ==> {(experimentID ?Identifier-8 ?experimenting-5)}.

dep(update*,?content-2), nmod:of(update*,?experimenting-10), nsubj(update*,?bearing-3), cop(update*,is*), case(?experimenting-10,of*), isSubclass(?TYPEVAR1,Experimenting), sumo(?TYPEVAR2,?bearing-3), sumo(?TYPEVAR0,?content-2), isSubclass(?TYPEVAR0,ContentBearingPhysical), sumo(?TYPEVAR1,?experimenting-10), isSubclass(?TYPEVAR2,ContentBearingPhysical) ==> {(experimentUpdate ?content-2 ?experimenting-10)}.

nsubj(URL*,?string-3), dobj(depicting*,?entity-9), cop(URL*,is*), acl(URL*,depicting*), sumo(?TYPEVAR0,?string-3), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?entity-9), isSubclass(?TYPEVAR1,Entity) ==> {(externalImage ?entity-9 ?string-3)}.

case(?user-12,of*), cop(friend*,is*), compound(friend*,facebook*), nmod:of(friend*,?user-12), nsubj(friend*,?user-3), sumo(?TYPEVAR0,?user-12), isSubclass(?TYPEVAR0,FacebookUser), isSubclass(?TYPEVAR1,FacebookUser), sumo(?TYPEVAR1,?user-3) ==> {(facebookFriend ?user-3 ?user-12)}.

nsubj(provides*,?agent-2), dobj(provides*,?object-5), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-5), isSubclass(?TYPEVAR0,Agent) ==> {(facility ?agent-2 ?object-5)}.

nmod:poss(daughter*,brother*), nsubj(daughter*,?organism-2), case(?entity-12,of*), cop(daughter*,is*), nmod:poss(brother*,father*), nmod:of(daughter*,?entity-12), sumo(?TYPEVAR1,?entity-12), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?organism-2), isSubclass(?TYPEVAR1,Entity) ==> {(fathersBrothersDaughter ?organism-2 ?entity-12)}.

nsubj(son*,?organism-2), cop(son*,is*), nmod:poss(brother*,father*), nmod:of(son*,?entity-12), case(?entity-12,of*), nmod:poss(son*,brother*), sumo(?TYPEVAR1,?entity-12), sumo(?TYPEVAR0,?organism-2), isSubclass(?TYPEVAR0,Organism), isSubclass(?TYPEVAR1,Entity) ==> {(fathersBrothersSon ?organism-2 ?entity-12)}.

nsubj(wife*,?organism-2), nmod:poss(wife*,brother*), nmod:of(wife*,?entity-12), case(?entity-12,of*), cop(wife*,is*), nmod:poss(brother*,father*), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR1,?entity-12), sumo(?TYPEVAR0,?organism-2) ==> {(fathersBrothersWife ?organism-2 ?entity-12)}.

cop(daughter*,is*), nmod:poss(daughter*,sister*), nmod:of(daughter*,?entity-12), nmod:poss(daughter*,father*), nsubj(daughter*,?organism-2), case(?entity-12,of*), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR0,?entity-12), sumo(?TYPEVAR1,?organism-2) ==> {(fathersSistersDaughter ?organism-2 ?entity-12)}.

nmod:of(husband*,?entity-12), cop(husband*,is*), nmod:poss(husband*,father*), case(?entity-12,of*), nsubj(husband*,?organism-2), nmod:poss(husband*,sister*), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR0,?entity-12), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?organism-2) ==> {(fathersSistersHusband ?organism-2 ?entity-12)}.

cop(son*,is*), nmod:poss(son*,sister*), case(?entity-12,of*), nsubj(son*,?organism-2), nmod:poss(sister*,father*), nmod:of(son*,?entity-12), sumo(?TYPEVAR1,?organism-2), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR0,?entity-12) ==> {(fathersSistersSon ?organism-2 ?entity-12)}.

nmod:of(number*,?agent-6), nsubj(?TelecomNumber-9,number*), compound(number*,fax*), case(?agent-6,of*), cop(?TelecomNumber-9,is*), sumo(?TYPEVAR1,?TelecomNumber-9), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,TelecomNumber), sumo(?TYPEVAR0,?agent-6) ==> {(faxNumber ?TelecomNumber-9 ?agent-6)}.

nsubj(fears*,?agent-3), dobj(fears*,?entity-6), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-3), sumo(?TYPEVAR1,?entity-6), isSubclass(?TYPEVAR1,Entity) ==> {(fears ?agent-3 ?entity-6)}.

nmod:of(filename*,?data-6), case(?data-6,of*), cop(?string-10,is*), nsubj(?string-10,filename*), isSubclass(?TYPEVAR0,DigitalData), sumo(?TYPEVAR1,?string-10), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR0,?data-6) ==> {(filename ?string-10 ?data-6)}.

dep(report*,is*), nsubj(is*,?the-8), case(?experimenting-6,for*), amod(report*,final*), nmod:for(report*,?experimenting-6), isSubclass(?TYPEVAR0,ContentBearingPhysical), sumo(?TYPEVAR0,?the-8), isSubclass(?TYPEVAR1,Experimenting), sumo(?TYPEVAR1,?experimenting-6) ==> {(finalExperimentReport ?the-8 ?experimenting-6)}.

amod(price*,final*), case(?stock-6,of*), nmod:of(price*,?stock-6), cop(?measure-10,is*), nsubj(?measure-10,price*), isSubclass(?TYPEVAR0,Stock), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR0,?stock-6), sumo(?TYPEVAR1,?measure-10) ==> {(finalPrice ?stock-6 ?measure-10)}.

ccomp(has*,?object-7), nsubj(has*,?agent-2), nsubj(?object-7,asset*), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?object-7), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR0,Object) ==> {(financialAsset ?agent-2 ?object-7)}.

nmod:on(buyers*,?WebSite-9), cop(buyers*,are*), nmod:during(buyers*,?time-12), case(?time-12,during*), amod(buyers*,first*), nsubj(buyers*,?collection-2), compound(buyers*,time*), case(?WebSite-9,on*), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR2,?collection-2), isSubclass(?TYPEVAR0,WebSite), sumo(?TYPEVAR0,?WebSite-9), sumo(?TYPEVAR1,?time-12), isSubclass(?TYPEVAR2,Collection) ==> {(firstTimeBuyers ?time-12 ?WebSite-9 ?collection-2)}.

compound(sellers*,time*), case(?WebSite-9,on*), case(?time-12,during*), nsubj(sellers*,?collection-2), nmod:on(sellers*,?WebSite-9), amod(sellers*,first*), cop(sellers*,are*), nmod:during(sellers*,?time-12), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR1,?time-12), isSubclass(?TYPEVAR0,WebSite), sumo(?TYPEVAR2,?collection-2), isSubclass(?TYPEVAR2,Collection), sumo(?TYPEVAR0,?WebSite-9) ==> {(firstTimeSellers ?time-12 ?WebSite-9 ?collection-2)}.

; dobj(has*,fleet*), nmod:of(fleet*,vehicles*), nsubj(has*,agent*), case(vehicles*,of*), compound(vehicles*,integer*) ==> ; {(fleetSize null null)}.

cop(floor*,is*), nsubj(floor*,?string-3), nmod:of(floor*,?PostalPlace-9), case(?PostalPlace-9,of*), sumo(?TYPEVAR0,?string-3), isSubclass(?TYPEVAR1,PostalPlace), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?PostalPlace-9) ==> {(floorCode ?string-3 ?PostalPlace-9)}.

dobj(follows*,?user-10), nsubj(follows*,?user-4), isSubclass(?TYPEVAR1,SocialNetworkingUser), sumo(?TYPEVAR0,?user-10), sumo(?TYPEVAR1,?user-4), isSubclass(?TYPEVAR0,SocialNetworkingUser) ==> {(follows ?user-4 ?user-10)}.

case(?language-12,in*), nsubj(format*,?string-3), case(?entity-9,for*), cop(format*,is*), nmod:for(format*,?entity-9), sumo(?TYPEVAR0,?language-12), isSubclass(?TYPEVAR0,Language), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR2,?entity-9), isSubclass(?TYPEVAR2,Entity), sumo(?TYPEVAR1,?string-3) ==> {(format ?language-12 ?entity-9 ?string-3)}.

aux(strategy*,has*), compound(strategy*,adaptation*), nsubj(strategy*,?system-3), dobj(strategy*,?form-8), sumo(?TYPEVAR0,?system-3), isSubclass(?TYPEVAR0,RealtimeSystem), sumo(?TYPEVAR1,?form-8), isSubclass(?TYPEVAR1,FormOfAdaptationAttribute) ==> {(formOfAdaptation ?system-3 ?form-8)}.

nmod:on(founded*,?day-7), auxpass(founded*,was*), nsubjpass(founded*,?organization-2), case(?day-7,on*), sumo(?TYPEVAR1,?organization-2), sumo(?TYPEVAR0,?day-7), isSubclass(?TYPEVAR1,Organization), isSubclass(?TYPEVAR0,Day) ==> {(foundingdate ?organization-2 ?day-7)}.

dobj(renting*,?kind-9), acl(customers*,renting*), nmod:for(free*,customers*), nsubj(free*,?entity-2), cop(free*,is*), case(customers*,for*), isSubclass(?TYPEVAR0,HotelFunctionRoom), sumo(?TYPEVAR0,?kind-9), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR1,Entity) ==> {(freeFunctionRoomAmenity ?kind-9 ?entity-2)}.

cop(free*,is*), case(?agent-9,for*), case(?entity-4,of*), nsubj(free*,Use*), nmod:of(Use*,?entity-4), nmod:for(free*,?agent-9), sumo(?TYPEVAR1,?entity-4), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR0,?agent-9) ==> {(freePropertyAmenity ?agent-9 ?entity-4)}.

cop(free*,is*), nsubj(free*,Use*), case(?entity-4,of*), nmod:for(free*,?kind-9), case(?kind-9,for*), nmod:of(Use*,?entity-4), sumo(?TYPEVAR0,?entity-4), sumo(?TYPEVAR1,?kind-9), isSubclass(?TYPEVAR1,HotelUnit), isSubclass(?TYPEVAR0,Entity) ==> {(freeRoomAmenity ?kind-9 ?entity-4)}.

dobj(fulfills*,?reservation-5), nsubj(fulfills*,?agent-2), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Reservation), sumo(?TYPEVAR0,?reservation-5), sumo(?TYPEVAR1,?agent-2) ==> {(fulfillingEntity ?agent-2 ?reservation-5)}.

nmod:of(name*,?entity-7), case(?entity-7,of*), nsubj(?string-11,name*), compound(name*,index*), cop(?string-11,is*), compound(name*,order*), sumo(?TYPEVAR1,?string-11), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR0,?entity-7), isSubclass(?TYPEVAR0,Entity) ==> {(fullNameIndexOrder ?string-11 ?entity-7)}.

nsubj(free*,Use*), case(?kind-11,for*), nmod:for(free*,?kind-11), cop(free*,is*), case(?kind-4,of*), nmod:of(Use*,?kind-4), isSubclass(?TYPEVAR0,HotelFunctionRoom), sumo(?TYPEVAR0,?kind-11), sumo(?TYPEVAR1,?kind-4), isSubclass(?TYPEVAR1,Physical) ==> {(functionRoomAmenity ?kind-11 ?kind-4)}.

cop(?man-8,is*), case(?human-5,of*), nmod:of(grandfather*,?human-5), nsubj(?man-8,grandfather*), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?man-8), sumo(?TYPEVAR1,?human-5), isSubclass(?TYPEVAR0,Man) ==> {(grandfather ?human-5 ?man-8)}.

nsubj(?woman-8,grandmother*), nmod:of(grandmother*,?human-5), case(?human-5,of*), cop(?woman-8,is*), isSubclass(?TYPEVAR0,Woman), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR1,?human-5), sumo(?TYPEVAR0,?woman-8) ==> {(grandmother ?human-5 ?woman-8)}.

nmod:in(unit*,?graph-10), nsubj(unit*,?unit-2), case(?graph-10,in*), cop(unit*,is*), sumo(?TYPEVAR1,?unit-2), sumo(?TYPEVAR0,?graph-10), isSubclass(?TYPEVAR0,Graph), isSubclass(?TYPEVAR1,UnitOfMeasure) ==> {(graphMeasure ?graph-10 ?unit-2)}.

case(everything*,of*), case(?agent-8,by*), nmod:during(purchased*,?TimePeriod-14), case(?organization-11,for*), acl(everything*,purchased*), cop(?measure-18,is*), nsubj(?measure-18,value*), nmod:by(purchased*,?agent-8), case(?TimePeriod-14,during*), nmod:of(value*,everything*), sumo(?TYPEVAR3,?measure-18), sumo(?TYPEVAR1,?TimePeriod-14), isSubclass(?TYPEVAR1,TimePeriod), sumo(?TYPEVAR0,?agent-8), isSubclass(?TYPEVAR3,CurrencyMeasure), isSubclass(?TYPEVAR2,Organization), sumo(?TYPEVAR2,?organization-11), isSubclass(?TYPEVAR0,Agent) ==> {(grossMerchandiseBoughtInPeriod ?agent-8 ?organization-11 ?measure-18 ?TimePeriod-14)}.

nmod:of(instances*,?entity-14), case(?entity-14,of*), nmod:for(title*,instances*), cop(title*,is*), case(instances*,for*), nsubj(title*,?string-3), nmod:in(title*,?language-9), case(?language-9,in*), isSubclass(?TYPEVAR1,SymbolicString), isSubclass(?TYPEVAR2,Language), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR2,?language-9), sumo(?TYPEVAR0,?entity-14) ==> {(groupingTitle ?string-3 ?entity-14 ?language-9)}.

nsubj(member*,?human-2), cop(member*,is*), nmod:of(member*,?group-8), case(?group-8,of*), isSubclass(?TYPEVAR1,GroupOfPeople), sumo(?TYPEVAR0,?human-2), sumo(?TYPEVAR1,?group-8), isSubclass(?TYPEVAR0,Human) ==> {(groupMember ?human-2 ?group-8)}.

cop(guest*,is*), nsubj(guest*,?agent-3), nmod:at(guest*,?agent-11), case(?agent-11,at*), sumo(?TYPEVAR1,?agent-11), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-3) ==> {(guest ?agent-3 ?agent-11)}.

nsubj(covers*,?CoveringGraphicalWindow-2), dobj(covers*,?GUIElement-5), isSubclass(?TYPEVAR1,GUIElement), isSubclass(?TYPEVAR0,CoveringGraphicalWindow), sumo(?TYPEVAR1,?GUIElement-5), sumo(?TYPEVAR0,?CoveringGraphicalWindow-2) ==> {(guiElementCovered ?CoveringGraphicalWindow-2 ?GUIElement-5)}.

auxpass(covered*,is*), case(?GUIElement-8,by*), nmod:agent(covered*,?GUIElement-8), nsubjpass(covered*,?GUIElement-2), isSubclass(?TYPEVAR0,GUIElement), isSubclass(?TYPEVAR1,GUIElement), sumo(?TYPEVAR0,?GUIElement-8), sumo(?TYPEVAR1,?GUIElement-2) ==> {(guiElementCoveredBy ?GUIElement-2 ?GUIElement-8)}.

nsubj(covers*,?PartiallyCoveringGraphicalWindow-2), advmod(covers*,partially*), dobj(covers*,?GUIElement-6), isSubclass(?TYPEVAR0,PartiallyCoveringGraphicalWindow), isSubclass(?TYPEVAR1,GUIElement), sumo(?TYPEVAR1,?GUIElement-6), sumo(?TYPEVAR0,?PartiallyCoveringGraphicalWindow-2) ==> {(guiElementPartiallyCovered ?PartiallyCoveringGraphicalWindow-2 ?GUIElement-6)}.

advmod(covered*,partially*), nsubjpass(covered*,?GUIElement-2), nmod:agent(covered*,?GUIElement-9), case(?GUIElement-9,by*), auxpass(covered*,is*), isSubclass(?TYPEVAR0,GUIElement), isSubclass(?TYPEVAR1,GUIElement), sumo(?TYPEVAR0,?GUIElement-2), sumo(?TYPEVAR1,?GUIElement-9) ==> {(guiElementPartiallyCoveredBy ?GUIElement-2 ?GUIElement-9)}.

nsubj(uncovers*,?UncoveringGraphicalWindow-2), dobj(uncovers*,?GUIElement-5), sumo(?TYPEVAR1,?GUIElement-5), isSubclass(?TYPEVAR1,GUIElement), sumo(?TYPEVAR0,?UncoveringGraphicalWindow-2), isSubclass(?TYPEVAR0,UncoveringGraphicalWindow) ==> {(guiElementUncovered ?UncoveringGraphicalWindow-2 ?GUIElement-5)}.

dobj(inhabits*,?area-8), nsubj(inhabits*,?kind-2), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?area-8), isSubclass(?TYPEVAR1,Organism), isSubclass(?TYPEVAR0,GeographicArea) ==> {(habitatOfOrganism ?kind-2 ?area-8)}.

cop(half*,is*), nmod:of(half*,?entity-7), case(?entity-7,of*), nsubj(half*,?object-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?entity-7), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?object-2) ==> {(half ?object-2 ?entity-7)}.

cop(type*,is*), nsubj(type*,?string-3), case(?computer-9,of*), nmod:of(type*,?computer-9), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?computer-9), sumo(?TYPEVAR0,?string-3), isSubclass(?TYPEVAR1,Computer) ==> {(hardwareType ?string-3 ?computer-9)}.

dobj(account*,?account-8), ccomp(has*,account*), nsubj(has*,?user-3), sumo(?TYPEVAR1,?user-3), sumo(?TYPEVAR0,?account-8), isSubclass(?TYPEVAR0,UserAccount), isSubclass(?TYPEVAR1,ComputerUser) ==> {(hasAccount ?user-3 ?account-8)}.

dobj(received*,?object-6), nsubj(received*,?agent-2), compound(?object-6,award*), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?object-6) ==> {(hasAward ?agent-2 ?object-6)}.

compound(?GUElementState-6,state*), dobj(has*,?GUElementState-6), nsubj(has*,?GUIElement-2), isSubclass(?TYPEVAR0,GUElementState), sumo(?TYPEVAR0,?GUElementState-6), sumo(?TYPEVAR1,?GUIElement-2), isSubclass(?TYPEVAR1,GUIElement) ==> {(hasGUEState ?GUIElement-2 ?GUElementState-6)}.

xcomp(has*,uniform*), dobj(uniform*,?kind-6), nsubj(has*,?group-2), isSubclass(?TYPEVAR0,UniformClothing), isSubclass(?TYPEVAR1,Group), sumo(?TYPEVAR1,?group-2), sumo(?TYPEVAR0,?kind-6) ==> {(hasUniform ?group-2 ?kind-6)}.

nsubj(has*,?kind-2), dep(parts*,?kind-10), nmod:of(parts*,type*), dobj(has*,parts*), case(type*,of*), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?kind-10), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR1,Object) ==> {(havePartTypes ?kind-2 ?kind-10)}.

nsubj(?area-10,headquarters*), nmod:of(headquarters*,?organization-5), case(?organization-5,of*), cop(?area-10,is*), case(?area-10,in*), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR0,?area-10), sumo(?TYPEVAR1,?organization-5), isSubclass(?TYPEVAR1,Organization) ==> {(headquartersOfOrganization ?organization-5 ?area-10)}.

compound(reports*,?program-3), compound(reports*,?computer-2), dobj(status*,?duration-9), nsubj(status*,reports*), isSubclass(?TYPEVAR1,ComputerProgram), sumo(?TYPEVAR1,?computer-2), sumo(?TYPEVAR2,?duration-9), isSubclass(?TYPEVAR0,ComputerProgram), sumo(?TYPEVAR0,?program-3), isSubclass(?TYPEVAR2,TimeDuration) ==> {(heartBeatRate ?program-3 ?duration-9)}.

nsubj(hinders*,?process-2), dobj(hinders*,?kind-5), sumo(?TYPEVAR0,?process-2), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR1,?kind-5), isSubclass(?TYPEVAR0,Process) ==> {(hinders ?process-2 ?kind-5)}.

nsubj(hinder*,Instances*), nmod:of(Instances*,?kind-4), nmod:of(instances*,?kind-11), case(?kind-11,of*), dobj(hinder*,instances*), case(?kind-4,of*), isSubclass(?TYPEVAR0,Process), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR1,?kind-11), sumo(?TYPEVAR0,?kind-4) ==> {(hindersSubclass ?kind-4 ?kind-11)}.

cop(page*,is*), case(?WebSite-9,of*), compound(page*,home*), nmod:of(page*,?WebSite-9), nsubj(page*,?WebPage-2), isSubclass(?TYPEVAR0,WebSite), sumo(?TYPEVAR1,?WebPage-2), sumo(?TYPEVAR0,?WebSite-9), isSubclass(?TYPEVAR1,WebPage) ==> {(homePage ?WebPage-2 ?WebSite-9)}.

case(?human-9,of*), nmod:of(phone*,?human-9), compound(phone*,home*), nsubj(phone*,?TelecomNumber-2), cop(phone*,is*), sumo(?TYPEVAR0,?human-9), sumo(?TYPEVAR1,?TelecomNumber-2), isSubclass(?TYPEVAR0,Human), isSubclass(?TYPEVAR1,TelecomNumber) ==> {(homePhoneNumber ?TelecomNumber-2 ?human-9)}.

; ccomp(hopes*,become*), amod(agent*,cognitive*), nsubj(hopes*,agent*), xcomp(become*,true*), aux(become*,will*), nsubj(become*,entity*) ==> ; {(hopes null null)}.

auxpass(hosted*,is*), nsubjpass(hosted*,?listing-3), case(?WebSite-8,on*), nmod:on(hosted*,?WebSite-8), isSubclass(?TYPEVAR0,WebListing), isSubclass(?TYPEVAR1,WebSite), sumo(?TYPEVAR0,?listing-3), sumo(?TYPEVAR1,?WebSite-8) ==> {(hostedOn ?listing-3 ?WebSite-8)}.

cop(?status-9,is*), case(?computer-5,of*), nsubj(?status-9,status*), nmod:of(status*,?computer-5), sumo(?TYPEVAR0,?status-9), isSubclass(?TYPEVAR0,ComputerStatus), sumo(?TYPEVAR1,?computer-5), isSubclass(?TYPEVAR1,Computer) ==> {(hostStatus ?computer-5 ?status-9)}.

auxpass(called*,is*), xcomp(called*,?string-7), nsubjpass(called*,?human-2), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?human-2), sumo(?TYPEVAR0,?string-7), isSubclass(?TYPEVAR1,Human) ==> {(humanName ?string-7 ?human-2)}.

nmod:of(husand*,?woman-8), case(?woman-8,of*), nsubj(husand*,?man-2), cop(husand*,is*), isSubclass(?TYPEVAR1,Man), sumo(?TYPEVAR0,?woman-8), isSubclass(?TYPEVAR0,Woman), sumo(?TYPEVAR1,?man-2) ==> {(husband ?man-2 ?woman-8)}.

nsubjpass(includes*,Meals*), nmod:in(includes*,?plan-12), case(type*,of*), nsubjpass(includes*,?attribute-6), case(?plan-12,in*), nmod:of(Meals*,type*), auxpass(includes*,are*), isSubclass(?TYPEVAR0,MealPlan), isSubclass(?TYPEVAR1,RelationalAttribute), sumo(?TYPEVAR1,?attribute-6), sumo(?TYPEVAR0,?plan-12) ==> {(includedMeal ?plan-12 ?attribute-6)}.

nsubj(?number-11,rate*), nmod:of(rate*,inflation*), cop(?number-11,is*), nmod:in(rate*,?nation-7), case(inflation*,of*), case(?nation-7,in*), sumo(?TYPEVAR0,?number-11), isSubclass(?TYPEVAR1,Nation), sumo(?TYPEVAR1,?nation-7), isSubclass(?TYPEVAR0,RealNumber) ==> {(inflationRateInCountry ?nation-7 ?number-11)}.

cop(ingredient*,is*), nmod:in(ingredient*,?kind-10), nsubj(ingredient*,?kind-2), case(?kind-10,in*), isSubclass(?TYPEVAR0,PreparedFood), sumo(?TYPEVAR0,?kind-10), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR1,Substance) ==> {(ingredient ?kind-2 ?kind-10)}.

nmod:in(used*,?kind-15), case(?kind-6,of*), nsubjpass(used*,?quantity-3), auxpass(used*,is*), case(?kind-15,in*), isSubclass(?TYPEVAR2,PhysicalQuantity), isSubclass(?TYPEVAR0,SelfConnectedObject), sumo(?TYPEVAR1,?kind-6), sumo(?TYPEVAR0,?kind-15), isSubclass(?TYPEVAR1,SelfConnectedObject), sumo(?TYPEVAR2,?quantity-3) ==> {(ingredientAmount ?kind-6 ?kind-15 ?quantity-3)}.

nsubj(part*,Instance*), advmod(part*,initially*), nmod:of(Instance*,?kind-4), advmod(initially*,always*), case(instances*,of*), nmod:of(part*,instances*), nmod:of(instances*,?kind-15), case(?kind-4,of*), cop(part*,are*), case(?kind-15,of*), sumo(?TYPEVAR1,?kind-15), sumo(?TYPEVAR0,?kind-4), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,Object) ==> {(initiallyContainsPart ?kind-4 ?kind-15)}.

nsubj(part*,?kind-3), advmod(part*,initially*), case(?kind-12,of*), nmod:of(part*,?kind-12), cop(part*,is*), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-12), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?kind-3) ==> {(initialPart ?kind-3 ?kind-12)}.

nmod:in(key*,?string-11), case(?string-11,in*), cop(key*,is*), nsubj(key*,?string-3), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-11) ==> {(keyName ?string-3 ?string-11)}.

nsubj(lacks*,?agent-3), dobj(lacks*,?entity-6), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR1,?entity-6), sumo(?TYPEVAR0,?agent-3), isSubclass(?TYPEVAR0,CognitiveAgent) ==> {(lacks ?agent-3 ?entity-6)}.

nmod:of(percent*,people*), dobj(speak*,?language-13), amod(percent*,?real-2), compound(percent*,?number-3), nmod:in(percent*,?area-10), nsubj(speak*,percent*), case(people*,of*), case(?area-10,in*), sumo(?TYPEVAR0,?language-13), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR2,?number-3), isSubclass(?TYPEVAR0,Language), sumo(?TYPEVAR1,?real-2), isSubclass(?TYPEVAR2,RealNumber), sumo(?TYPEVAR3,?area-10), isSubclass(?TYPEVAR3,GeographicArea) ==> {(languagePercentInRegion ?language-13 ?real-2 ?area-10)}.

cop(?kind-10,was*), nsubj(?kind-10,renovation*), case(?kind-10,in*), amod(renovation*,last*), case(?object-6,of*), nmod:of(renovation*,?object-6), sumo(?TYPEVAR1,?object-6), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,Year), sumo(?TYPEVAR0,?kind-10) ==> {(lastRenovation ?object-6 ?kind-10)}.

nsubj(lends*,?agent-3), dobj(lends*,?loan-6), isSubclass(?TYPEVAR0,CognitiveAgent), isSubclass(?TYPEVAR1,Loan), sumo(?TYPEVAR0,?agent-3), sumo(?TYPEVAR1,?loan-6) ==> {(lender ?loan-6 ?agent-3)}.

; advmod(measure*,long*), nmod:to(up*,measure*), nsubj(carry*,CarryBot*), dobj(carry*,objects*), advmod(carry*,up*), compound(measure*,length*), aux(carry*,can*), case(measure*,to*) ==> ; {(lengthLimit null null)}.

nmod:for(word*,?set-8), case(?set-8,for*), cop(?string-14,is*), acl(?category-4,word*), nmod:for(word*,?class-10), isSubclass(?TYPEVAR0,SetOrClass), isSubclass(?TYPEVAR2,LexiconCategory), isSubclass(?TYPEVAR3,SetOrClass), sumo(?TYPEVAR1,?string-14), sumo(?TYPEVAR3,?class-10), sumo(?TYPEVAR2,?category-4), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR0,?set-8) ==> {(lexicon ?set-8 ?category-4 ?string-14)}.

nsubj(?measure-10,extent*), amod(extent*,linear*), nmod:of(extent*,?object-6), cop(?measure-10,is*), case(?object-6,of*), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR1,?object-6), sumo(?TYPEVAR0,?measure-10), isSubclass(?TYPEVAR1,Object) ==> {(linearExtent ?object-6 ?measure-10)}.

nmod:of(liqudity*,?account-6), nsubj(?attribute-10,liqudity*), cop(?attribute-10,is*), case(?account-6,of*), sumo(?TYPEVAR1,?attribute-10), isSubclass(?TYPEVAR0,FinancialAccount), sumo(?TYPEVAR0,?account-6), isSubclass(?TYPEVAR1,LiquidityAttribute) ==> {(liquidity ?account-6 ?attribute-10)}.

auxpass(listed*,is*), nsubjpass(listed*,?stock-2), nmod:on(listed*,?organization-7), case(?organization-7,on*), isSubclass(?TYPEVAR0,Stock), sumo(?TYPEVAR0,?stock-2), sumo(?TYPEVAR1,?organization-7), isSubclass(?TYPEVAR1,Organization) ==> {(listedOn ?stock-2 ?organization-7)}.

nmod:for(bids*,?listing-7), compound(bids*,?agent-2), case(?listing-7,for*), sumo(?TYPEVAR0,?listing-7), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,WebListing), sumo(?TYPEVAR1,?agent-2) ==> {(listingBidder ?listing-7 ?agent-2)}.

nsubj(buys*,?agent-2), dobj(buys*,?listing-6), isSubclass(?TYPEVAR1,WebListing), sumo(?TYPEVAR1,?listing-6), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR0,?agent-2) ==> {(listingBuyer ?listing-6 ?agent-2)}.

dobj(sells*,?listing-6), nsubj(sells*,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?listing-6), isSubclass(?TYPEVAR0,WebListing) ==> {(listingSeller ?listing-6 ?agent-2)}.

case(?component-6,on*), cop(?quantity-10,is*), nmod:on(load*,?component-6), nsubj(?quantity-10,load*), isSubclass(?TYPEVAR0,ComputerComponent), isSubclass(?TYPEVAR1,ConstantQuantity), sumo(?TYPEVAR1,?quantity-10), sumo(?TYPEVAR0,?component-6) ==> {(load ?component-6 ?quantity-10)}.

nsubj(?measure-11,loss*), cop(?measure-11,is*), amod(loss*,financial*), case(?transaction-7,in*), nmod:in(loss*,?transaction-7), isSubclass(?TYPEVAR0,CurrencyMeasure), isSubclass(?TYPEVAR1,FinancialTransaction), sumo(?TYPEVAR0,?measure-11), sumo(?TYPEVAR1,?transaction-7) ==> {(loss ?transaction-7 ?measure-11)}.

nsubj(wrote*,?agent-3), dobj(wrote*,?content-7), isSubclass(?TYPEVAR1,LyricalContent), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-3), sumo(?TYPEVAR1,?content-7) ==> {(lyricist ?content-7 ?agent-3)}.

auxpass(managed*,is*), case(?agent-7,by*), nmod:agent(managed*,?agent-7), nsubjpass(managed*,?physical-2), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR0,?agent-7), sumo(?TYPEVAR1,?physical-2) ==> {(managedBy ?physical-2 ?agent-7)}.

compound:prt(carry*,up*), nmod:to(carry*,?quantity-8), nsubj(carry*,?CarryBot-2), aux(carry*,can*), case(?quantity-8,to*), sumo(?TYPEVAR0,?quantity-8), isSubclass(?TYPEVAR1,CarryBot), sumo(?TYPEVAR1,?CarryBot-2), isSubclass(?TYPEVAR0,Quantity) ==> {(massLimit ?CarryBot-2 ?quantity-8)}.

nmod:of(aunt*,?organism-6), nsubj(?entity-9,aunt*), case(?organism-6,of*), cop(?entity-9,is*), amod(aunt*,maternal*), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR1,?entity-9), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR0,?organism-6) ==> {(maternalAunt ?organism-6 ?entity-9)}.

case(?organism-6,of*), cop(?entity-9,is*), nmod:of(uncle*,?organism-6), nsubj(?entity-9,uncle*), amod(uncle*,maternal*), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?organism-6), sumo(?TYPEVAR1,?entity-9), isSubclass(?TYPEVAR1,Entity) ==> {(maternalUncle ?organism-6 ?entity-9)}.

case(most*,at*), case(?relation-16,of*), acl(values*,argument*), dep(There*,can*), nmod:at(be*,most*), dobj(argument*,?integer-13), ccomp(can*,be*), dep(most*,values*), mark(argument*,to*), compound(values*,?integer-8), amod(values*,?other-7), sumo(?TYPEVAR0,?relation-16), isSubclass(?TYPEVAR3,Integer), isSubclass(?TYPEVAR1,Integer), sumo(?TYPEVAR3,?other-7), sumo(?TYPEVAR1,?integer-13), isSubclass(?TYPEVAR2,Integer), isSubclass(?TYPEVAR0,Relation), sumo(?TYPEVAR2,?integer-8) ==> {(maxCardinality ?relation-16 ?integer-13 ?integer-8)}.

; case(artifact*,of*), nsubj(accommodate*,kind*), amod(artifact*,stationary*), compound(people*,integer*), nmod:of(kind*,artifact*), amod(people*,most*), nmod:at(accommodate*,people*), case(people*,at*), aux(accommodate*,can*) ==> ; {(maxRoomCapacity null null)}.

case(?package-13,for*), nsubj(plan*,?kind-2), compound(plan*,meal*), nmod:for(plan*,?package-13), cop(plan*,is*), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR0,HotelPackage), isSubclass(?TYPEVAR1,MealPlan), sumo(?TYPEVAR0,?package-13) ==> {(mealPlanInclusion ?package-13 ?kind-2)}.

cop(meat*,is*), nsubj(meat*,?kind-2), case(?kind-11,of*), nmod:of(meat*,?kind-11), isSubclass(?TYPEVAR0,OrganicObject), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR1,Animal), sumo(?TYPEVAR1,?kind-11) ==> {(meatOfAnimal ?kind-2 ?kind-11)}.

; nsubj(exclusive*,collection*), advmod(exclusive*,mutually*), nsubj(exclusive*,collection*), cc(collection*,and*), conj:and(collection*,collection*), cop(exclusive*,are*), amod(collection*,other*) ==> ; {(meceCollection null null)}.

dobj(requires*,?quantity-7), nsubj(requires*,?system-3), sumo(?TYPEVAR0,?quantity-7), sumo(?TYPEVAR1,?system-3), isSubclass(?TYPEVAR1,ComputationalSystem), isSubclass(?TYPEVAR0,ConstantQuantity) ==> {(memorySize ?system-3 ?quantity-7)}.

nmod:as(encoded*,?MimeEncodingScheme-9), case(?MimeEncodingScheme-9,as*), auxpass(encoded*,is*), nsubjpass(encoded*,?object-4), sumo(?TYPEVAR1,?object-4), isSubclass(?TYPEVAR0,MimeEncodingScheme), isSubclass(?TYPEVAR1,ContentBearingObject), sumo(?TYPEVAR0,?MimeEncodingScheme-9) ==> {(mimeType ?object-4 ?MimeEncodingScheme-9)}.

dobj(argument*,?integer-12), case(least*,at*), nsubj(are*,values*), amod(values*,?other-6), compound(values*,?integer-7), mark(argument*,to*), case(?relation-15,of*), expl(are*,There*), nmod:npmod(values*,least*), acl(values*,argument*), sumo(?TYPEVAR0,?integer-12), sumo(?TYPEVAR1,?other-6), isSubclass(?TYPEVAR3,Relation), sumo(?TYPEVAR2,?integer-7), isSubclass(?TYPEVAR2,Integer), sumo(?TYPEVAR3,?relation-15), isSubclass(?TYPEVAR1,Integer), isSubclass(?TYPEVAR0,Integer) ==> {(minCardinality ?relation-15 ?integer-12 ?integer-7)}.

cop(title*,is*), case(?language-13,in*), nsubj(title*,?string-3), amod(title*,misspelled*), nmod:for(title*,?entity-10), case(?entity-10,for*), sumo(?TYPEVAR0,?language-13), isSubclass(?TYPEVAR1,SymbolicString), isSubclass(?TYPEVAR2,Entity), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR0,Language), sumo(?TYPEVAR2,?entity-10) ==> {(misspelledTitle ?string-3 ?entity-10 ?language-13)}.

cop(?TelecomNumber-9,is*), nmod:of(number*,?agent-6), amod(number*,mobile*), case(?agent-6,of*), nsubj(?TelecomNumber-9,number*), isSubclass(?TYPEVAR0,TelecomNumber), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?TelecomNumber-9), sumo(?TYPEVAR1,?agent-6) ==> {(mobilePhoneNumber ?TelecomNumber-9 ?agent-6)}.

nmod:at(holds*,?position-9), compound(address*,?IP-2), nsubj(holds*,address*), case(?position-9,at*), compound(address*,?address-3), isSubclass(?TYPEVAR1,IPAddress), sumo(?TYPEVAR1,?IP-2), sumo(?TYPEVAR2,?address-3), sumo(?TYPEVAR0,?position-9), isSubclass(?TYPEVAR0,TimePosition), isSubclass(?TYPEVAR2,IPAddress) ==> {(monitorConnectivityData ?position-9 ?address-3)}.

dobj(has*,?measure-8), amod(income*,monthly*), nsubj(?measure-8,income*), nsubj(has*,?human-2), sumo(?TYPEVAR0,?measure-8), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR1,?human-2), isSubclass(?TYPEVAR1,Human) ==> {(monthlyIncome ?human-2 ?measure-8)}.

nmod:poss(daughter*,brother*), nsubj(?entity-12,daughter*), cop(?entity-12,is*), case(?organism-9,of*), nmod:poss(brother*,mother*), nmod:of(daughter*,?organism-9), sumo(?TYPEVAR1,?organism-9), sumo(?TYPEVAR0,?entity-12), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Organism) ==> {(mothersBrothersDaughter ?organism-9 ?entity-12)}.

case(?organism-9,of*), nmod:of(son*,?organism-9), nmod:poss(son*,brother*), nmod:poss(brother*,mother*), cop(?entity-12,is*), nsubj(?entity-12,son*), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR0,?organism-9), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR1,?entity-12) ==> {(mothersBrothersSon ?organism-9 ?entity-12)}.

nmod:of(wife*,?organism-9), case(?organism-9,of*), nmod:poss(brother*,mother*), nsubj(?entity-12,wife*), cop(?entity-12,is*), nmod:poss(wife*,brother*), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?organism-9), sumo(?TYPEVAR1,?entity-12), isSubclass(?TYPEVAR1,Entity) ==> {(mothersBrothersWife ?organism-9 ?entity-12)}.

nmod:poss(daughter*,sister*), cop(?entity-12,is*), nmod:of(daughter*,?organism-9), nsubj(?entity-12,daughter*), nmod:poss(sister*,mother*), case(?organism-9,of*), sumo(?TYPEVAR0,?entity-12), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR1,?organism-9) ==> {(mothersSistersDaughter ?organism-9 ?entity-12)}.

nsubj(?entity-12,husband*), case(?organism-9,of*), nmod:poss(sister*,mother*), nmod:of(husband*,?organism-9), nmod:poss(husband*,sister*), cop(?entity-12,is*), sumo(?TYPEVAR0,?entity-12), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR1,?organism-9) ==> {(mothersSistersHusband ?organism-9 ?entity-12)}.

nmod:of(son*,?organism-9), case(?organism-9,of*), cop(?entity-12,is*), nsubj(?entity-12,son*), nmod:poss(sister*,mother*), nmod:poss(son*,sister*), sumo(?TYPEVAR1,?entity-12), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?organism-9) ==> {(mothersSistersSon ?organism-9 ?entity-12)}.

nsubjpass(ranked*,?kind-2), nmod:agent(ranked*,?agent-11), auxpass(ranked*,is*), case(?agent-11,by*), isSubclass(?TYPEVAR0,MusicChart), sumo(?TYPEVAR1,?agent-11), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR0,?kind-2) ==> {(musicChartBy ?kind-2 ?agent-11)}.

nsubj(covers*,?charts-3), dobj(covers*,?time-6), sumo(?TYPEVAR1,?time-6), isSubclass(?TYPEVAR0,MusicChart), sumo(?TYPEVAR0,?charts-3), isSubclass(?TYPEVAR1,TimeInterval) ==> {(musicChartPeriod ?charts-3 ?time-6)}.

case(genre*,in*), nsubj(genre*,?entity-2), cop(genre*,is*), dobj(genre*,?object-8), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR0,?entity-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-8) ==> {(musicGenre ?object-8 ?entity-2)}.

; dobj(performed*,?recording-6), nsubj(performed*,?human-2), sumo(?TYPEVAR1,?human-2), sumo(?TYPEVAR0,?recording-6), isSubclass(?TYPEVAR0,MusicRecording), isSubclass(?TYPEVAR1,Human) ==> {(musician ?recording-6 ?human-2 null)}.

nsubj(recording*,?recording-3), cop(recording*,is*), case(?music-9,of*), nmod:of(recording*,?music-9), isSubclass(?TYPEVAR0,MusicRecording), sumo(?TYPEVAR0,?recording-3), sumo(?TYPEVAR1,?music-9), isSubclass(?TYPEVAR1,Music) ==> {(musicInterpretation ?recording-3 ?music-9)}.

cop(video*,is*), nsubj(video*,?recording-3), nmod:of(video*,?recording-10), case(?recording-10,of*), isSubclass(?TYPEVAR0,VideoRecording), isSubclass(?TYPEVAR1,MusicRecording), sumo(?TYPEVAR0,?recording-3), sumo(?TYPEVAR1,?recording-10) ==> {(musicVideo ?recording-10 ?recording-3)}.

; case(?string-10,after*), cop(?string-10,is*), case(?string-15,in*), amod(?string-10,key*), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?string-15), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR0,?string-10) ==> {(nameAfterKeyName null ?string-10 ?string-15)}.

; case(?string-15,in*), compound(?string-10,key*), case(?string-10,before*), cop(?string-10,is*), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?string-10), sumo(?TYPEVAR0,?string-15), isSubclass(?TYPEVAR1,SymbolicString) ==> {(nameBeforeKeyName null ?string-10 ?string-15)}.

nsubj(name*,?string-3), nmod:for(name*,?entity-10), cop(name*,is*), amod(name*,indexable*), case(?entity-10,for*), sumo(?TYPEVAR0,?string-3), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?entity-10), isSubclass(?TYPEVAR1,Entity) ==> {(nameIndexOrder ?string-3 ?entity-10)}.

; cop(?kind-6,is*), case(?kind-6,near*), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR0,?kind-6) ==> {(nearOrientation null ?kind-6)}.

cop(?measure-15,is*), nmod:for(negotiated*,?kind-6), nsubj(negotiated*,price*), case(?agreement-11,in*), case(?kind-6,for*), csubj(?measure-15,negotiated*), sumo(?TYPEVAR0,?measure-15), isSubclass(?TYPEVAR2,Agreement), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR2,?agreement-11), sumo(?TYPEVAR1,?kind-6) ==> {(negotiatedPrice ?kind-6 ?measure-15 ?agreement-11)}.

nmod:of(nephew*,?human-8), cop(nephew*,is*), nsubj(nephew*,?man-2), case(?human-8,of*), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR0,?human-8), sumo(?TYPEVAR1,?man-2), isSubclass(?TYPEVAR1,Man) ==> {(nephew ?man-2 ?human-8)}.

nsubj(registered*,Members*), case(?WebSite-9,for*), aux(registered*,have*), case(?collection-4,of*), case(?time-12,during*), nmod:for(registered*,?WebSite-9), nmod:of(Members*,?collection-4), nmod:during(registered*,?time-12), sumo(?TYPEVAR0,?WebSite-9), isSubclass(?TYPEVAR1,Collection), sumo(?TYPEVAR1,?collection-4), isSubclass(?TYPEVAR0,WebSite), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR2,?time-12) ==> {(newRegisteredUsers ?time-12 ?WebSite-9 ?collection-4)}.

case(?human-8,of*), nsubj(niece*,?woman-2), cop(niece*,is*), nmod:of(niece*,?human-8), sumo(?TYPEVAR0,?human-8), isSubclass(?TYPEVAR1,Woman), sumo(?TYPEVAR1,?woman-2), isSubclass(?TYPEVAR0,Human) ==> {(niece ?woman-2 ?human-8)}.

; aux(have*,may*), compound(reservation*,hotel*), nsubj(have*,reservation*), dobj(have*,adults*), compound(adults*,integer*) ==> ; {(numberAdultOccupant null null)}.

; nsubj(have*,reservation*), dobj(have*,children*), compound(reservation*,hotel*), compound(children*,integer*), aux(have*,may*) ==> ; {(numberChildOccupant null null)}.

; compound(reservation*,hotel*), compound(occupants*,integer*), nsubj(have*,reservation*), aux(have*,may*), dobj(have*,occupants*) ==> ; {(numberOccupant null null)}.

; case(customers*,for*), nsubj(customers*,reservation*), compound(customers*,integer*), cop(customers*,is*), amod(customers*,positive*) ==> ; {(numberOfCustomers null null)}.

; dobj(has*,floors*), nsubj(has*,building*), compound(floors*,integer*) ==> ; {(numberOfFloors null null)}.

; nsubj(is*,reservation*), compound(seniors*,integer*), nmod:for(is*,seniors*), compound(reservation*,hotel*), case(seniors*,for*) ==> ; {(numberSeniorOccupant null null)}.

nsubj(bid*,?bidding-2), cop(bid*,is*), case(?physical-8,for*), nmod:for(bid*,?physical-8), isSubclass(?TYPEVAR0,Bidding), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR0,?bidding-2), sumo(?TYPEVAR1,?physical-8) ==> {(objectOfBid ?bidding-2 ?physical-8)}.

dobj(observes*,?holiday-6), nsubj(observes*,?agent-3), sumo(?TYPEVAR0,?holiday-6), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR0,Holiday), isSubclass(?TYPEVAR1,CognitiveAgent) ==> {(observesHoliday ?agent-3 ?holiday-6)}.

case(?abstract-9,in*), nmod:in(sale*,?abstract-9), case(sale*,for*), nmod:for(items*,sale*), nsubj(offers*,?agent-2), dobj(offers*,items*), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?abstract-9), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR0,Abstract) ==> {(offers ?agent-2 ?abstract-9)}.

nsubj(offers*,?agent-2), nmod:during(offers*,?time-12), case(?time-12,during*), dobj(offers*,items*), nmod:for(items*,sale*), case(sale*,for*), case(?entity-9,in*), nmod:in(sale*,?entity-9), sumo(?TYPEVAR1,?time-12), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR0,?agent-2), sumo(?TYPEVAR2,?entity-9), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR2,Entity) ==> {(offersAtTime ?agent-2 ?entity-9 ?time-12)}.

nsubj(onboard*,?object-4), cop(onboard*,is*), dobj(onboard*,?vehicle-8), sumo(?TYPEVAR1,?vehicle-8), isSubclass(?TYPEVAR0,SelfConnectedObject), sumo(?TYPEVAR0,?object-4), isSubclass(?TYPEVAR1,Vehicle) ==> {(onboard ?object-4 ?vehicle-8)}.

nsubj(holds*,?agent-3), dobj(holds*,?agreement-6), isSubclass(?TYPEVAR0,CognitiveAgent), isSubclass(?TYPEVAR1,Agreement), sumo(?TYPEVAR1,?agreement-6), sumo(?TYPEVAR0,?agent-3) ==> {(optionHolder ?agreement-6 ?agent-3)}.

dobj(sells*,?agreement-6), nsubj(sells*,?agent-3), isSubclass(?TYPEVAR0,Agreement), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR0,?agreement-6), sumo(?TYPEVAR1,?agent-3) ==> {(optionSeller ?agreement-6 ?agent-3)}.

auxpass(called*,is*), xcomp(called*,?string-7), nsubjpass(called*,?organization-2), isSubclass(?TYPEVAR1,Organization), sumo(?TYPEVAR1,?organization-2), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-7) ==> {(organizationName ?string-7 ?organization-2)}.

nsubj(represents*,?agent-2), dobj(represents*,?organization-5), isSubclass(?TYPEVAR1,Organization), sumo(?TYPEVAR1,?organization-5), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent) ==> {(organizationRepresentative ?agent-2 ?organization-5)}.

compound(?attribute-7,staff*), nsubj(has*,?agent-2), dobj(has*,?attribute-7), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,RelationalAttribute), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?attribute-7) ==> {(orgStaff ?agent-2 ?attribute-7)}.

advmod(expressed*,first*), case(?language-8,as*), auxpass(expressed*,was*), nmod:as(expressed*,?language-8), nsubjpass(expressed*,?proposition-2), isSubclass(?TYPEVAR1,Proposition), isSubclass(?TYPEVAR0,Language), sumo(?TYPEVAR0,?language-8), sumo(?TYPEVAR1,?proposition-2) ==> {(originalExpressedInLanguage ?proposition-2 ?language-8)}.

case(?entity-6,of*), nmod:in(title*,?language-9), nsubj(?string-13,title*), nmod:of(title*,?entity-6), cop(?string-13,is*), case(?language-9,in*), amod(title*,original*), isSubclass(?TYPEVAR1,Language), sumo(?TYPEVAR0,?entity-6), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?language-9), sumo(?TYPEVAR2,?string-13), isSubclass(?TYPEVAR2,SymbolicString) ==> {(originalTitle ?string-13 ?entity-6 ?language-9)}.

; amod(collection*,other*), nsubj(tests*,collection*), amod(tests*,orthogonal*), cop(tests*,are*), cc(collection*,and*), conj:and(collection*,collection*), nsubj(tests*,collection*) ==> ; {(orthogonalTests null null)}.

xcomp(pay*,use*), nsubj(pay*,Renters*), aux(pay*,can*), mark(use*,to*), dobj(use*,?entity-14), case(?kind-4,of*), nmod:of(Renters*,?kind-4), sumo(?TYPEVAR0,?entity-14), isSubclass(?TYPEVAR1,HotelFunctionRoom), sumo(?TYPEVAR1,?kind-4), isSubclass(?TYPEVAR0,Entity) ==> {(paidFunctionRoomAmenity ?kind-4 ?entity-14)}.

mark(use*,to*), aux(pay*,can*), case(?agent-4,of*), nsubj(pay*,Renters*), xcomp(pay*,use*), dobj(use*,?entity-10), nmod:of(Renters*,?agent-4), sumo(?TYPEVAR1,?entity-10), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR0,?agent-4), isSubclass(?TYPEVAR1,Entity) ==> {(paidPropertyAmenity ?agent-4 ?entity-10)}.

mark(use*,to*), case(?kind-4,of*), xcomp(pay*,use*), nsubj(pay*,Renters*), dobj(use*,?entity-13), nmod:of(Renters*,?kind-4), aux(pay*,can*), sumo(?TYPEVAR1,?entity-13), sumo(?TYPEVAR0,?kind-4), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,HotelUnit) ==> {(paidRoomAmenity ?kind-4 ?entity-13)}.

nmod:of(company*,?organization-10), compound(company*,parent*), cop(company*,is*), case(?organization-10,of*), nsubj(company*,?organization-3), sumo(?TYPEVAR0,?organization-10), sumo(?TYPEVAR1,?organization-3), isSubclass(?TYPEVAR1,Organization), isSubclass(?TYPEVAR0,Organization) ==> {(parentcompany ?organization-10 ?organization-3)}.

dobj(has*,password*), dobj(password*,?password-8), nsubj(has*,?user-3), isSubclass(?TYPEVAR1,ComputerUser), sumo(?TYPEVAR0,?password-8), sumo(?TYPEVAR1,?user-3), isSubclass(?TYPEVAR0,ComputerPassword) ==> {(password ?password-8 ?user-3)}.

nsubj(?string-14,tense*), amod(tense*,past*), case(?entity-6,of*), case(?language-10,in*), cop(?string-14,is*), nmod:of(tense*,?entity-6), sumo(?TYPEVAR2,?language-10), sumo(?TYPEVAR1,?entity-6), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR2,HumanLanguage), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-14) ==> {(pastTense ?language-10 ?entity-6 ?string-14)}.

cop(?entity-9,is*), nmod:of(aunt*,?organism-6), nsubj(?entity-9,aunt*), amod(aunt*,paternal*), case(?organism-6,of*), sumo(?TYPEVAR1,?organism-6), sumo(?TYPEVAR0,?entity-9), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Organism) ==> {(paternalAunt ?organism-6 ?entity-9)}.

cop(?entity-9,is*), case(?organism-6,of*), nmod:of(uncle*,?organism-6), amod(uncle*,paternal*), nsubj(?entity-9,uncle*), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR1,?organism-6), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR0,?entity-9) ==> {(paternalUncle ?organism-6 ?entity-9)}.

case(?human-6,of*), amod(phone*,personal*), cop(?TelecomNumber-9,is*), nmod:of(phone*,?human-6), nsubj(?TelecomNumber-9,phone*), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?TelecomNumber-9), isSubclass(?TYPEVAR1,TelecomNumber), sumo(?TYPEVAR0,?human-6) ==> {(personalPhoneNumber ?TelecomNumber-9 ?human-6)}.

nsubj(plaintiff*,?agent-3), nmod:in(plaintiff*,?action-10), case(?action-10,in*), cop(plaintiff*,is*), isSubclass(?TYPEVAR0,CognitiveAgent), isSubclass(?TYPEVAR1,LegalAction), sumo(?TYPEVAR0,?agent-3), sumo(?TYPEVAR1,?action-10) ==> {(plaintiff ?action-10 ?agent-3)}.

nmod:in(issued*,?policy-10), case(?agent-7,by*), cop(?attribute-15,is*), case(?policy-10,in*), acl(?formula-2,issued*), nmod:by(issued*,?agent-7), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR2,DeonticAttribute), sumo(?TYPEVAR1,?agent-7), isSubclass(?TYPEVAR3,Formula), isSubclass(?TYPEVAR0,Policy), sumo(?TYPEVAR0,?policy-10), sumo(?TYPEVAR3,?formula-2), sumo(?TYPEVAR2,?attribute-15) ==> {(policyClause ?formula-2 ?attribute-15 ?policy-10 ?agent-7)}.

cop(effective*,is*), nsubj(effective*,?proposition-2), nmod:as_of(effective*,?kind-8), mwe(as*,of*), case(?kind-8,as*), sumo(?TYPEVAR0,?proposition-2), isSubclass(?TYPEVAR1,TimePosition), isSubclass(?TYPEVAR0,Proposition), sumo(?TYPEVAR1,?kind-8) ==> {(policyEffectiveDate ?proposition-2 ?kind-8)}.

nmod:to(applicable*,?package-10), cop(applicable*,is*), nsubj(applicable*,?kind-2), case(?package-10,to*), isSubclass(?TYPEVAR1,Policy), sumo(?TYPEVAR0,?package-10), sumo(?TYPEVAR1,?kind-2), isSubclass(?TYPEVAR0,HotelPackage) ==> {(policyInclusion ?package-10 ?kind-2)}.

dobj(covers*,?object-5), nsubj(covers*,?policy-2), sumo(?TYPEVAR0,?object-5), isSubclass(?TYPEVAR1,Policy), sumo(?TYPEVAR1,?policy-2), isSubclass(?TYPEVAR0,Object) ==> {(policyLocationCoverage ?policy-2 ?object-5)}.

dobj(enacts*,?policy-6), compound(?policy-6,policy*), nsubj(enacts*,?organization-2), sumo(?TYPEVAR1,?organization-2), isSubclass(?TYPEVAR0,Policy), isSubclass(?TYPEVAR1,Organization), sumo(?TYPEVAR0,?policy-6) ==> {(policyOwner ?organization-2 ?policy-6)}.

nsubj(active*,?policy-2), nmod:during(active*,?time-7), cop(active*,is*), case(?time-7,during*), isSubclass(?TYPEVAR0,Policy), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR0,?policy-2), sumo(?TYPEVAR1,?time-7) ==> {(policyPeriod ?policy-2 ?time-7)}.

nmod:for(address*,?PostalPlace-8), case(?PostalPlace-8,for*), nsubj(address*,?PostalAddressText-2), cop(address*,is*), sumo(?TYPEVAR0,?PostalPlace-8), sumo(?TYPEVAR1,?PostalAddressText-2), isSubclass(?TYPEVAR0,PostalPlace), isSubclass(?TYPEVAR1,PostalAddressText) ==> {(postAddressText ?PostalAddressText-2 ?PostalPlace-8)}.

aux(contacted*,can*), case(?PostalPlace-8,at*), nsubjpass(contacted*,?agent-2), auxpass(contacted*,be*), nmod:at(contacted*,?PostalPlace-8), isSubclass(?TYPEVAR0,PostalPlace), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?PostalPlace-8) ==> {(postContactSite ?PostalPlace-8 ?agent-2)}.

cop(post*,is*), case(post*,in*), dobj(code*,?PostcodeArea-8), acl(post*,code*), nsubj(post*,?PostalPlace-2), sumo(?TYPEVAR1,?PostalPlace-2), sumo(?TYPEVAR0,?PostcodeArea-8), isSubclass(?TYPEVAR0,PostcodeArea), isSubclass(?TYPEVAR1,PostalPlace) ==> {(postPostcodeArea ?PostalPlace-2 ?PostcodeArea-8)}.

dobj(has*,box*), compound(box*,PO*), dep(box*,?PostalPlace-8), nsubj(has*,?string-3), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR0,PostalPlace), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR0,?PostalPlace-8) ==> {(postPostOfficeBox ?string-3 ?PostalPlace-8)}.

dobj(number*,?PostalPlace-8), nsubj(number*,?string-3), cop(number*,is*), case(number*,at*), sumo(?TYPEVAR0,?PostalPlace-8), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR0,PostalPlace), isSubclass(?TYPEVAR1,SymbolicString) ==> {(postStreetNumber ?string-3 ?PostalPlace-8)}.

cop(customer*,is*), nsubj(customer*,?agent-3), nmod:for(customer*,?agent-10), amod(customer*,potential*), case(?agent-10,for*), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR1,?agent-10), sumo(?TYPEVAR0,?agent-3), isSubclass(?TYPEVAR1,Agent) ==> {(potentialCustomer ?agent-3 ?agent-10)}.

nmod:in(precedes*,?string-13), case(?string-13,in*), nsubj(precedes*,?string-3), dobj(precedes*,?string-8), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-13), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR2,?string-8), isSubclass(?TYPEVAR2,SymbolicString) ==> {(precedesInString ?string-3 ?string-8 ?string-13)}.

dobj(prevent*,instances*), nmod:of(instances*,?kind-11), nmod:of(Instances*,?kind-4), nsubj(prevent*,Instances*), case(?kind-11,of*), case(?kind-4,of*), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR0,?kind-11), sumo(?TYPEVAR1,?kind-4), isSubclass(?TYPEVAR1,Process) ==> {(preventsSubclass ?kind-4 ?kind-11)}.

dobj(contains*,?scheme-6), nsubj(contains*,?policy-2), isSubclass(?TYPEVAR0,PricingScheme), sumo(?TYPEVAR0,?scheme-6), sumo(?TYPEVAR1,?policy-2), isSubclass(?TYPEVAR1,Policy) ==> {(pricePolicy ?scheme-6 ?policy-2)}.

nmod:between(costs*,?measure-14), nmod:of(?kind-2,costs*), compound(costs*,?entity-4), nmod:between(costs*,?measure-9), cc(?measure-9,and*), case(?agent-17,from*), case(?measure-9,between*), case(costs*,?of-3), sumo(?TYPEVAR2,?entity-4), isSubclass(?TYPEVAR5,Entity), isSubclass(?TYPEVAR3,CurrencyMeasure), isSubclass(?TYPEVAR4,Agent), isSubclass(?TYPEVAR2,Entity), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR3,?measure-9), sumo(?TYPEVAR0,?measure-14), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR5,?of-3), sumo(?TYPEVAR4,?agent-17), isSubclass(?TYPEVAR0,CurrencyMeasure) ==> {(priceRange ?of-3 ?measure-9 ?measure-14 ?agent-17)}.

nmod:to(entitled*,?kind-10), case(?kind-10,to*), nsubjpass(entitled*,Customers*), auxpass(entitled*,are*), case(?package-5,of*), nmod:of(Customers*,?package-5), isSubclass(?TYPEVAR1,HotelPackage), sumo(?TYPEVAR1,?package-5), sumo(?TYPEVAR0,?kind-10), isSubclass(?TYPEVAR0,Process) ==> {(processInclusion ?package-5 ?kind-10)}.
 
nsubj(produces*,?human-2), dobj(produces*,?recording-5), sumo(?TYPEVAR0,?human-2), isSubclass(?TYPEVAR1,Recording), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?recording-5) ==> {(producedBy ?recording-5 ?human-2)}.

nmod:on(produced*,?point-8), nsubjpass(produced*,?recording-2), case(?point-8,on*), auxpass(produced*,was*), sumo(?TYPEVAR0,?point-8), isSubclass(?TYPEVAR0,TimePoint), isSubclass(?TYPEVAR1,Recording), sumo(?TYPEVAR1,?recording-2) ==> {(producedOn ?recording-2 ?point-8)}.

cop(brand*,is*), case(?entity-9,of*), nsubj(brand*,?entity-2), nmod:of(brand*,?entity-9), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR0,?entity-9), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR1,?entity-2) ==> {(productBrand ?entity-2 ?entity-9)}.

cop(type*,is*), case(?kind-9,of*), nsubj(type*,?string-3), nmod:of(type*,?kind-9), sumo(?TYPEVAR0,?kind-9), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR0,Product), isSubclass(?TYPEVAR1,SymbolicString) ==> {(productModel ?string-3 ?kind-9)}.

nsubj(produces*,?kind-2), dobj(produces*,?kind-7), isSubclass(?TYPEVAR0,Animal), sumo(?TYPEVAR1,?kind-7), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR1,OrganicObject) ==> {(productOfAnimal ?kind-7 ?kind-2)}.

dobj(sells*,?kind-6), case(?measure-12,for*), nmod:for(sells*,?measure-12), nsubj(sells*,?agent-3), sumo(?TYPEVAR1,?measure-12), sumo(?TYPEVAR0,?kind-6), isSubclass(?TYPEVAR1,CurrencyMeasure), sumo(?TYPEVAR2,?agent-3), isSubclass(?TYPEVAR2,CognitiveAgent), isSubclass(?TYPEVAR0,Entity) ==> {(productPrice ?kind-6 ?measure-12 ?agent-3)}.

case(?transaction-6,from*), cop(?measure-10,is*), nsubj(?measure-10,profit*), nmod:from(profit*,?transaction-6), sumo(?TYPEVAR0,?transaction-6), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR0,FinancialTransaction), sumo(?TYPEVAR1,?measure-10) ==> {(profit ?transaction-6 ?measure-10)}.

nsubj(copy*,?file-3), nmod:of(copy*,?program-10), case(?program-10,of*), cop(copy*,is*), isSubclass(?TYPEVAR1,ComputerProgram), isSubclass(?TYPEVAR0,ComputerFile), sumo(?TYPEVAR1,?program-10), sumo(?TYPEVAR0,?file-3) ==> {(programCopy ?file-3 ?program-10)}.

nsubjpass(prohibited*,?object-2), case(sale*,for*), nmod:for(prohibited*,sale*), case(?WebSite-9,on*), nmod:on(sale*,?WebSite-9), auxpass(prohibited*,is*), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?WebSite-9), isSubclass(?TYPEVAR1,WebSite) ==> {(prohibitedItem ?object-2 ?WebSite-9)}.

dobj(authored*,?proposition-6), nsubj(authored*,?agent-3), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR0,Proposition), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR0,?proposition-6) ==> {(propositionOwner ?agent-3 ?proposition-6)}.

dobj(provides*,transportation*), nsubj(provides*,?company-3), nmod:to(provides*,?region-8), case(?region-8,to*), isSubclass(?TYPEVAR0,TransportationCompany), sumo(?TYPEVAR1,?region-8), isSubclass(?TYPEVAR1,Region), sumo(?TYPEVAR0,?company-3) ==> {(providesDestination ?company-3 ?region-8)}.

case(?scheme-16,according*), case(?agent-11,from*), cop(?measure-20,is*), nmod:of(price*,?kind-5), case(?kind-5,of*), nmod:from(price*,?agent-11), mwe(according*,to*), nsubj(?measure-20,price*), isSubclass(?TYPEVAR2,CurrencyMeasure), isSubclass(?TYPEVAR0,PricingScheme), sumo(?TYPEVAR0,?scheme-16), sumo(?TYPEVAR1,?agent-11), sumo(?TYPEVAR2,?measure-20), sumo(?TYPEVAR3,?kind-5), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR3,Entity) ==> {(publishedPrice ?kind-5 ?measure-20 ?agent-11 ?scheme-16)}.

; nsubj(number*,p-value*), nmod:of(p-value*,experimenting*), cop(number*,is*), amod(number*,real*), case(experimenting*,of*) ==> ; {(pValue null null)}.

; amod(slack*,constant*), case(quantity*,between*), amod(quantity*,constant*), compound(slack*,quantity*), compound(path*,computer*), conj:and(quantity*,slack*), amod(slack*,other*), nsubj(has*,path*), nmod:between(has*,slack*), cc(quantity*,and*), nmod:between(has*,quantity*) ==> ; ; {(qoSSlack null null null)}.

nsubj(subject*,?human-2), amod(subject*,qualified*), cop(subject*,is*), case(?experimenting-9,of*), nmod:of(subject*,?experimenting-9), isSubclass(?TYPEVAR1,Experimenting), sumo(?TYPEVAR1,?experimenting-9), sumo(?TYPEVAR0,?human-2), isSubclass(?TYPEVAR0,Human) ==> {(qualifiedExperiment ?experimenting-9 ?human-2)}.

case(?entity-7,during*), auxpass(accessed*,is*), nsubjpass(accessed*,?AccessingWebPage-2), nmod:during(accessed*,?entity-7), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR0,?entity-7), sumo(?TYPEVAR1,?AccessingWebPage-2), isSubclass(?TYPEVAR1,AccessingWebPage) ==> {(qualifiedPageView ?entity-7 ?AccessingWebPage-2)}.

nmod:of(quarter*,?entity-8), cop(quarter*,is*), case(?entity-8,of*), nsubj(quarter*,?object-2), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR0,?entity-8), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-2) ==> {(quarter ?object-2 ?entity-8)}.

case(?area-8,in*), nmod:of(rate*,rain*), cop(?quantity-16,is*), case(rain*,of*), case(?time-11,during*), acl:relcl(rate*,?quantity-16), nmod:in(rate*,?area-8), sumo(?TYPEVAR2,?time-11), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR1,?quantity-16), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR0,?area-8), isSubclass(?TYPEVAR1,FunctionQuantity) ==> {(rainfallIntensity ?area-8 ?time-11 ?quantity-16)}.

nmod:of(detail*,?reservation-6), compound(detail*,rate*), cop(?formula-9,is*), case(?reservation-6,of*), nsubj(?formula-9,detail*), sumo(?TYPEVAR1,?formula-9), isSubclass(?TYPEVAR0,Reservation), sumo(?TYPEVAR0,?reservation-6), isSubclass(?TYPEVAR1,Formula) ==> {(rateDetail ?reservation-6 ?formula-9)}.

compound(?RatingAttribute-6,rating*), dobj(creates*,?RatingAttribute-6), nsubj(creates*,?agent-2), isSubclass(?TYPEVAR0,RatingAttribute), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?RatingAttribute-6), isSubclass(?TYPEVAR1,Agent) ==> {(ratingsAgent ?RatingAttribute-6 ?agent-2)}.

nsubj(reacts*,?substance-2), case(?process-7,in*), nmod:in(reacts*,?process-7), isSubclass(?TYPEVAR0,Substance), isSubclass(?TYPEVAR1,ChemicalProcess), sumo(?TYPEVAR0,?substance-2), sumo(?TYPEVAR1,?process-7) ==> {(reactant ?process-7 ?substance-2)}.

case(?process-8,in*), dep(?substance-2,reagent*), nmod:in(reagent*,?process-8), isSubclass(?TYPEVAR0,ChemicalProcess), isSubclass(?TYPEVAR1,Substance), sumo(?TYPEVAR0,?process-8), sumo(?TYPEVAR1,?substance-2) ==> {(reagent ?process-8 ?substance-2)}.

cop(record*,is*), nsubj(record*,?object-4), nmod:of(record*,?physical-10), case(?physical-10,of*), isSubclass(?TYPEVAR0,ContentBearingObject), sumo(?TYPEVAR1,?physical-10), sumo(?TYPEVAR0,?object-4), isSubclass(?TYPEVAR1,Physical) ==> {(record ?object-4 ?physical-10)}.

nsubj(record*,?bearing-3), cop(record*,is*), case(?agreement-10,of*), dep(record*,?content-2), nmod:of(record*,?agreement-10), sumo(?TYPEVAR2,?content-2), isSubclass(?TYPEVAR0,ContentBearingPhysical), isSubclass(?TYPEVAR2,ContentBearingPhysical), isSubclass(?TYPEVAR1,Agreement), sumo(?TYPEVAR1,?agreement-10), sumo(?TYPEVAR0,?bearing-3) ==> {(recordForAgreement ?bearing-3 ?agreement-10)}.

dobj(produces*,?recording-5), nsubj(produces*,?organization-2), isSubclass(?TYPEVAR1,Organization), isSubclass(?TYPEVAR0,Recording), sumo(?TYPEVAR1,?organization-2), sumo(?TYPEVAR0,?recording-5) ==> {(recordingCompany ?recording-5 ?organization-2)}.

; nsubj(long*,recording*), cop(long*,is*), compound(duration*,time*), nmod:npmod(long*,duration*) ==> ; {(recordingLength null null)}.

compound(title*,reference*), cop(title*,is*), case(?language-13,in*), case(?entity-10,of*), nsubj(title*,?string-3), nmod:of(title*,?entity-10), sumo(?TYPEVAR2,?string-3), sumo(?TYPEVAR0,?language-13), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,Language), isSubclass(?TYPEVAR2,SymbolicString), sumo(?TYPEVAR1,?entity-10) ==> {(referenceTitle ?string-3 ?entity-10 ?language-13)}.

amod(user*,registered*), nmod:of(user*,?Website-9), cop(user*,is*), nsubj(user*,?agent-2), case(?Website-9,of*), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?Website-9), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Website) ==> {(registeredUser ?agent-2 ?Website-9)}.

nmod:at(released*,?point-16), case(consumption*,for*), nmod:in(consumption*,?area-12), case(?point-16,at*), auxpass(released*,was*), case(?area-12,in*), nmod:for(released*,consumption*), nsubjpass(released*,?kind-2), sumo(?TYPEVAR1,?area-12), sumo(?TYPEVAR2,?kind-2), isSubclass(?TYPEVAR2,Object), isSubclass(?TYPEVAR0,TimePoint), isSubclass(?TYPEVAR1,GeographicArea), sumo(?TYPEVAR0,?point-16) ==> {(releaseForConsumption ?kind-2 ?area-12 ?point-16)}.

case(?area-12,in*), auxpass(released*,was*), case(?entity-15,at*), nmod:in(sale*,?area-12), nmod:at(sale*,?entity-15), case(sale*,for*), nsubjpass(released*,?kind-2), nmod:for(released*,sale*), sumo(?TYPEVAR0,?area-12), sumo(?TYPEVAR2,?kind-2), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR1,?entity-15), isSubclass(?TYPEVAR2,Object), isSubclass(?TYPEVAR1,Entity) ==> {(releaseForSale ?kind-2 ?area-12 ?entity-15)}.

amod(set*,?physical-7), case(?kind-5,of*), nmod:of(?kind-5,set*), nmod:according_to(set*,?scheme-17), case(set*,?of-6), nsubj(?quantity-21,price*), mwe(according*,to*), cop(?quantity-21,is*), nmod:by(set*,?agent-12), case(?scheme-17,according*), nmod:of(price*,?kind-5), case(?agent-12,by*), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR5,?agent-12), isSubclass(?TYPEVAR4,FunctionQuantity), sumo(?TYPEVAR2,?scheme-17), isSubclass(?TYPEVAR3,Physical), sumo(?TYPEVAR3,?of-6), isSubclass(?TYPEVAR5,CognitiveAgent), isSubclass(?TYPEVAR2,PricingScheme), sumo(?TYPEVAR4,?quantity-21), sumo(?TYPEVAR0,?physical-7), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR1,?kind-5) ==> {(rentalPrice ?kind-5 ?quantity-21 ?agent-12 ?scheme-17)}.

nsubj(rents*,?agent-4), nmod:during(rents*,?time-14), nmod:to(rents*,?agent-11), dobj(rents*,?object-7), case(?time-14,during*), case(?agent-11,to*), isSubclass(?TYPEVAR2,CognitiveAgent), sumo(?TYPEVAR0,?agent-4), sumo(?TYPEVAR3,?object-7), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR2,?agent-11), sumo(?TYPEVAR1,?time-14), isSubclass(?TYPEVAR3,Object), isSubclass(?TYPEVAR0,CognitiveAgent) ==> {(rents ?agent-11 ?agent-4 ?object-7 ?time-14)}.

auxpass(sent*,is*), ccomp(sent*,?duration-9), nsubjpass(sent*,?request-3), isSubclass(?TYPEVAR1,UserRequest), sumo(?TYPEVAR0,?duration-9), isSubclass(?TYPEVAR0,TimeDuration), sumo(?TYPEVAR1,?request-3) ==> {(requestRate ?request-3 ?duration-9)}.

dobj(creating*,?reservation-8), nsubjpass(used*,?physical-2), auxpass(used*,was*), mark(creating*,in*), advcl(used*,creating*), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR1,?physical-2), isSubclass(?TYPEVAR0,Reservation), sumo(?TYPEVAR0,?reservation-8) ==> {(reservationChannel ?physical-2 ?reservation-8)}.

nmod:at(ends*,?point-7), nsubj(ends*,?reservation-2), case(?point-7,at*), sumo(?TYPEVAR0,?point-7), sumo(?TYPEVAR1,?reservation-2), isSubclass(?TYPEVAR0,TimePoint), isSubclass(?TYPEVAR1,Reservation) ==> {(reservationEnd ?point-7 ?reservation-2)}.

case(?point-7,at*), nsubj(starts*,?reservation-2), nmod:at(starts*,?point-7), sumo(?TYPEVAR0,?point-7), isSubclass(?TYPEVAR0,TimePoint), sumo(?TYPEVAR1,?reservation-2), isSubclass(?TYPEVAR1,Reservation) ==> {(reservationStart ?point-7 ?reservation-2)}.

nsubj(reservation*,?reservation-2), cop(reservation*,is*), nmod:for(reservation*,?proposition-8), case(?proposition-8,for*), sumo(?TYPEVAR1,?proposition-8), isSubclass(?TYPEVAR0,Reservation), sumo(?TYPEVAR0,?reservation-2), isSubclass(?TYPEVAR1,Proposition) ==> {(reservedPackage ?reservation-2 ?proposition-8)}.

case(?kind-9,for*), nmod:for(reservation*,?kind-9), nsubj(reservation*,?reservation-3), cop(reservation*,is*), sumo(?TYPEVAR1,?reservation-3), sumo(?TYPEVAR0,?kind-9), isSubclass(?TYPEVAR1,HotelReservation), isSubclass(?TYPEVAR0,HotelUnit) ==> {(reservedRoom ?reservation-3 ?kind-9)}.

nsubj(?measure-10,price*), nmod:of(price*,?auction-6), case(?auction-6,of*), compound(price*,reserve*), cop(?measure-10,is*), isSubclass(?TYPEVAR1,Auctioning), sumo(?TYPEVAR0,?measure-10), isSubclass(?TYPEVAR0,CurrencyMeasure), sumo(?TYPEVAR1,?auction-6) ==> {(reservePrice ?auction-6 ?measure-10)}.

nsubj(?reservation-5,reserves*), compound(reserves*,?agent-2), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?reservation-5), isSubclass(?TYPEVAR0,Reservation), isSubclass(?TYPEVAR1,Agent) ==> {(reservingEntity ?agent-2 ?reservation-5)}.

nsubj(exhausts*,?process-2), dobj(exhausts*,?object-5), sumo(?TYPEVAR1,?object-5), sumo(?TYPEVAR0,?process-2), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,Process) ==> {(resourceExhausted ?process-2 ?object-5)}.

dobj(uses*,?resource-7), nsubj(uses*,?process-3), sumo(?TYPEVAR1,?process-3), isSubclass(?TYPEVAR1,ComputerProcess), isSubclass(?TYPEVAR0,ComputerResource), sumo(?TYPEVAR0,?resource-7) ==> {(resourceUsed ?process-3 ?resource-7)}.

case(?response-7,of*), compound(rate*,response*), nmod:of(rate*,?response-7), nsubj(?time-10,rate*), cop(?time-10,is*), isSubclass(?TYPEVAR0,ComputerResponse), sumo(?TYPEVAR0,?response-7), sumo(?TYPEVAR1,?time-10), isSubclass(?TYPEVAR1,TimeDuration) ==> {(responseRate ?response-7 ?time-10)}.

case(?investment-6,of*), nsubj(?attribute-10,level*), nmod:of(level*,?investment-6), cop(?attribute-10,is*), compound(level*,risk*), sumo(?TYPEVAR0,?investment-6), isSubclass(?TYPEVAR0,Investment), sumo(?TYPEVAR1,?attribute-10), isSubclass(?TYPEVAR1,RiskAttribute) ==> {(riskLevel ?investment-6 ?attribute-10)}.

case(?kind-10,in*), nsubj(amenity*,?kind-2), cop(amenity*,is*), nmod:in(amenity*,?kind-10), sumo(?TYPEVAR0,?kind-10), isSubclass(?TYPEVAR1,Physical), isSubclass(?TYPEVAR0,HotelUnit), sumo(?TYPEVAR1,?kind-2) ==> {(roomAmenity ?kind-10 ?kind-2)}.

cop(attribute*,is*), case(?kind-9,of*), nsubj(attribute*,?attribute-3), nmod:of(attribute*,?kind-9), isSubclass(?TYPEVAR0,HotelUnit), sumo(?TYPEVAR1,?attribute-3), sumo(?TYPEVAR0,?kind-9), isSubclass(?TYPEVAR1,RelationalAttribute) ==> {(roomAttribute ?kind-9 ?attribute-3)}.

nmod:to(applies*,?kind-10), nsubj(policy*,?policy-2), case(?kind-10,to*), nsubj(applies*,that*), cop(policy*,is*), acl:relcl(policy*,applies*), isSubclass(?TYPEVAR1,Policy), sumo(?TYPEVAR0,?kind-10), isSubclass(?TYPEVAR0,HotelUnit), sumo(?TYPEVAR1,?policy-2) ==> {(roomPolicy ?kind-10 ?policy-2)}.

compound(days*,?integer-6), nsubj(specifies*,?package-3), case(?kind-11,at*), ccomp(specifies*,stay*), nmod:at(stay*,?kind-11), nsubj(stay*,days*), sumo(?TYPEVAR1,?package-3), isSubclass(?TYPEVAR1,HotelPackage), sumo(?TYPEVAR2,?kind-11), isSubclass(?TYPEVAR2,HotelUnit), sumo(?TYPEVAR0,?integer-6), isSubclass(?TYPEVAR0,Integer) ==> {(roomStay ?package-3 ?integer-6 ?kind-11)}.

cop(end*,is*), nsubj(end*,?region-2), case(?system-9,of*), nmod:of(end*,?system-9), isSubclass(?TYPEVAR1,TransitSystem), sumo(?TYPEVAR1,?system-9), sumo(?TYPEVAR0,?region-2), isSubclass(?TYPEVAR0,Region) ==> {(routeEnd ?region-2 ?system-9)}.

case(?system-9,of*), nmod:of(start*,?system-9), nsubj(start*,?region-2), cop(start*,is*), isSubclass(?TYPEVAR1,Region), sumo(?TYPEVAR0,?system-9), isSubclass(?TYPEVAR0,TransitSystem), sumo(?TYPEVAR1,?region-2) ==> {(routeStart ?region-2 ?system-9)}.

nsubj(running*,?program-3), nmod:on(running*,?computer-8), aux(running*,is*), case(?computer-8,on*), isSubclass(?TYPEVAR0,ComputerProgram), sumo(?TYPEVAR1,?computer-8), isSubclass(?TYPEVAR1,Computer), sumo(?TYPEVAR0,?program-3) ==> {(runningOn ?program-3 ?computer-8)}.

nmod:on(displayed*,?InterfaceScreen-7), nsubjpass(displayed*,?GUIElement-2), auxpass(displayed*,is*), case(?InterfaceScreen-7,on*), isSubclass(?TYPEVAR1,GUIElement), isSubclass(?TYPEVAR0,InterfaceScreen), sumo(?TYPEVAR1,?GUIElement-2), sumo(?TYPEVAR0,?InterfaceScreen-7) ==> {(screenOfGUIE ?GUIElement-2 ?InterfaceScreen-7)}.

nsubj(rewrite*,?query-3), cop(rewrite*,is*), case(?Search-10,of*), nmod:of(rewrite*,?Search-10), sumo(?TYPEVAR0,?query-3), isSubclass(?TYPEVAR0,SearchQuery), sumo(?TYPEVAR1,?Search-10), isSubclass(?TYPEVAR1,SearchQuery) ==> {(searchQueryRewrite ?query-3 ?Search-10)}.

advcl(results*,searching*), nmod:for(searching*,?attempt-10), case(?attempt-10,for*), mark(searching*,from*), nsubj(results*,?listing-3), isSubclass(?TYPEVAR1,WebListing), sumo(?TYPEVAR1,?listing-3), isSubclass(?TYPEVAR0,SearchAttempt), sumo(?TYPEVAR0,?attempt-10) ==> {(searchResult ?listing-3 ?attempt-10)}.

nsubj(sends*,?system-3), dobj(sends*,reports*), xcomp(sends*,?duration-9), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR1,?duration-9), sumo(?TYPEVAR0,?system-3), isSubclass(?TYPEVAR0,ComputationalSystem) ==> {(sendRate ?system-3 ?duration-9)}.

nmod:of(object*,?sentence-6), cop(?phrase-10,is*), nsubj(?phrase-10,object*), case(?sentence-6,of*), amod(object*,grammatical*), sumo(?TYPEVAR1,?phrase-10), isSubclass(?TYPEVAR0,Sentence), isSubclass(?TYPEVAR1,NounPhrase), sumo(?TYPEVAR0,?sentence-6) ==> {(sententialObject ?phrase-10 ?sentence-6)}.

case(?sentence-6,of*), cop(?phrase-10,is*), nmod:of(subject*,?sentence-6), nsubj(?phrase-10,subject*), amod(subject*,grammatical*), sumo(?TYPEVAR0,?sentence-6), sumo(?TYPEVAR1,?phrase-10), isSubclass(?TYPEVAR0,Sentence), isSubclass(?TYPEVAR1,NounPhrase) ==> {(sententialSubject ?phrase-10 ?sentence-6)}.

auxpass(used*,is*), nmod:in(used*,?service-7), nsubjpass(used*,?object-2), case(?service-7,in*), isSubclass(?TYPEVAR0,ServiceProcess), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR0,?service-7), isSubclass(?TYPEVAR1,Object) ==> {(serviceInstrument ?service-7 ?object-2)}.

; nmod:between(boundary*,area*), cc(area*,and*), amod(area*,other*), advmod(measure*,long*), nmod:between(boundary*,area*), nsubj(measure*,boundary*), compound(measure*,length*), amod(area*,geographic*), conj:and(area*,area*), amod(area*,geographic*), case(area*,between*), cop(measure*,is*) ==> ; ; {(sharedBorderLength null null null)}.

cop(share*,is*), nmod:of(share*,?organization-8), nsubj(share*,?share-2), case(?organization-8,of*), sumo(?TYPEVAR1,?share-2), isSubclass(?TYPEVAR1,Share), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR0,?organization-8) ==> {(shareOf ?share-2 ?organization-8)}.

dobj(taking*,?substance-14), mark(taking*,of*), nsubj(effect*,?syndrome-4), cop(effect*,is*), nsubj(effect*,?disease-2), acl(effect*,taking*), amod(effect*,side*), sumo(?TYPEVAR0,?substance-14), sumo(?TYPEVAR1,?syndrome-4), sumo(?TYPEVAR2,?disease-2), isSubclass(?TYPEVAR2,DiseaseOrSyndrome), isSubclass(?TYPEVAR0,BiologicallyActiveSubstance), isSubclass(?TYPEVAR1,DiseaseOrSyndrome) ==> {(sideEffect ?substance-14 ?disease-2)}.

nsubj(sister*,?woman-2), cop(sister*,is*), nmod:of(sister*,?human-8), case(?human-8,of*), isSubclass(?TYPEVAR0,Woman), sumo(?TYPEVAR0,?woman-2), sumo(?TYPEVAR1,?human-8), isSubclass(?TYPEVAR1,Human) ==> {(sister ?woman-2 ?human-8)}.

cop(catalog*,is*), case(?WebSite-8,for*), nmod:for(catalog*,?WebSite-8), nsubj(catalog*,?database-2), sumo(?TYPEVAR1,?database-2), sumo(?TYPEVAR0,?WebSite-8), isSubclass(?TYPEVAR0,WebSite), isSubclass(?TYPEVAR1,Database) ==> {(siteCatalog ?database-2 ?WebSite-8)}.

auxpass(contacted*,be*), aux(contacted*,can*), case(?ContactSite-8,at*), nmod:at(contacted*,?ContactSite-8), nsubjpass(contacted*,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?ContactSite-8), isSubclass(?TYPEVAR0,ContactSite), sumo(?TYPEVAR1,?agent-2) ==> {(siteForContact ?ContactSite-8 ?agent-2)}.

case(?time-12,during*), nsubj(falling*,rate*), cop(?quantity-17,is*), nmod:of(rate*,snow*), nmod(falling*,?quantity-17), case(?area-9,at*), nmod:at(falling*,?area-9), case(snow*,of*), sumo(?TYPEVAR2,?area-9), isSubclass(?TYPEVAR1,FunctionQuantity), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR1,?quantity-17), isSubclass(?TYPEVAR2,GeographicArea), sumo(?TYPEVAR0,?time-12) ==> {(snowfallIntensity ?area-9 ?time-12 ?quantity-17)}.

nsubj(have*,rooms*), case(?inventory-6,in*), nmod:in(rooms*,?inventory-6), dobj(have*,?attribute-10), isSubclass(?TYPEVAR0,RoomInventory), sumo(?TYPEVAR0,?inventory-6), isSubclass(?TYPEVAR1,RelationalAttribute), sumo(?TYPEVAR1,?attribute-10) ==> {(someRoomsAttribute ?inventory-6 ?attribute-10)}.

case(?inventory-6,in*), nmod:in(rooms*,?inventory-6), nsubj(have*,rooms*), dobj(have*,?kind-9), isSubclass(?TYPEVAR0,RoomInventory), sumo(?TYPEVAR1,?kind-9), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?inventory-6) ==> {(someRoomsPhysicalAmenity ?inventory-6 ?kind-9)}.

nmod:in(rooms*,?inventory-6), dobj(have*,?policy-9), case(?inventory-6,in*), nsubj(have*,rooms*), isSubclass(?TYPEVAR0,RoomInventory), sumo(?TYPEVAR0,?inventory-6), isSubclass(?TYPEVAR1,Policy), sumo(?TYPEVAR1,?policy-9) ==> {(someRoomsPolicy ?inventory-6 ?policy-9)}.

dobj(have*,?kind-9), nsubj(have*,rooms*), nmod:in(rooms*,?inventory-6), case(?inventory-6,in*), sumo(?TYPEVAR1,?inventory-6), isSubclass(?TYPEVAR0,ServiceProcess), sumo(?TYPEVAR0,?kind-9), isSubclass(?TYPEVAR1,RoomInventory) ==> {(someRoomsServiceAmenity ?inventory-6 ?kind-9)}.

nsubj(son*,?organism-2), cop(son*,is*), case(?organism-9,of*), nmod:of(son*,?organism-9), sumo(?TYPEVAR0,?organism-2), isSubclass(?TYPEVAR1,Organism), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR1,?organism-9) ==> {(son ?organism-2 ?organism-9)}.

cop(performer*,is*), nmod:in(performer*,?recording-10), case(?recording-10,in*), nsubj(performer*,?agent-3), sumo(?TYPEVAR0,?recording-10), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR0,MusicRecording) ==> {(songArtist ?recording-10 ?agent-3)}.

case(?language-11,in*), acl(title*,sort*), nmod:in(sort*,?language-11), case(?entity-8,for*), nmod:for(sort*,?entity-8), cop(?string-15,is*), mark(sort*,to*), nsubj(?string-15,title*), case(?entity-8,on*), sumo(?TYPEVAR1,?entity-8), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR0,?language-11), sumo(?TYPEVAR2,?string-15), isSubclass(?TYPEVAR0,Language), isSubclass(?TYPEVAR2,SymbolicString) ==> {(sortingTitle ?string-15 ?entity-8 ?language-11)}.

nmod:of(frequency*,?tone-6), cop(?quantity-10,is*), case(?tone-6,of*), nsubj(?quantity-10,frequency*), isSubclass(?TYPEVAR1,FunctionQuantity), isSubclass(?TYPEVAR0,MusicalTone), sumo(?TYPEVAR0,?tone-6), sumo(?TYPEVAR1,?quantity-10) ==> {(soundFrequency ?tone-6 ?quantity-10)}.

nmod:of(radius*,?object-5), nsubj(?measure-9,radius*), cop(?measure-9,is*), case(?object-5,of*), isSubclass(?TYPEVAR1,LengthMeasure), sumo(?TYPEVAR0,?object-5), sumo(?TYPEVAR1,?measure-9), isSubclass(?TYPEVAR0,Object) ==> {(sphereRadius ?object-5 ?measure-9)}.

nsubj(spouse*,?human-2), case(?human-9,of*), nmod:of(spouse*,?human-9), cop(spouse*,is*), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?human-2), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?human-9) ==> {(spouse ?human-2 ?human-9)}.

nsubj(device*,?device-4), amod(device*,standard*), nmod:for(device*,?process-13), compound(device*,error*), case(?process-13,for*), cop(device*,is*), isSubclass(?TYPEVAR1,ComputerProcess), sumo(?TYPEVAR0,?device-4), sumo(?TYPEVAR1,?process-13), isSubclass(?TYPEVAR0,ComputerOutputDevice) ==> {(standardErrorDevice ?process-13 ?device-4)}.

cop(device*,is*), compound(device*,input*), nmod:for(device*,?process-13), amod(device*,standard*), nsubj(device*,?device-4), case(?process-13,for*), isSubclass(?TYPEVAR1,ComputerInputDevice), sumo(?TYPEVAR1,?device-4), sumo(?TYPEVAR0,?process-13), isSubclass(?TYPEVAR0,ComputerProcess) ==> {(standardInputDevice ?process-13 ?device-4)}.

nmod:for(device*,?process-13), amod(device*,standard*), compound(device*,output*), nsubj(device*,?device-4), case(?process-13,for*), cop(device*,is*), sumo(?TYPEVAR0,?process-13), sumo(?TYPEVAR1,?device-4), isSubclass(?TYPEVAR1,ComputerOutputDevice), isSubclass(?TYPEVAR0,ComputerProcess) ==> {(standardOutputDevice ?process-13 ?device-4)}.

amod(hours*,retail*), case(?agent-7,for*), nmod:for(hours*,?agent-7), cop(?kind-10,are*), amod(hours*,standard*), nsubj(?kind-10,hours*), sumo(?TYPEVAR0,?agent-7), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR1,?kind-10), isSubclass(?TYPEVAR0,Agent) ==> {(standardRetailHours ?kind-10 ?agent-7)}.

nmod:of(delay*,?program-8), cop(?duration-12,is*), case(?program-8,of*), nsubj(?duration-12,delay*), compound(delay*,startup*), compound(delay*,time*), sumo(?TYPEVAR1,?duration-12), isSubclass(?TYPEVAR0,ComputerProgram), sumo(?TYPEVAR0,?program-8), isSubclass(?TYPEVAR1,TimeDuration) ==> {(startupTimeDelay ?program-8 ?duration-12)}.

; acl:relcl(state*,?state-11), case(process*,of*), nmod:of(state*,process*), cop(?state-11,is*), isSubclass(?TYPEVAR0,ProcessState), sumo(?TYPEVAR0,?state-11) ==> {(stateOfProcess null ?state-11)}.

dobj(states*,?sentence-6), nsubj(states*,?agent-3), isSubclass(?TYPEVAR0,Sentence), sumo(?TYPEVAR0,?sentence-6), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR1,CognitiveAgent) ==> {(states ?agent-3 ?sentence-6)}.

cop(sample*,is*), case(?experimenting-12,for*), nsubj(sample*,?collection-2), case(?collection-9,of*), nmod:of(sample*,?collection-9), sumo(?TYPEVAR0,?experimenting-12), isSubclass(?TYPEVAR0,Experimenting), isSubclass(?TYPEVAR2,Collection), sumo(?TYPEVAR1,?collection-2), isSubclass(?TYPEVAR1,Collection), sumo(?TYPEVAR2,?collection-9) ==> {(statisticalPopulation ?collection-2 ?collection-9 ?experimenting-12)}.

nsubj(status*,?status-3), nmod:of(status*,?process-10), cop(status*,is*), case(?process-10,of*), isSubclass(?TYPEVAR0,ProcessStatus), isSubclass(?TYPEVAR1,ComputerProcess), sumo(?TYPEVAR0,?status-3), sumo(?TYPEVAR1,?process-10) ==> {(status ?process-10 ?status-3)}.

nmod:at(stays*,?residence-7), amod(stays*,?human-2), case(?residence-7,at*), isSubclass(?TYPEVAR0,TemporaryResidence), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?residence-7), sumo(?TYPEVAR1,?human-2) ==> {(stays ?human-2 ?residence-7)}.

cop(stepfather*,is*), nmod:of(stepfather*,?human-8), case(?human-8,of*), nsubj(stepfather*,?man-2), isSubclass(?TYPEVAR0,Human), isSubclass(?TYPEVAR1,Man), sumo(?TYPEVAR0,?human-8), sumo(?TYPEVAR1,?man-2) ==> {(stepfather ?human-8 ?man-2)}.

nsubj(stepfather*,?woman-2), nmod:of(stepfather*,?human-8), case(?human-8,of*), cop(stepfather*,is*), sumo(?TYPEVAR1,?human-8), sumo(?TYPEVAR0,?woman-2), isSubclass(?TYPEVAR1,Human), isSubclass(?TYPEVAR0,Woman) ==> {(stepmother ?human-8 ?woman-2)}.

nsubjpass(stored*,?object-4), auxpass(stored*,is*), case(?DataStorageDevice-9,on*), nmod:on(stored*,?DataStorageDevice-9), isSubclass(?TYPEVAR0,ContentBearingObject), sumo(?TYPEVAR1,?DataStorageDevice-9), isSubclass(?TYPEVAR1,DataStorageDevice), sumo(?TYPEVAR0,?object-4) ==> {(stored ?object-4 ?DataStorageDevice-9)}.

nsubj(outfall*,?area-3), nmod:of(outfall*,?river-9), case(?river-9,of*), cop(outfall*,is*), isSubclass(?TYPEVAR0,WaterArea), sumo(?TYPEVAR0,?area-3), isSubclass(?TYPEVAR1,River), sumo(?TYPEVAR1,?river-9) ==> {(streamOutfall ?area-3 ?river-9)}.

compound(?attribute-8,strictness*), nsubj(has*,?system-3), dobj(has*,?attribute-8), isSubclass(?TYPEVAR0,StrictnessAttribute), sumo(?TYPEVAR0,?attribute-8), sumo(?TYPEVAR1,?system-3), isSubclass(?TYPEVAR1,RealtimeSystem) ==> {(strictness ?system-3 ?attribute-8)}.

nmod:of(concatenation*,?string-11), nmod:of(concatenation*,?string-6), case(?string-6,of*), cop(?string-16,is*), nsubj(?string-16,concatenation*), cc(?string-6,and*), sumo(?TYPEVAR1,?string-6), sumo(?TYPEVAR0,?string-11), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR2,SymbolicString), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR2,?string-16) ==> {(stringConcatenation ?string-6 ?string-11 ?string-16)}.

; nsubj(characters*,string*), compound(characters*,integer*), cop(characters*,is*), amod(characters*,nonnegative*), amod(string*,symbolic*), advmod(characters*,long*) ==> ; {(stringLength null null)}.

nmod:of(student*,?organization-9), cop(student*,is*), nsubj(student*,?human-2), case(?organization-9,of*), isSubclass(?TYPEVAR0,EducationalOrganization), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?organization-9), sumo(?TYPEVAR1,?human-2) ==> {(student ?human-2 ?organization-9)}.

; nsubj(sub-brand*,?entity-3), nmod:of(sub-brand*,entity*), case(entity*,of*), cop(sub-brand*,is*), sumo(?TYPEVAR0,?entity-3), isSubclass(?TYPEVAR0,Entity) ==> {(subBrand null ?entity-3)}.

; case(field*,of*), cop(sub-field*,is*), case(study*,of*), nmod:of(sub-field*,field*), amod(field*,other*), nsubj(sub-field*,?field-2), nmod:of(field*,study*), sumo(?TYPEVAR0,?field-2), isSubclass(?TYPEVAR0,FieldOfStudy) ==> {(subField ?field-2 null)}.

; cop(?attribute-8,is*), nsubj(believes*,?agent-2), ccomp(believes*,?attribute-8), sumo(?TYPEVAR0,?attribute-8), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR0,Attribute) ==> {(subjectiveAttribute null ?attribute-8 ?agent-2)}.

; nsubj(sub-language*,?language-2), case(language*,of*), amod(language*,other*), cop(sub-language*,is*), nmod:of(sub-language*,language*), isSubclass(?TYPEVAR0,Language), sumo(?TYPEVAR0,?language-2) ==> {(subLanguage ?language-2 null)}.

; case(string*,of*), nsubj(sub-string*,?string-3), amod(string*,other*), amod(string*,symbolic*), cop(sub-string*,is*), nmod:of(sub-string*,string*), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-3) ==> {(subString ?string-3 null)}.

; nmod:in(physical*,language*), acl(content*,bearing*), dobj(bearing*,physical*), cop(sub-title*,is*), case(kind*,for*), case(language*,in*), nmod:for(sub-title*,kind*), nsubj(sub-title*,?string-3), nmod:of(kind*,content*), case(content*,of*), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR0,?string-3) ==> ; {(subtitle ?string-3 null null)}.

nsubj(?process-9,event*), cop(?process-9,is*), case(?experimenting-6,of*), compound(event*,success*), nmod:of(event*,?experimenting-6), isSubclass(?TYPEVAR1,Experimenting), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR0,?process-9), sumo(?TYPEVAR1,?experimenting-6) ==> {(successEvent ?experimenting-6 ?process-9)}.

case(?process-6,from*), nmod:from(suffers*,?process-6), nsubj(suffers*,?agent-2), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?process-6) ==> {(suffers ?process-6 ?agent-2)}.

cop(?attribute-11,is*), nsubj(?attribute-11,behavior*), nmod:of(behavior*,?system-6), case(?system-6,of*), sumo(?TYPEVAR0,?attribute-11), sumo(?TYPEVAR1,?system-6), isSubclass(?TYPEVAR0,SystemBehaviorAttribute), isSubclass(?TYPEVAR1,RealtimeSystem) ==> {(systemBehavior ?system-6 ?attribute-11)}.

compound(tags*,?internet-2), nsubj(?user-8,tags*), compound(tags*,?user-3), sumo(?TYPEVAR2,?user-3), isSubclass(?TYPEVAR1,InternetUser), sumo(?TYPEVAR0,?internet-2), isSubclass(?TYPEVAR0,InternetUser), isSubclass(?TYPEVAR2,InternetUser), sumo(?TYPEVAR1,?user-8) ==> {(tags ?internet-2 ?user-8)}.

dobj(describes*,?system-8), nsubj(describes*,?attribute-4), isSubclass(?TYPEVAR0,RealtimeSystem), isSubclass(?TYPEVAR1,TaskRelationAttribute), sumo(?TYPEVAR1,?attribute-4), sumo(?TYPEVAR0,?system-8) ==> {(taskRelation ?system-8 ?attribute-4)}.

compound(income*,Tax*), amod(income*,deferred*), case(?human-6,for*), cop(?measure-15,is*), acl(?human-6,resulting*), case(?process-11,from*), nmod:for(income*,?human-6), nsubj(?measure-15,income*), nmod:from(resulting*,?process-11), sumo(?TYPEVAR1,?measure-15), sumo(?TYPEVAR2,?process-11), sumo(?TYPEVAR0,?human-6), isSubclass(?TYPEVAR0,Human), isSubclass(?TYPEVAR1,CurrencyMeasure), isSubclass(?TYPEVAR2,OrganizationalProcess) ==> {(taxDeferredIncome ?human-6 ?measure-15 ?process-11)}.

nmod:in(teacher*,?organization-9), cop(teacher*,is*), case(?organization-9,in*), nsubj(teacher*,?human-2), sumo(?TYPEVAR0,?organization-9), sumo(?TYPEVAR1,?human-2), isSubclass(?TYPEVAR0,EducationalOrganization), isSubclass(?TYPEVAR1,Human) ==> {(teacher ?human-2 ?organization-9)}.

cop(?string-10,is*), compound(code*,area*), nsubj(?string-10,code*), nmod:in(code*,?TelecomNumber-6), case(?TelecomNumber-6,in*), isSubclass(?TYPEVAR1,TelecomNumber), sumo(?TYPEVAR1,?TelecomNumber-6), sumo(?TYPEVAR0,?string-10), isSubclass(?TYPEVAR0,SymbolicString) ==> {(telecomAreaCode ?string-10 ?TelecomNumber-6)}.

nmod:in(code*,?TelecomNumber-6), cop(?string-10,is*), amod(code*,secondary*), nsubj(?string-10,code*), case(?TelecomNumber-6,in*), sumo(?TYPEVAR1,?string-10), isSubclass(?TYPEVAR1,SymbolicString), isSubclass(?TYPEVAR0,TelecomNumber), sumo(?TYPEVAR0,?TelecomNumber-6) ==> {(telecomCode2 ?string-10 ?TelecomNumber-6)}.

nmod:at(reached*,?TelephonyDevice-8), case(?TelephonyDevice-8,at*), auxpass(reached*,be*), nsubjpass(reached*,?agent-2), aux(reached*,can*), isSubclass(?TYPEVAR0,TelephonyDevice), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?TelephonyDevice-8), sumo(?TYPEVAR1,?agent-2) ==> {(telecomContactDevice ?TelephonyDevice-8 ?agent-2)}.

nsubj(number*,?string-3), nmod:in(number*,?TelecomNumber-10), cop(number*,is*), case(?TelecomNumber-10,in*), compound(number*,core*), sumo(?TYPEVAR0,?string-3), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,TelecomNumber), sumo(?TYPEVAR1,?TelecomNumber-10) ==> {(telecomCoreNumber ?string-3 ?TelecomNumber-10)}.

cop(code*,is*), nsubj(code*,?string-3), compound(code*,country*), nmod:in(code*,?TelecomNumber-10), case(?TelecomNumber-10,in*), sumo(?TYPEVAR1,?TelecomNumber-10), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,TelecomNumber), sumo(?TYPEVAR0,?string-3) ==> {(telecomCountryCode ?string-3 ?TelecomNumber-10)}.

nsubj(extension*,?string-3), cop(extension*,is*), nmod:in(extension*,?TelecomNumber-9), case(?TelecomNumber-9,in*), sumo(?TYPEVAR0,?string-3), sumo(?TYPEVAR1,?TelecomNumber-9), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,TelecomNumber) ==> {(telecomExtension ?string-3 ?TelecomNumber-9)}.

cop(number*,is*), nmod:of(number*,?agent-9), compound(number*,telephone*), nsubj(number*,?TelecomNumber-2), case(?agent-9,of*), sumo(?TYPEVAR1,?TelecomNumber-2), isSubclass(?TYPEVAR1,TelecomNumber), sumo(?TYPEVAR0,?agent-9), isSubclass(?TYPEVAR0,Agent) ==> {(telephoneNumber ?TelecomNumber-2 ?agent-9)}.

amod(form*,printable*), nmod:of(form*,?entity-10), case(?entity-10,of*), case(?language-13,in*), cop(form*,is*), nsubj(form*,?string-3), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Language), sumo(?TYPEVAR0,?entity-10), sumo(?TYPEVAR1,?language-13), isSubclass(?TYPEVAR2,SymbolicString), sumo(?TYPEVAR2,?string-3) ==> {(termFormat ?language-13 ?entity-10 ?string-3)}.

nmod:of(title*,?entity-5), nsubj(?string-12,title*), cop(?string-12,is*), case(?entity-5,of*), nmod:in(title*,?language-8), case(?language-8,in*), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR2,Language), sumo(?TYPEVAR0,?entity-5), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR1,?string-12), sumo(?TYPEVAR2,?language-8) ==> {(titleInLanguage ?string-12 ?entity-5 ?language-8)}.

case(?kind-5,of*), nmod:of(title*,?kind-5), cop(?string-13,is*), isSubclass(?TYPEVAR0,ContentBearingPhysical), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR0,?kind-5), sumo(?TYPEVAR1,?string-13) ==> {(titles ?string-13 ?kind-5)}.

amod(speed*,top*), cop(?quantity-10,is*), nmod:of(speed*,?vehicle-6), nsubj(?quantity-10,speed*), case(?vehicle-6,of*), sumo(?TYPEVAR1,?vehicle-6), sumo(?TYPEVAR0,?quantity-10), isSubclass(?TYPEVAR0,FunctionQuantity), isSubclass(?TYPEVAR1,Vehicle) ==> {(topSpeed ?vehicle-6 ?quantity-10)}.

case(values*,of*), nmod:of(total*,values*), cop(?quantity-10,is*), nsubj(?quantity-10,total*), nmod:in(values*,?class-7), case(?class-7,in*), sumo(?TYPEVAR0,?quantity-10), sumo(?TYPEVAR1,?class-7), isSubclass(?TYPEVAR0,Quantity), isSubclass(?TYPEVAR1,Class) ==> {(total ?class-7 ?quantity-10)}.

case(?entity-5,of*), cop(?string-13,is*), case(?language-9,into*), acl(?entity-5,translated*), nmod:into(translated*,?language-9), nmod:of(title*,?entity-5), nsubj(?string-13,title*), sumo(?TYPEVAR1,?string-13), sumo(?TYPEVAR0,?entity-5), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR2,?language-9), isSubclass(?TYPEVAR1,SymbolicString), isSubclass(?TYPEVAR2,Language) ==> {(translatedTitle ?string-13 ?entity-5 ?language-9)}.

dobj(has*,?attribute-7), case(?policy-12,of*), nmod:of(part*,?policy-12), acl(?policy-12,issued*), cop(part*,is*), case(?entity-16,by*), nmod:by(issued*,?entity-16), acl:relcl(?formula-2,has*), nsubj(has*,which*), nsubj(part*,?formula-2), sumo(?TYPEVAR0,?attribute-7), isSubclass(?TYPEVAR1,Policy), sumo(?TYPEVAR1,?policy-12), sumo(?TYPEVAR2,?entity-16), isSubclass(?TYPEVAR2,Entity), sumo(?TYPEVAR3,?formula-2), isSubclass(?TYPEVAR0,DeonticAttribute), isSubclass(?TYPEVAR3,Formula) ==> {(travelPolicyClause ?formula-2 ?attribute-7 ?policy-12 ?entity-16)}.

nmod:of(study*,?experimenting-10), cop(object*,is*), case(study*,of*), case(?experimenting-10,of*), nmod:of(object*,study*), nsubj(object*,?WebPage-2), isSubclass(?TYPEVAR0,Experimenting), sumo(?TYPEVAR1,?WebPage-2), sumo(?TYPEVAR0,?experimenting-10), isSubclass(?TYPEVAR1,WebPage) ==> {(treatedPage ?WebPage-2 ?experimenting-10)}.

cop(?formula-12,is*), nmod:in(page*,?experimenting-9), nmod:of(definition*,page*), case(?experimenting-9,in*), nsubj(?formula-12,definition*), amod(page*,treated*), case(page*,of*), sumo(?TYPEVAR1,?experimenting-9), isSubclass(?TYPEVAR0,Formula), sumo(?TYPEVAR0,?formula-12), isSubclass(?TYPEVAR1,Experimenting) ==> {(treatedPageDefinition ?experimenting-9 ?formula-12)}.

xcomp(treated*,used*), nsubj(treated*,?human-2), nmod:in(used*,?experimenting-9), case(?experimenting-9,in*), cop(treated*,is*), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?experimenting-9), isSubclass(?TYPEVAR1,Experimenting), sumo(?TYPEVAR0,?human-2) ==> {(treatedUser ?human-2 ?experimenting-9)}.

cop(group*,is*), nmod:in(group*,?experimenting-9), nsubj(group*,?collection-2), case(?experimenting-9,in*), compound(group*,treatment*), isSubclass(?TYPEVAR1,Collection), sumo(?TYPEVAR1,?collection-2), isSubclass(?TYPEVAR0,Experimenting), sumo(?TYPEVAR0,?experimenting-9) ==> {(treatmentGroup ?collection-2 ?experimenting-9)}.

nmod:of(tributary*,?entity-8), cop(tributary*,is*), nsubj(tributary*,?physical-2), case(?entity-8,of*), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?physical-2), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR0,?entity-8) ==> {(tributary ?physical-2 ?entity-8)}.

mark(part*,that*), case(population*,of*), amod(population*,statistical*), nsubj(part*,?collection-5), nsubj(?number-20,probability*), ccomp(probability*,part*), cop(part*,are*), amod(population*,same*), cc(?collection-5,and*), nmod:of(part*,population*), nsubj(part*,?collection-9), cop(?number-20,is*), sumo(?TYPEVAR0,?collection-5), sumo(?TYPEVAR1,?number-20), isSubclass(?TYPEVAR0,Collection), isSubclass(?TYPEVAR2,Collection), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR2,?collection-9) ==> {(tTest ?collection-5 ?collection-9 ?number-20)}.

nmod:of(action*,?kind-12), cop(action*,is*), case(?kind-12,of*), nsubj(action*,?kind-2), amod(action*,typical*), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR0,?kind-12), isSubclass(?TYPEVAR1,Process), isSubclass(?TYPEVAR0,Agent) ==> {(typicalAction ?kind-2 ?kind-12)}.

dobj(has*,part*), nsubj(has*,?kind-3), advmod(has*,typically*), nmod:npmod(part*,?kind-11), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?kind-3), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?kind-11) ==> {(typicallyContainsPart ?kind-11 ?kind-3)}.

nsubj(part*,?kind-3), case(?kind-13,of*), cop(part*,is*), advmod(part*,typically*), nmod:of(part*,?kind-13), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?kind-3), sumo(?TYPEVAR1,?kind-13), isSubclass(?TYPEVAR0,Object) ==> {(typicalPart ?kind-3 ?kind-13)}.

nsubj(isgnifies*,?UserDirectAction-2), dobj(isgnifies*,?UserSignifiedAction-5), sumo(?TYPEVAR0,?UserDirectAction-2), isSubclass(?TYPEVAR1,UserSignifiedAction), isSubclass(?TYPEVAR0,UserDirectAction), sumo(?TYPEVAR1,?UserSignifiedAction-5) ==> {(udaCanSignify ?UserDirectAction-2 ?UserSignifiedAction-5)}.

nsubj(?man-8,uncle*), cop(?man-8,is*), nmod:of(uncle*,?human-5), case(?human-5,of*), isSubclass(?TYPEVAR0,Man), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR0,?man-8), sumo(?TYPEVAR1,?human-5) ==> {(uncle ?man-8 ?human-5)}.

nsubj(user*,?human-2), case(?WebSite-9,of*), nmod:of(user*,?WebSite-9), amod(user*,underage*), cop(user*,is*), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR0,?human-2), sumo(?TYPEVAR1,?WebSite-9), isSubclass(?TYPEVAR1,WebSite) ==> {(underageUser ?human-2 ?WebSite-9)}.

cop(ID*,is*), nmod:for(ID*,?physical-11), case(?physical-11,for*), nsubj(ID*,?string-3), mwe(with*,respect*), case(?physical-16,with*), amod(ID*,unique*), mwe(with*,to*), isSubclass(?TYPEVAR1,SymbolicString), isSubclass(?TYPEVAR2,Physical), sumo(?TYPEVAR0,?physical-11), sumo(?TYPEVAR1,?string-3), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR2,?physical-16) ==> {(uniqueIdWithRespectTo ?physical-16 ?physical-11 ?string-3)}.

compound(number*,unit*), case(?PostalPlace-6,of*), nmod:of(number*,?PostalPlace-6), nsubj(?string-10,number*), cop(?string-10,is*), isSubclass(?TYPEVAR1,SymbolicString), isSubclass(?TYPEVAR0,PostalPlace), sumo(?TYPEVAR1,?string-10), sumo(?TYPEVAR0,?PostalPlace-6) ==> {(unitNumber ?string-10 ?PostalPlace-6)}.

case(?quantity-15,for*), cop(?kind-18,is*), nsubj(charged*,price*), nmod:under(charged*,?scheme-11), case(?scheme-11,under*), dobj(charged*,?agent-7), compound(price*,unit*), csubj(?kind-18,charged*), sumo(?TYPEVAR3,?agent-7), isSubclass(?TYPEVAR2,PricingScheme), sumo(?TYPEVAR0,?quantity-15), sumo(?TYPEVAR1,?kind-18), isSubclass(?TYPEVAR0,FunctionQuantity), isSubclass(?TYPEVAR3,CognitiveAgent), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR2,?scheme-11) ==> {(unitPrice ?kind-18 ?quantity-15 ?agent-7 ?scheme-11)}.

neg(buy*,n't*), aux(buy*,did*), nsubj(buy*,?agent-2), dobj(buy*,?object-7), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?object-7), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR1,Object) ==> {(unpaidItem ?object-7 ?agent-2)}.

cop(database*,is*), compound(database*,user*), nmod:for(database*,?WebSite-9), nsubj(database*,?database-2), case(?WebSite-9,for*), sumo(?TYPEVAR1,?database-2), sumo(?TYPEVAR0,?WebSite-9), isSubclass(?TYPEVAR0,WebSite), isSubclass(?TYPEVAR1,Database) ==> {(userDatabase ?database-2 ?WebSite-9)}.

compound(score*,user*), case(?account-8,from*), compound(score*,feedback*), nmod:from(score*,?account-8), cop(?number-12,is*), nsubj(?number-12,score*), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR1,?number-12), isSubclass(?TYPEVAR0,UserAccount), sumo(?TYPEVAR0,?account-8) ==> {(userFeedbackScore ?account-8 ?number-12)}.

nsubj(?Identifier-9,ID*), cop(?Identifier-9,is*), nmod:for(ID*,?account-6), case(?account-6,for*), sumo(?TYPEVAR1,?account-6), isSubclass(?TYPEVAR0,Identifier), sumo(?TYPEVAR0,?Identifier-9), isSubclass(?TYPEVAR1,UserAccount) ==> {(userIDString ?Identifier-9 ?account-6)}.

nmod:of(name*,?user-7), case(?user-7,of*), compound(name*,user*), nsubj(?name-11,name*), cop(?name-11,is*), sumo(?TYPEVAR0,?user-7), sumo(?TYPEVAR1,?name-11), isSubclass(?TYPEVAR1,UserName), isSubclass(?TYPEVAR0,ComputerUser) ==> {(userName ?user-7 ?name-11)}.

auxpass(called*,is*), xcomp(called*,?string-11), case(?language-6,in*), nsubjpass(called*,?entity-2), sumo(?TYPEVAR1,?language-6), sumo(?TYPEVAR2,?entity-2), isSubclass(?TYPEVAR0,SymbolicString), isSubclass(?TYPEVAR1,HumanLanguage), isSubclass(?TYPEVAR2,Entity), sumo(?TYPEVAR0,?string-11) ==> {(utterance ?language-6 ?entity-2 ?string-11)}.

cop(valid*,is*), nmod:for(valid*,?kind-8), case(?kind-8,for*), nsubj(valid*,?scheme-3), sumo(?TYPEVAR0,?kind-8), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?scheme-3), isSubclass(?TYPEVAR1,PricingScheme) ==> {(validFor ?scheme-3 ?kind-8)}.

nmod:during(valid*,?time-8), nsubj(valid*,?scheme-3), cop(valid*,is*), case(?time-8,during*), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR1,?scheme-3), isSubclass(?TYPEVAR1,PricingScheme), sumo(?TYPEVAR0,?time-8) ==> {(validityPeriod ?scheme-3 ?time-8)}.

nsubj(payment*,?kind-2), cop(payment*,is*), nmod:under(payment*,?scheme-12), amod(payment*,valid*), case(?scheme-12,under*), isSubclass(?TYPEVAR0,Payment), sumo(?TYPEVAR1,?scheme-12), isSubclass(?TYPEVAR1,PricingScheme), sumo(?TYPEVAR0,?kind-2) ==> {(validPaymentType ?scheme-12 ?kind-2)}.

; case(1*,by*), nmod:of(list*,items*), nsubj(list*,%*), case(items*,of*), nummod(%*,2*), acl(items*,viewed*), nmod:by(viewed*,1*), cop(list*,is*) ==> ; {(viewedItemList null null)}.

nsubj(viewed*,?agent-2), dobj(viewed*,?listing-6), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?listing-6), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR1,WebListing) ==> {(viewedListing ?agent-2 ?listing-6)}.

aux(see*,can*), nmod:in(person*,?object-5), nsubj(see*,person*), dobj(see*,?kind-9), case(?object-5,in*), sumo(?TYPEVAR0,?object-5), sumo(?TYPEVAR1,?kind-9), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Physical) ==> {(viewType ?object-5 ?kind-9)}.

case(?position-9,during*), cop(?measure-13,is*), nmod:at(visibility*,?region-5), nmod:during(visibility*,?position-9), case(?region-5,at*), nsubj(?measure-13,visibility*), sumo(?TYPEVAR2,?region-5), isSubclass(?TYPEVAR2,Region), sumo(?TYPEVAR0,?position-9), isSubclass(?TYPEVAR0,TimePosition), isSubclass(?TYPEVAR1,LengthMeasure), sumo(?TYPEVAR1,?measure-13) ==> {(visibilityInMeteorology ?region-5 ?position-9 ?measure-13)}.

nsubj(visits*,who*), auxpass(known*,is*), case(?agent-7,about*), acl:relcl(?agent-7,visits*), nsubjpass(known*,?formula-2), nmod:about(known*,?agent-7), dobj(visits*,?WebSite-11), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR0,?agent-7), sumo(?TYPEVAR1,?formula-2), isSubclass(?TYPEVAR1,Formula), isSubclass(?TYPEVAR2,WebSite), sumo(?TYPEVAR2,?WebSite-11) ==> {(visitorParameter ?agent-7 ?formula-2 ?WebSite-11)}.

nsubj(?quantity-10,voltage*), cop(?quantity-10,is*), case(?source-6,of*), nmod:of(voltage*,?source-6), sumo(?TYPEVAR0,?quantity-10), sumo(?TYPEVAR1,?source-6), isSubclass(?TYPEVAR0,PhysicalQuantity), isSubclass(?TYPEVAR1,PowerSource) ==> {(voltageMeasure ?source-6 ?quantity-10)}.

case(?WebSite-6,on*), dobj(watching*,?collection-10), aux(watching*,is*), acl:relcl(User*,watching*), nsubj(watching*,?agent-3), sumo(?TYPEVAR1,?collection-10), isSubclass(?TYPEVAR2,Agent), sumo(?TYPEVAR2,?agent-3), isSubclass(?TYPEVAR0,WebSite), isSubclass(?TYPEVAR1,Collection), sumo(?TYPEVAR0,?WebSite-6) ==> {(watchingListings ?agent-3 ?collection-10 ?WebSite-6)}.

nmod:of(wavelength*,?radiating-5), nsubj(?measure-9,wavelength*), case(?radiating-5,of*), cop(?measure-9,is*), sumo(?TYPEVAR0,?radiating-5), isSubclass(?TYPEVAR1,LengthMeasure), isSubclass(?TYPEVAR0,Radiating), sumo(?TYPEVAR1,?measure-9) ==> {(wavelength ?radiating-5 ?measure-9)}.

nsubj(has*,?agent-3), compound(?collection-10,cart*), acl:relcl(User*,has*), case(?WebSite-6,at*), dobj(has*,?collection-10), isSubclass(?TYPEVAR1,Collection), isSubclass(?TYPEVAR2,WebSite), sumo(?TYPEVAR0,?agent-3), sumo(?TYPEVAR1,?collection-10), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR2,?WebSite-6) ==> {(webcart ?agent-3 ?collection-10 ?WebSite-6)}.

aux(bought*,has*), dobj(bought*,?collection-10), dep(bought*,User*), case(?Website-6,at*), nsubj(bought*,?human-3), sumo(?TYPEVAR0,?collection-10), isSubclass(?TYPEVAR1,Website), sumo(?TYPEVAR1,?Website-6), sumo(?TYPEVAR2,?human-3), isSubclass(?TYPEVAR0,Collection), isSubclass(?TYPEVAR2,Human) ==> {(webPurchases ?collection-10 ?human-3 ?Website-6)}.

nsubj(sold*,?human-3), dep(sold*,User*), dobj(sold*,?collection-10), case(?Website-6,at*), aux(sold*,has*), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR2,?Website-6), sumo(?TYPEVAR0,?human-3), isSubclass(?TYPEVAR2,Website), sumo(?TYPEVAR1,?collection-10), isSubclass(?TYPEVAR1,Collection) ==> {(webSales ?collection-10 ?human-3 ?Website-6)}.

case(?Website-8,at*), cop(seller*,is*), nsubj(seller*,?human-2), nmod:at(seller*,?Website-8), sumo(?TYPEVAR0,?Website-8), isSubclass(?TYPEVAR1,Human), sumo(?TYPEVAR1,?human-2), isSubclass(?TYPEVAR0,Website) ==> {(webSeller ?human-2 ?Website-8)}.

dobj(has*,?advertising-7), nsubj(has*,?store-3), compound(?advertising-7,advertisement*), isSubclass(?TYPEVAR1,WebStore), sumo(?TYPEVAR0,?advertising-7), sumo(?TYPEVAR1,?store-3), isSubclass(?TYPEVAR0,Advertising) ==> {(webStoreAdvertisement ?advertising-7 ?store-3)}.

cop(visitor*,is*), nsubj(visitor*,?agent-2), case(?WebSite-8,to*), nmod:to(visitor*,?WebSite-8), isSubclass(?TYPEVAR1,WebSite), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?WebSite-8), sumo(?TYPEVAR0,?agent-2) ==> {(webVisitor ?agent-2 ?WebSite-8)}.

case(?day-11,on*), auxpass(married*,were*), cc(?human-2,and*), nmod:on(married*,?day-11), nsubjpass(married*,?human-2), nsubjpass(married*,?human-6), sumo(?TYPEVAR0,?day-11), isSubclass(?TYPEVAR2,Human), sumo(?TYPEVAR1,?human-2), sumo(?TYPEVAR2,?human-6), isSubclass(?TYPEVAR0,Day), isSubclass(?TYPEVAR1,Human) ==> {(weddingdate ?human-2 ?human-6 ?day-11)}.

lemma(marry, ?marry), nsubj(?marry,?H1), dobj(?marry,?H2), sumo(?TYPEVAR1,?H1), sumo(?TYPEVAR2,?H2), isSubclass(?TYPEVAR1,Human), isSubclass(?TYPEVAR2,Human) ==> {(spouse ?H1 ?H2)}.

; nsubj(carry*,CarryBot*), aux(carry*,can*), iobj(carry*,things*), compound(measure*,length*), dobj(carry*,measure*), amod(measure*,wide*) ==> ; {(widthLimit null null)}.

nmod:of(wife*,?man-8), cop(wife*,is*), nsubj(wife*,?woman-2), case(?man-8,of*), sumo(?TYPEVAR1,?woman-2), isSubclass(?TYPEVAR0,Man), isSubclass(?TYPEVAR1,Woman), sumo(?TYPEVAR0,?man-8) ==> {(wife ?woman-2 ?man-8)}.

nsubj(has*,?agent-2), dobj(has*,number*), compound(number*,work*), dep(number*,?TelecomNumber-7), isSubclass(?TYPEVAR0,Agent), isSubclass(?TYPEVAR1,TelecomNumber), sumo(?TYPEVAR0,?agent-2), sumo(?TYPEVAR1,?TelecomNumber-7) ==> {(workPhoneNumber ?TelecomNumber-7 ?agent-2)}.

auxpass(built*,was*), nmod:in(built*,?kind-7), case(?kind-7,in*), nsubjpass(built*,?object-2), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?kind-7), isSubclass(?TYPEVAR0,Year) ==> {(yearBuilt ?object-2 ?kind-7)}.

dobj(yield*,?attribute-8), nsubj(yield*,?account-3), aux(yield*,has*), sumo(?TYPEVAR0,?attribute-8), sumo(?TYPEVAR1,?account-3), isSubclass(?TYPEVAR0,YieldAttribute), isSubclass(?TYPEVAR1,FinancialAccount) ==> {(yieldLevel ?account-3 ?attribute-8)}.

; cop(?measure-8,is*), acl:relcl(amplitude*,?measure-8), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR0,?measure-8) ==> {(physicalAmplitude null ?measure-8)}.

nsubj(?number-11,ratio*), nmod:of(ratio*,?system-7), case(?system-7,of*), cop(?number-11,is*), amod(ratio*,damping*), sumo(?TYPEVAR0,?number-11), sumo(?TYPEVAR1,?system-7), isSubclass(?TYPEVAR1,PhysicalSystem), isSubclass(?TYPEVAR0,RealNumber) ==> {(dampingRatio ?system-7 ?number-11)}.

nsubj(?quantity-11,frequency*), case(?system-7,of*), amod(frequency*,resonant*), nmod:of(frequency*,?system-7), cop(?quantity-11,is*), isSubclass(?TYPEVAR0,PhysicalQuantity), sumo(?TYPEVAR1,?system-7), isSubclass(?TYPEVAR1,PhysicalSystem), sumo(?TYPEVAR0,?quantity-11) ==> {(resonantFrequency ?system-7 ?quantity-11)}.

nmod:of(part*,?kind-13), case(?kind-13,of*), advmod(part*,typically*), cop(part*,is*), nsubj(part*,?kind-3), sumo(?TYPEVAR1,?kind-3), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR0,?kind-13), isSubclass(?TYPEVAR0,Process) ==> {(typicalTemporalPart ?kind-3 ?kind-13)}.

advmod(contains*,typically*), nsubj(contains*,?kind-3), dobj(contains*,?kind-10), sumo(?TYPEVAR1,?kind-10), isSubclass(?TYPEVAR0,Process), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR0,?kind-3) ==> {(typicallyContainsTemporalPart ?kind-10 ?kind-3)}.

cop(?measure-9,is*), nsubj(?measure-9,bore*), case(?cylinder-5,of*), nmod:of(bore*,?cylinder-5), isSubclass(?TYPEVAR1,Cylinder), isSubclass(?TYPEVAR0,LengthMeasure), sumo(?TYPEVAR1,?cylinder-5), sumo(?TYPEVAR0,?measure-9) ==> {(cylinderBore ?cylinder-5 ?measure-9)}.

case(molecules*,of*), case(molecule*,in*), cop(?integer-22,is*), nmod:of(number*,molecules*), nmod:of(molecules*,?kind-7), nmod:in(number*,molecule*), nsubj(?integer-22,number*), case(?kind-16,of*), case(?kind-7,of*), nmod:of(molecule*,?kind-16), isSubclass(?TYPEVAR2,CompoundSubstance), isSubclass(?TYPEVAR1,ElementalSubstance), sumo(?TYPEVAR1,?kind-7), sumo(?TYPEVAR0,?integer-22), isSubclass(?TYPEVAR0,Integer), sumo(?TYPEVAR2,?kind-16) ==> {(molecularRatio ?kind-7 ?integer-22 ?kind-16)}.

; nmod:of(volume*,cylinders*), nmod:in(?measure-15,engine*), case(engine*,in*), cop(?measure-15,is*), acl:relcl(volume*,?measure-15), case(cylinders*,of*), amod(volume*,minimum*), sumo(?TYPEVAR0,?measure-15), isSubclass(?TYPEVAR0,VolumeMeasure) ==> {(minCylinderVolume null ?measure-15)}.

; cop(?measure-15,is*), case(engine*,in*), compound(volume*,maximum*), nmod:of(volume*,cylinders*), acl:relcl(volume*,?measure-15), nmod:in(?measure-15,engine*), case(cylinders*,of*), sumo(?TYPEVAR0,?measure-15), isSubclass(?TYPEVAR0,VolumeMeasure) ==> {(maxCylinderVolume null ?measure-15)}.

nmod:of(ratio*,?engine-6), nsubj(?number-10,ratio*), compound(ratio*,compression*), cop(?number-10,is*), case(?engine-6,of*), sumo(?TYPEVAR1,?number-10), sumo(?TYPEVAR0,?engine-6), isSubclass(?TYPEVAR0,Engine), isSubclass(?TYPEVAR1,RealNumber) ==> {(compressionRatio ?engine-6 ?number-10)}.

compound(travel*,?engine-10), compound(distance*,maximum*), cop(?measure-15,is*), acl:relcl(distance*,travel*), mark(travel*,that*), nsubj(?measure-15,distance*), nmod:of(pistons*,engine*), nsubj(travel*,pistons*), case(engine*,of*), sumo(?TYPEVAR0,?engine-10), isSubclass(?TYPEVAR1,LengthMeasure), sumo(?TYPEVAR1,?measure-15), isSubclass(?TYPEVAR0,Engine) ==> {(pistonStroke ?engine-10 ?measure-15)}.

nsubj(?quantity-12,speed*), amod(speed*,idle*), nmod:of(speed*,?engine-8), cop(?quantity-12,is*), case(?engine-8,of*), sumo(?TYPEVAR0,?quantity-12), isSubclass(?TYPEVAR0,FunctionQuantity), isSubclass(?TYPEVAR1,InternalCombustionEngine), sumo(?TYPEVAR1,?engine-8) ==> {(engineIdleSpeed ?engine-8 ?quantity-12)}.

nmod:by(allowed*,?governor-7), acl(speed*,allowed*), cop(?quantity-11,is*), case(?governor-7,by*), nsubj(?quantity-11,speed*), compound(speed*,maximum*), isSubclass(?TYPEVAR1,FunctionQuantity), sumo(?TYPEVAR1,?quantity-11), sumo(?TYPEVAR0,?governor-7), isSubclass(?TYPEVAR0,SpeedGovernor) ==> {(governorSpeed ?governor-7 ?quantity-11)}.

case(coils*,of*), case(?coil-8,in*), nsubj(?integer-11,number*), nmod:of(number*,coils*), cop(?integer-11,is*), nmod:in(number*,?coil-8), sumo(?TYPEVAR1,?integer-11), isSubclass(?TYPEVAR0,WireCoil), sumo(?TYPEVAR0,?coil-8), isSubclass(?TYPEVAR1,Integer) ==> {(coilCount ?coil-8 ?integer-11)}.

case(?kind-5,of*), nmod:of(maker*,?kind-5), nsubj(?agent-10,maker*), cop(?agent-10,is*), sumo(?TYPEVAR1,?agent-10), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?kind-5), isSubclass(?TYPEVAR0,Object) ==> {(manufacturer ?kind-5 ?agent-10)}.

; nsubj(has*,engine*), compound(engine*,Engine*), compound(cylinders*,NonNegativeInteger*), dobj(has*,cylinders*) ==> ; {(engineCylinders null null)}.

nmod:of(end*,?object-6), cop(?object-9,is*), case(?object-6,of*), nsubj(?object-9,end*), nummod(end*,One*), sumo(?TYPEVAR0,?object-6), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?object-9) ==> {(physicalEnd ?object-9 ?object-6)}.

nsubj(?object-9,object*), nmod:in(transferred*,?transfer-6), case(?transfer-6,in*), cop(?object-9,is*), acl(object*,transferred*), sumo(?TYPEVAR1,?transfer-6), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-9), isSubclass(?TYPEVAR1,Transfer) ==> {(objectTransferred ?transfer-6 ?object-9)}.

nsubj(covers*,?object-2), dobj(covers*,?object-6), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-6) ==> {(covers ?object-2 ?object-6)}.

; case(?transfer-14,during*), case(path*,on*), case(?object-6,before*), nmod:on(?object-2,path*), sumo(?TYPEVAR0,?transfer-14), isSubclass(?TYPEVAR0,Transfer), isSubclass(?TYPEVAR2,Object), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-6), sumo(?TYPEVAR2,?object-2) ==> {(beforeOnPath ?object-2 ?object-6 null ?transfer-14)}.

cop(?number-12,is*), case(?number-7,of*), nmod:of(value*,?number-7), amod(value*,approximate*), nsubj(?number-12,value*), sumo(?TYPEVAR0,?number-12), isSubclass(?TYPEVAR1,RealNumber), sumo(?TYPEVAR1,?number-7), isSubclass(?TYPEVAR0,RealNumber) ==> {(approximateValue ?number-7 ?number-12)}.

cop(agent*,is*), case(?process-8,of*), nmod:of(agent*,?process-8), nsubj(agent*,?agent-2), sumo(?TYPEVAR0,?process-8), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Process) ==> {(agent ?process-8 ?agent-2)}.

nmod:in(events*,?area-14), nmod:of(?kind-7,events*), case(?area-14,in*), nmod:for(responsible*,?kind-7), nsubj(responsible*,?agent-2), case(events*,?of-8), cop(responsible*,is*), case(?kind-7,for*), compound(events*,?process-9), sumo(?TYPEVAR2,?agent-2), isSubclass(?TYPEVAR2,Agent), isSubclass(?TYPEVAR4,Process), sumo(?TYPEVAR4,?process-9), isSubclass(?TYPEVAR1,Process), isSubclass(?TYPEVAR3,Process), isSubclass(?TYPEVAR0,GeographicArea), sumo(?TYPEVAR3,?of-8), sumo(?TYPEVAR0,?area-14), sumo(?TYPEVAR1,?kind-7) ==> {(areaOfResponsibility ?agent-2 ?kind-7 ?area-14)}.

auxpass(placed*,is*), nmod:under(placed*,arrest*), nmod:during(placed*,?placing-9), nsubjpass(placed*,?agent-2), case(?placing-9,during*), case(arrest*,under*), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR0,PlacingUnderArrest), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?placing-9) ==> {(arrested ?placing-9 ?agent-2)}.

cop(attribute*,is*), nsubj(attribute*,?entity-2), nmod:of(attribute*,?object-8), case(?object-8,of*), sumo(?TYPEVAR0,?entity-2), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?object-8), isSubclass(?TYPEVAR1,Object) ==> {(attribute ?object-8 ?entity-2)}.

nsubj(believes*,?agent-3), dobj(believes*,?formula-6), isSubclass(?TYPEVAR0,CognitiveAgent), sumo(?TYPEVAR0,?agent-3), sumo(?TYPEVAR1,?formula-6), isSubclass(?TYPEVAR1,Formula) ==> {(believes ?agent-3 ?formula-6)}.

case(?process-8,of*), nsubj(beneficiary*,?agent-2), nmod:of(beneficiary*,?process-8), cop(beneficiary*,is*), sumo(?TYPEVAR0,?process-8), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR0,Process), isSubclass(?TYPEVAR1,Agent) ==> {(benefits ?process-8 ?agent-2)}.

advcl(capable*,doing*), mark(doing*,of*), case(?role-15,as*), nmod:as(doing*,?role-15), nsubj(capable*,?object-2), dobj(doing*,?kind-8), cop(capable*,is*), sumo(?TYPEVAR2,?kind-8), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR0,?role-15), isSubclass(?TYPEVAR0,CaseRole), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR2,Process) ==> {(capability ?kind-8 ?role-15 ?object-2)}.

nsubjpass(carried*,?object-2), nmod:as(carried*,cargo*), nmod:during(cargo*,?shipping-9), auxpass(carried*,is*), case(?shipping-9,during*), case(cargo*,as*), isSubclass(?TYPEVAR1,Shipping), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?shipping-9), sumo(?TYPEVAR0,?object-2) ==> {(cargo ?shipping-9 ?object-2)}.

dobj(causes*,?process-6), nsubj(causes*,?process-2), sumo(?TYPEVAR1,?process-2), sumo(?TYPEVAR0,?process-6), isSubclass(?TYPEVAR0,Process), isSubclass(?TYPEVAR1,Process) ==> {(causes ?process-2 ?process-6)}.

case(?set-7,on*), auxpass(closed*,is*), nmod:on(closed*,?class-9), nmod:on(closed*,?set-7), nsubjpass(closed*,?function-2), isSubclass(?TYPEVAR2,Function), sumo(?TYPEVAR0,?set-7), sumo(?TYPEVAR1,?class-9), isSubclass(?TYPEVAR0,SetOrClass), sumo(?TYPEVAR2,?function-2), isSubclass(?TYPEVAR1,SetOrClass) ==> {(closedOn ?function-2 ?class-9)}.

case(?object-11,of*), nsubj(component*,?object-3), cop(component*,is*), nmod:of(component*,?object-11), sumo(?TYPEVAR0,?object-11), isSubclass(?TYPEVAR0,CorpuscularObject), sumo(?TYPEVAR1,?object-3), isSubclass(?TYPEVAR1,CorpuscularObject) ==> {(component ?object-3 ?object-11)}.

mark(holds*,that*), nmod:of(Probability*,?formula-4), cop(?number-14,is*), nsubj(provided*,Probability*), case(?formula-4,of*), ccomp(provided*,holds*), nsubj(holds*,?formula-9), dobj(holds*,?number-14), sumo(?TYPEVAR2,?formula-9), sumo(?TYPEVAR0,?formula-4), sumo(?TYPEVAR1,?number-14), isSubclass(?TYPEVAR2,Formula), isSubclass(?TYPEVAR1,RealNumber), isSubclass(?TYPEVAR0,Formula) ==> {(conditionalProbability ?formula-4 ?formula-9 ?number-14)}.

dobj(considers*,?formula-6), nsubj(considers*,?agent-3), sumo(?TYPEVAR0,?formula-6), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR0,Formula), isSubclass(?TYPEVAR1,CognitiveAgent) ==> {(considers ?agent-3 ?formula-6)}.

dobj(contains*,?proposition-8), compound(?proposition-8,information*), amod(The*,?content-2), dep(?physical-4,contains*), isSubclass(?TYPEVAR2,ContentBearingPhysical), isSubclass(?TYPEVAR1,ContentBearingPhysical), sumo(?TYPEVAR1,?content-2), sumo(?TYPEVAR2,?physical-4), sumo(?TYPEVAR0,?proposition-8), isSubclass(?TYPEVAR0,Proposition) ==> {(containsInformation ?physical-4 ?proposition-8)}.

auxpass(controlled*,be*), dep(during*,?the-12), nmod:agent(controlled*,agent*), nmod(controlled*,during*), mark(controlled*,to*), nsubj(comes*,?object-2), xcomp(comes*,controlled*), advmod(controlled*,physically*), case(agent*,by*), sumo(?TYPEVAR0,?the-12), isSubclass(?TYPEVAR0,AchievingControl), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR1,Object) ==> {(controlled ?the-12 ?object-2)}.

cop(conveyance*,is*), nsubj(conveyance*,?device-3), nmod:during(conveyance*,?transportation-9), case(?transportation-9,during*), sumo(?TYPEVAR1,?transportation-9), sumo(?TYPEVAR0,?device-3), isSubclass(?TYPEVAR0,TransportationDevice), isSubclass(?TYPEVAR1,Transportation) ==> {(conveyance ?transportation-9 ?device-3)}.

cop(copy*,is*), nmod:of(copy*,?object-9), case(?object-9,of*), nsubj(copy*,?object-2), sumo(?TYPEVAR0,?object-9), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR1,Object) ==> {(copy ?object-2 ?object-9)}.

dobj(decreases*,likelihood*), case(?formula-8,of*), nsubj(decreases*,?formula-2), nmod:of(likelihood*,?formula-8), sumo(?TYPEVAR0,?formula-8), isSubclass(?TYPEVAR1,Formula), isSubclass(?TYPEVAR0,Formula), sumo(?TYPEVAR1,?formula-2) ==> {(decreasesLikelihood ?formula-2 ?formula-8)}.

amod(desires*,?cognitive-2), dep(desires*,?formula-6), compound(desires*,?agent-3), sumo(?TYPEVAR0,?cognitive-2), isSubclass(?TYPEVAR0,CognitiveAgent), isSubclass(?TYPEVAR2,CognitiveAgent), isSubclass(?TYPEVAR1,Formula), sumo(?TYPEVAR1,?formula-6), sumo(?TYPEVAR2,?agent-3) ==> {(desires ?agent-3 ?formula-6)}.

compound:prt(ends*,up*), nmod:at(ends*,?entity-7), nsubj(ends*,?process-2), case(?entity-7,at*), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR1,?process-2), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR0,?entity-7) ==> {(destination ?process-2 ?entity-7)}.

cop(distributive*,is*), nmod:over(distributive*,?function-10), nsubj(distributive*,?function-3), case(?function-10,over*), sumo(?TYPEVAR1,?function-3), isSubclass(?TYPEVAR1,BinaryFunction), sumo(?TYPEVAR0,?function-10), isSubclass(?TYPEVAR0,BinaryFunction) ==> {(distributes ?function-3 ?function-10)}.

; nummod(%*,3*) ==> ; ; {(documentation null null null)}.

case(?set-10,on*), cop(relation*,is*), nmod:on(relation*,?set-10), amod(relation*,equivalence*), nmod:on(relation*,?class-12), nsubj(relation*,?relation-3), sumo(?TYPEVAR1,?class-12), isSubclass(?TYPEVAR0,SetOrClass), sumo(?TYPEVAR2,?relation-3), isSubclass(?TYPEVAR2,BinaryRelation), isSubclass(?TYPEVAR1,SetOrClass), sumo(?TYPEVAR0,?set-10) ==> {(equivalenceRelationOn ?relation-3 ?set-10)}.

nmod:in(located*,?entity-8), cop(located*,is*), case(?entity-8,in*), nsubj(located*,?physical-2), advmod(located*,exactly*), sumo(?TYPEVAR0,?entity-8), sumo(?TYPEVAR1,?physical-2), isSubclass(?TYPEVAR1,Physical), isSubclass(?TYPEVAR0,Entity) ==> {(exactlyLocated ?physical-2 ?entity-8)}.

dobj(experiences*,?process-5), nsubj(experiences*,?agent-2), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?process-5) ==> {(experiencer ?process-5 ?agent-2)}.

dobj(exploits*,?agent-5), nsubj(exploits*,?object-2), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR0,?agent-5), isSubclass(?TYPEVAR1,Object) ==> {(exploits ?object-2 ?agent-5)}.

dobj(faces*,?attribute-6), nsubj(faces*,?object-2), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR0,DirectionalAttribute), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?attribute-6) ==> {(faces ?object-2 ?attribute-6)}.

nsubj(control*,gains*), compound(gains*,?agent-2), dep(during*,?the-10), nmod:over(control*,object*), case(object*,over*), amod(control*,physical*), advmod(control*,during*), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR1,AchievingControl), sumo(?TYPEVAR1,?the-10), isSubclass(?TYPEVAR0,Agent) ==> {(gainsControl ?the-10 ?agent-2)}.

nsubj(greater*,?quantity-2), nmod:than(greater*,?quantity-8), cop(greater*,is*), case(?quantity-8,than*), isSubclass(?TYPEVAR1,Quantity), sumo(?TYPEVAR1,?quantity-8), sumo(?TYPEVAR0,?quantity-2), isSubclass(?TYPEVAR0,Quantity) ==> {(greaterThan ?quantity-2 ?quantity-8)}.

cc(than*,or*), cop(greater*,is*), case(?quantity-11,to*), conj:or(greater*,greater*), conj:or(than*,equal*), nmod:to(greater*,?quantity-11), nsubj(greater*,?quantity-2), nmod:equal(greater*,?quantity-11), nsubj(greater*,?quantity-2), case(?quantity-11,than*), sumo(?TYPEVAR1,?quantity-2), isSubclass(?TYPEVAR0,Quantity), sumo(?TYPEVAR0,?quantity-11), isSubclass(?TYPEVAR1,Quantity) ==> {(greaterThanOrEqualTo ?quantity-2 ?quantity-11)}.

nsubj(has*,?physical-2), dobj(has*,?formula-6), compound(?formula-6,purpose*), sumo(?TYPEVAR1,?formula-6), isSubclass(?TYPEVAR1,Formula), sumo(?TYPEVAR0,?physical-2), isSubclass(?TYPEVAR0,Physical) ==> {(hasPurpose ?physical-2 ?formula-6)}.

nsubj(has*,?physical-2), case(?agent-9,for*), dobj(purpose*,?formula-6), dobj(has*,purpose*), sumo(?TYPEVAR1,?agent-9), isSubclass(?TYPEVAR1,Agent), sumo(?TYPEVAR0,?physical-2), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR2,?formula-6), isSubclass(?TYPEVAR2,Formula) ==> {(hasPurposeForAgent ?physical-2 ?formula-6 ?agent-9)}.

mark(do*,to*), dobj(has*,skill*), acl(skill*,do*), dobj(do*,?kind-8), nsubj(has*,?agent-2), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR0,?kind-8), sumo(?TYPEVAR1,?agent-2) ==> {(hasSkill ?kind-8 ?agent-2)}.

nsubj(holds*,?formula-2), case(?position-7,during*), nmod:during(holds*,?position-7), sumo(?TYPEVAR1,?position-7), isSubclass(?TYPEVAR1,TimePosition), sumo(?TYPEVAR0,?formula-2), isSubclass(?TYPEVAR0,Formula) ==> {(holdsDuring ?position-7 ?formula-2)}.

nsubj(has*,?agent-3), mark(perform*,to*), dobj(has*,right*), acl(right*,perform*), dobj(perform*,?formula-10), isSubclass(?TYPEVAR1,Formula), sumo(?TYPEVAR1,?formula-10), sumo(?TYPEVAR0,?agent-3), isSubclass(?TYPEVAR0,CognitiveAgent) ==> {(holdsRight ?formula-10 ?agent-3)}.

dobj(increases*,likelihood*), case(?formula-8,of*), nsubj(increases*,?formula-2), nmod:of(likelihood*,?formula-8), sumo(?TYPEVAR0,?formula-8), isSubclass(?TYPEVAR0,Formula), isSubclass(?TYPEVAR1,Formula), sumo(?TYPEVAR1,?formula-2) ==> {(increasesLikelihood ?formula-2 ?formula-8)}.

; conj:and(formula*,formula*), cop(independent*,is*), nmod:of(Probability*,formula*), amod(formula*,other*), nmod:of(Probability*,formula*), cc(formula*,and*), case(formula*,of*), nsubj(independent*,Probability*) ==> ; {(independentProbability null null)}.

dobj(starts*,?entity-5), nsubj(starts*,?list-2), sumo(?TYPEVAR0,?entity-5), isSubclass(?TYPEVAR1,List), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?list-2) ==> {(initialList ?list-2 ?entity-5)}.

nsubj(member*,?entity-2), nmod:of(member*,?list-8), case(?list-8,of*), cop(member*,is*), sumo(?TYPEVAR0,?entity-2), sumo(?TYPEVAR1,?list-8), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,List) ==> {(inList ?entity-2 ?list-8)}.

nmod:in(interested*,?entity-8), nsubj(interested*,?agent-3), cop(interested*,is*), case(?entity-8,in*), sumo(?TYPEVAR0,?entity-8), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?agent-3) ==> {(inScopeOfInterest ?agent-3 ?entity-8)}.

nmod:for(instrument*,?process-8), case(?process-8,for*), nsubj(instrument*,?object-2), cop(instrument*,is*), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR0,?process-8), isSubclass(?TYPEVAR0,Process), isSubclass(?TYPEVAR1,Object) ==> {(instrument ?process-8 ?object-2)}.

cop(irreflexive*,is*), case(?set-8,on*), nsubj(irreflexive*,?relation-3), nmod:on(irreflexive*,?class-10), nmod:on(irreflexive*,?set-8), sumo(?TYPEVAR1,?relation-3), sumo(?TYPEVAR0,?set-8), isSubclass(?TYPEVAR2,SetOrClass), isSubclass(?TYPEVAR1,BinaryRelation), sumo(?TYPEVAR2,?class-10), isSubclass(?TYPEVAR0,SetOrClass) ==> {(irreflexiveOn ?relation-3 ?class-10)}.

dobj(knows*,?formula-6), nsubj(knows*,?agent-3), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR0,?formula-6), isSubclass(?TYPEVAR0,Formula) ==> {(knows ?agent-3 ?formula-6)}.

case(?quantity-11,to*), conj:or(less*,less*), nmod:to(less*,?quantity-11), nsubj(less*,?quantity-2), cc(than*,or*), cop(less*,is*), conj:or(than*,equal*), case(?quantity-11,than*), nsubj(less*,?quantity-2), nmod:equal(less*,?quantity-11), sumo(?TYPEVAR1,?quantity-2), isSubclass(?TYPEVAR0,Quantity), isSubclass(?TYPEVAR1,Quantity), sumo(?TYPEVAR0,?quantity-11) ==> {(lessThanOrEqualTo ?quantity-2 ?quantity-11)}.

case(?change-11,during*), nsubj(loses*,?agent-2), nmod:during(loses*,?change-11), dobj(loses*,control*), case(object*,of*), nmod:of(control*,object*), amod(control*,physical*), sumo(?TYPEVAR0,?change-11), sumo(?TYPEVAR1,?agent-2), isSubclass(?TYPEVAR0,ChangeOfControl), isSubclass(?TYPEVAR1,Agent) ==> {(losesControl ?change-11 ?agent-2)}.

nmod:in(performed*,manner*), dep(manner*,?entity-9), nsubjpass(performed*,?process-2), case(manner*,in*), auxpass(performed*,is*), sumo(?TYPEVAR0,?entity-9), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?process-2), isSubclass(?TYPEVAR1,Process) ==> {(manner ?process-2 ?entity-9)}.

nsubj(member*,?object-2), cop(member*,is*), case(?collection-8,of*), nmod:of(member*,?collection-8), sumo(?TYPEVAR0,?object-2), sumo(?TYPEVAR1,?collection-8), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Collection) ==> {(member ?object-2 ?collection-8)}.

nmod:during(member*,?position-14), cop(member*,is*), case(?position-14,during*), nsubj(member*,?object-4), case(?collection-10,of*), nmod:of(member*,?collection-10), isSubclass(?TYPEVAR0,TimePosition), isSubclass(?TYPEVAR2,Collection), isSubclass(?TYPEVAR1,SelfConnectedObject), sumo(?TYPEVAR2,?collection-10), sumo(?TYPEVAR0,?position-14), sumo(?TYPEVAR1,?object-4) ==> {(memberAtTime ?object-4 ?collection-10 ?position-14)}.

dobj(needs*,?physical-6), nsubj(needs*,?agent-3), sumo(?TYPEVAR0,?physical-6), isSubclass(?TYPEVAR0,Physical), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR1,?agent-3) ==> {(needs ?agent-3 ?physical-6)}.

case(?object-6,at*), nmod:at(originates*,?object-6), nsubj(originates*,?process-2), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR0,?object-6), sumo(?TYPEVAR1,?process-2), isSubclass(?TYPEVAR0,Object) ==> {(origin ?process-2 ?object-6)}.

cop(partial*,is*), nmod:on(ordering*,?class-11), case(?set-9,on*), xcomp(partial*,ordering*), nsubj(partial*,?relation-3), nmod:on(ordering*,?set-9), isSubclass(?TYPEVAR2,BinaryRelation), sumo(?TYPEVAR0,?class-11), isSubclass(?TYPEVAR0,SetOrClass), isSubclass(?TYPEVAR1,SetOrClass), sumo(?TYPEVAR1,?set-9), sumo(?TYPEVAR2,?relation-3) ==> {(partialOrderingOn ?relation-3 ?set-9)}.

advmod(located*,partly*), cop(located*,is*), nmod:in(located*,?object-8), case(?object-8,in*), nsubj(located*,?physical-2), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-8), sumo(?TYPEVAR1,?physical-2), isSubclass(?TYPEVAR1,Physical) ==> {(partlyLocated ?physical-2 ?object-8)}.

case(?process-8,of*), nsubj(patient*,?entity-2), nmod:of(patient*,?process-8), cop(patient*,is*), sumo(?TYPEVAR0,?process-8), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?entity-2) ==> {(patient ?process-8 ?entity-2)}.

case(?substance-9,of*), nmod:of(piece*,?substance-9), cop(piece*,is*), nsubj(piece*,?substance-2), isSubclass(?TYPEVAR1,Substance), sumo(?TYPEVAR1,?substance-2), isSubclass(?TYPEVAR0,Substance), sumo(?TYPEVAR0,?substance-9) ==> {(piece ?substance-2 ?substance-9)}.

nsubj(possesses*,?agent-2), dobj(possesses*,?object-5), sumo(?TYPEVAR1,?object-5), isSubclass(?TYPEVAR0,Agent), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR1,Object) ==> {(possesses ?agent-2 ?object-5)}.

case(?formula-10,over*), nsubj(prefers*,?agent-3), dobj(prefers*,?formula-6), nmod:over(prefers*,?formula-10), sumo(?TYPEVAR1,?agent-3), sumo(?TYPEVAR2,?formula-6), isSubclass(?TYPEVAR2,Formula), sumo(?TYPEVAR0,?formula-10), isSubclass(?TYPEVAR1,CognitiveAgent), isSubclass(?TYPEVAR0,Formula) ==> {(prefers ?agent-3 ?formula-6 ?formula-10)}.

amod(part*,proper*), cop(part*,is*), nmod:of(part*,?entity-9), case(?entity-9,of*), nsubj(part*,?object-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR0,?entity-9), isSubclass(?TYPEVAR0,Entity) ==> {(properPart ?object-2 ?entity-9)}.

dobj(has*,attribute*), nsubj(has*,?entity-2), dobj(attribute*,?attribute-7), isSubclass(?TYPEVAR1,Attribute), sumo(?TYPEVAR0,?entity-2), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?attribute-7) ==> {(property ?entity-2 ?attribute-7)}.

cop(reflexive*,is*), nsubj(reflexive*,?relation-3), nmod:on(reflexive*,?class-10), case(?set-8,on*), nmod:on(reflexive*,?set-8), sumo(?TYPEVAR2,?set-8), sumo(?TYPEVAR1,?class-10), sumo(?TYPEVAR0,?relation-3), isSubclass(?TYPEVAR2,SetOrClass), isSubclass(?TYPEVAR0,BinaryRelation), isSubclass(?TYPEVAR1,SetOrClass) ==> {(reflexiveOn ?relation-3 ?class-10)}.

nsubj(resource*,?object-2), nmod:for(resource*,?process-8), cop(resource*,is*), case(?process-8,for*), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR0,?object-2), sumo(?TYPEVAR1,?process-8), isSubclass(?TYPEVAR0,Object) ==> {(resource ?process-8 ?object-2)}.

cop(result*,is*), nmod:of(result*,?process-8), case(?process-8,of*), nsubj(result*,?entity-2), sumo(?TYPEVAR0,?process-8), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,Process) ==> {(result ?process-8 ?entity-2)}.

; nsubj(sub-collection*,?collection-2), cop(sub-collection*,is*), amod(sub-collection*,proper*), case(collection*,of*), nmod:of(sub-collection*,collection*), amod(collection*,other*), sumo(?TYPEVAR0,?collection-2), isSubclass(?TYPEVAR0,Collection) ==> {(subCollection ?collection-2 null)}.

; amod(proposition*,other*), nsubj(sub-proposition*,?proposition-2), cop(sub-proposition*,is*), nmod:of(sub-proposition*,proposition*), case(proposition*,of*), sumo(?TYPEVAR0,?proposition-2), isSubclass(?TYPEVAR0,Proposition) ==> {(subProposition ?proposition-2 null)}.

nmod:of(sublist*,?list-9), nsubj(sublist*,?list-2), cop(sublist*,is*), case(?list-9,of*), sumo(?TYPEVAR1,?list-2), isSubclass(?TYPEVAR0,List), isSubclass(?TYPEVAR1,List), sumo(?TYPEVAR0,?list-9) ==> {(subList ?list-2 ?list-9)}.

nmod:during(exists*,?position-7), nsubj(exists*,?physical-2), case(?position-7,during*), isSubclass(?TYPEVAR0,TimePosition), sumo(?TYPEVAR1,?physical-2), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR0,?position-7) ==> {(time ?physical-2 ?position-7)}.

xcomp(total*,ordering*), nmod:on(ordering*,?set-9), case(?set-9,on*), nsubj(total*,?relation-3), cop(total*,is*), nmod:on(ordering*,?class-11), isSubclass(?TYPEVAR0,SetOrClass), isSubclass(?TYPEVAR1,BinaryRelation), isSubclass(?TYPEVAR2,SetOrClass), sumo(?TYPEVAR0,?set-9), sumo(?TYPEVAR1,?relation-3), sumo(?TYPEVAR2,?class-11) ==> {(totalOrderingOn ?relation-3 ?class-11)}.

nmod:on(trichotomizing*,?class-10), case(?set-8,on*), aux(trichotomizing*,is*), nmod:on(trichotomizing*,?set-8), nsubj(trichotomizing*,?relation-3), isSubclass(?TYPEVAR2,BinaryRelation), isSubclass(?TYPEVAR0,SetOrClass), isSubclass(?TYPEVAR1,SetOrClass), sumo(?TYPEVAR0,?class-10), sumo(?TYPEVAR1,?set-8), sumo(?TYPEVAR2,?relation-3) ==> {(trichotomizingOn ?relation-3 ?set-8)}.

dobj(wants*,?physical-6), nsubj(wants*,?agent-3), sumo(?TYPEVAR0,?physical-6), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR1,CognitiveAgent) ==> {(wants ?agent-3 ?physical-6)}.

nmod:of(task*,type*), dep(type*,?formula-14), case(type*,of*), nsubj(obligates*,?entity-2), dobj(perform*,task*), dobj(obligates*,?agent-6), xcomp(obligates*,perform*), mark(perform*,to*), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR2,CognitiveAgent), isSubclass(?TYPEVAR0,Formula), sumo(?TYPEVAR0,?formula-14), sumo(?TYPEVAR2,?agent-6), isSubclass(?TYPEVAR1,Entity) ==> {(confersObligation ?formula-14 ?entity-2 ?agent-6)}.

xcomp(allows*,perform*), case(type*,of*), dobj(perform*,task*), dobj(allows*,?agent-6), nmod:of(task*,type*), nsubj(allows*,?entity-2), dep(type*,?formula-14), mark(perform*,to*), sumo(?TYPEVAR0,?agent-6), sumo(?TYPEVAR1,?entity-2), sumo(?TYPEVAR2,?formula-14), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR2,Formula), isSubclass(?TYPEVAR0,CognitiveAgent) ==> {(confersRight ?formula-14 ?entity-2 ?agent-6)}.

dobj(crosses*,?entity-5), nsubj(crosses*,?object-2), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?entity-5), sumo(?TYPEVAR1,?object-2) ==> {(crosses ?object-2 ?entity-5)}.

mark(equivalent*,?of-3), acl(?kind-2,equivalent*), dep(equivalent*,?content-4), case(?kind-11,to*), csubj(equivalent*,?bearing-5), nmod:to(equivalent*,?kind-11), cop(equivalent*,is*), isSubclass(?TYPEVAR0,ContentBearingPhysical), sumo(?TYPEVAR2,?content-4), sumo(?TYPEVAR3,?kind-11), isSubclass(?TYPEVAR2,ContentBearingPhysical), sumo(?TYPEVAR1,?kind-2), sumo(?TYPEVAR4,?bearing-5), sumo(?TYPEVAR0,?of-3), isSubclass(?TYPEVAR1,ContentBearingPhysical), isSubclass(?TYPEVAR3,ContentBearingPhysical), isSubclass(?TYPEVAR4,ContentBearingPhysical) ==> {(equivalentContentClass ?of-3 ?kind-11)}.

csubj(equivalent*,?bearing-3), dep(equivalent*,?content-2), nmod:to(equivalent*,?content-10), case(?content-10,to*), cop(equivalent*,is*), sumo(?TYPEVAR0,?bearing-3), isSubclass(?TYPEVAR0,ContentBearingPhysical), sumo(?TYPEVAR2,?content-10), sumo(?TYPEVAR1,?content-2), isSubclass(?TYPEVAR2,ContentBearingPhysical), isSubclass(?TYPEVAR1,ContentBearingPhysical) ==> {(equivalentContentInstance ?content-2 ?content-10)}.

dep(language*,?language-9), nsubjpass(expressed*,?expression-3), case(language*,in*), nmod:in(expressed*,language*), auxpass(expressed*,is*), sumo(?TYPEVAR1,?expression-3), sumo(?TYPEVAR0,?language-9), isSubclass(?TYPEVAR1,LinguisticExpression), isSubclass(?TYPEVAR0,Language) ==> {(expressedInLanguage ?expression-3 ?language-9)}.

mark(perform*,to*), auxpass(obliged*,is*), xcomp(obliged*,perform*), nsubjpass(obliged*,?agent-3), nmod:of(tasks*,type*), case(type*,of*), dobj(perform*,tasks*), dep(tasks*,?formula-12), isSubclass(?TYPEVAR0,CognitiveAgent), isSubclass(?TYPEVAR1,Formula), sumo(?TYPEVAR1,?formula-12), sumo(?TYPEVAR0,?agent-3) ==> {(holdsObligation ?formula-12 ?agent-3)}.

nsubj(inhibits*,?agent-2), dobj(inhibits*,?kind-5), sumo(?TYPEVAR1,?kind-5), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR1,Process), isSubclass(?TYPEVAR0,Agent) ==> {(inhibits ?agent-2 ?kind-5)}.

nsubj(penetrates*,?object-2), dobj(penetrates*,?entity-5), sumo(?TYPEVAR1,?entity-5), isSubclass(?TYPEVAR1,Entity), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-2) ==> {(penetrates ?object-2 ?entity-5)}.

case(?kind-10,of*), nmod:of(precondition*,?kind-10), nsubj(precondition*,?kind-2), cop(precondition*,is*), sumo(?TYPEVAR0,?kind-10), isSubclass(?TYPEVAR0,Process), isSubclass(?TYPEVAR1,Process), sumo(?TYPEVAR1,?kind-2) ==> {(precondition ?kind-2 ?kind-10)}.

dobj(prevents*,occurrence*), nmod:of(occurrence*,?kind-8), case(?kind-8,of*), nsubj(prevents*,?process-2), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?process-2), sumo(?TYPEVAR0,?kind-8), isSubclass(?TYPEVAR1,Process) ==> {(prevents ?process-2 ?kind-8)}.

dobj(expresses*,content*), nsubj(expresses*,?process-2), nmod:of(content*,?proposition-8), case(?proposition-8,of*), sumo(?TYPEVAR1,?proposition-8), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR0,?process-2), isSubclass(?TYPEVAR1,Proposition) ==> {(realization ?process-2 ?proposition-8)}.

case(?entity-9,to*), dobj(includes*,reference*), nmod:to(reference*,?entity-9), nsubj(includes*,?entity-2), sumo(?TYPEVAR1,?entity-2), sumo(?TYPEVAR0,?entity-9), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Entity) ==> {(refers ?entity-2 ?entity-9)}.

dobj(expresses*,?entity-6), nsubj(expresses*,?entity-2), sumo(?TYPEVAR0,?entity-6), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR1,?entity-2) ==> {(represents ?entity-2 ?entity-6)}.

dobj(uses*,?entity-5), mark(stand*,to*), nmod:for(stand*,?entity-11), case(?entity-11,for*), nsubj(uses*,?agent-2), xcomp(uses*,stand*), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?entity-11), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR2,?agent-2), sumo(?TYPEVAR0,?entity-5), isSubclass(?TYPEVAR2,Agent) ==> {(representsForAgent ?entity-5 ?entity-11 ?agent-2)}.

dobj(represents*,?entity-6), case(language*,in*), nsubj(represents*,?expression-3), nmod:in(?entity-6,language*), dep(language*,?language-11), sumo(?TYPEVAR1,?expression-3), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR0,?entity-6), isSubclass(?TYPEVAR2,Language), isSubclass(?TYPEVAR1,LinguisticExpression), sumo(?TYPEVAR2,?language-11) ==> {(representsInLanguage ?expression-3 ?entity-6 ?language-11)}.

dobj(provides*,service*), case(?service-9,during*), nsubj(provides*,?agent-3), nmod:during(provides*,?service-9), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR0,?service-9), isSubclass(?TYPEVAR0,ServiceProcess) ==> {(serviceProvider ?service-9 ?agent-3)}.

case(?service-9,during*), nsubj(receives*,?agent-3), dobj(receives*,service*), nmod:during(receives*,?service-9), sumo(?TYPEVAR0,?service-9), isSubclass(?TYPEVAR1,CognitiveAgent), sumo(?TYPEVAR1,?agent-3), isSubclass(?TYPEVAR0,ServiceProcess) ==> {(serviceRecipient ?service-9 ?agent-3)}.

; cop(sub-plan*,is*), nsubj(sub-plan*,?plan-2), case(plan*,of*), nmod:of(sub-plan*,plan*), amod(plan*,other*), sumo(?TYPEVAR0,?plan-2), isSubclass(?TYPEVAR0,Plan) ==> {(subPlan ?plan-2 null)}.

dobj(subsumes*,content*), amod(subsumes*,?physical-6), dobj(?bearing-5,subsumes*), nmod:of(content*,?kind-12), case(?kind-12,of*), isSubclass(?TYPEVAR2,ContentBearingPhysical), sumo(?TYPEVAR2,?kind-12), isSubclass(?TYPEVAR1,ContentBearingPhysical), sumo(?TYPEVAR0,?physical-6), isSubclass(?TYPEVAR0,ContentBearingPhysical), sumo(?TYPEVAR1,?bearing-5) ==> {(subsumesContentClass ?bearing-5 ?kind-12)}.

amod(subsumes*,?physical-4), dobj(?bearing-3,subsumes*), dobj(subsumes*,content*), amod(The*,?content-2), case(?content-11,of*), nmod:of(content*,?content-11), sumo(?TYPEVAR2,?content-2), isSubclass(?TYPEVAR3,ContentBearingPhysical), sumo(?TYPEVAR1,?bearing-3), isSubclass(?TYPEVAR0,ContentBearingPhysical), isSubclass(?TYPEVAR1,ContentBearingPhysical), sumo(?TYPEVAR0,?physical-4), isSubclass(?TYPEVAR2,ContentBearingPhysical), sumo(?TYPEVAR3,?content-11) ==> {(subsumesContentInstance ?physical-4 ?content-11)}.

nmod:during(transported*,?transportation-7), auxpass(transported*,is*), case(?transportation-7,during*), nsubjpass(transported*,?object-2), sumo(?TYPEVAR0,?transportation-7), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,Transportation), sumo(?TYPEVAR1,?object-2) ==> {(transported ?transportation-7 ?object-2)}.

dobj(traverses*,?object-6), nsubj(traverses*,?object-2), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR0,?object-6), isSubclass(?TYPEVAR1,Object) ==> {(traverses ?object-2 ?object-6)}.

dobj(uses*,?object-5), nsubj(uses*,?agent-2), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?object-5) ==> {(uses ?object-5 ?agent-2)}.

; nsubj(opposite*,attribute*), nmod(opposite*,of*), cop(opposite*,is*) ==> {(contraryAttribute null)}.

nsubj(disjoint*,?set-2), nsubj(disjoint*,?class-4), cop(disjoint*,is*), case(?set-10,from*), nmod:from(disjoint*,?class-12), nmod:from(disjoint*,?set-10), isSubclass(?TYPEVAR3,SetOrClass), isSubclass(?TYPEVAR1,SetOrClass), sumo(?TYPEVAR3,?class-12), sumo(?TYPEVAR1,?class-4), sumo(?TYPEVAR0,?set-2), sumo(?TYPEVAR2,?set-10), isSubclass(?TYPEVAR2,SetOrClass), isSubclass(?TYPEVAR0,SetOrClass) ==> {(disjoint ?set-2 ?set-10)}.

advmod(decomposed*,disjointly*), nmod:into(decomposed*,?class-9), case(?class-9,into*), auxpass(decomposed*,is*), nsubjpass(decomposed*,?class-2), sumo(?TYPEVAR1,?class-2), isSubclass(?TYPEVAR1,Class), sumo(?TYPEVAR0,?class-9), isSubclass(?TYPEVAR0,Class) ==> {(disjointDecomposition ?class-2 ?class-9)}.

; cop(disjoint*,are*), nsubj(disjoint*,relation*), conj:and(relation*,relation*), nsubj(disjoint*,relation*), amod(relation*,other*), cc(relation*,and*) ==> ; {(disjointRelation null null)}.

case(?set-15,of*), nmod:of(instance*,?set-15), nsubj(instance*,argument*), compound(argument*,?integer-5), case(?relation-9,of*), nmod:of(instance*,?class-17), amod(argument*,?positive-4), nmod:of(argument*,?relation-9), acl:relcl(number*,instance*), cop(instance*,is*), sumo(?TYPEVAR0,?set-15), sumo(?TYPEVAR3,?class-17), sumo(?TYPEVAR2,?relation-9), sumo(?TYPEVAR1,?integer-5), isSubclass(?TYPEVAR3,SetOrClass), isSubclass(?TYPEVAR0,SetOrClass), sumo(?TYPEVAR4,?positive-4), isSubclass(?TYPEVAR4,PositiveInteger), isSubclass(?TYPEVAR1,PositiveInteger), isSubclass(?TYPEVAR2,Relation) ==> {(domain ?relation-9 ?positive-4 ?class-17)}.

nmod:of(subclass*,?set-15), acl:relcl(number*,subclass*), compound(argument*,?integer-5), nmod:of(subclass*,?class-17), nmod:of(argument*,?relation-9), amod(argument*,?positive-4), cop(subclass*,is*), case(?relation-9,of*), case(?set-15,of*), nsubj(subclass*,argument*), isSubclass(?TYPEVAR0,SetOrClass), isSubclass(?TYPEVAR2,SetOrClass), sumo(?TYPEVAR4,?positive-4), sumo(?TYPEVAR1,?integer-5), sumo(?TYPEVAR0,?set-15), isSubclass(?TYPEVAR1,PositiveInteger), sumo(?TYPEVAR2,?class-17), isSubclass(?TYPEVAR3,Relation), isSubclass(?TYPEVAR4,PositiveInteger), sumo(?TYPEVAR3,?relation-9) ==> {(domainSubclass ?relation-9 ?integer-5 ?class-17)}.

dobj(entails*,?formula-6), nsubj(entails*,?formula-2), sumo(?TYPEVAR1,?formula-2), sumo(?TYPEVAR0,?formula-6), isSubclass(?TYPEVAR1,Formula), isSubclass(?TYPEVAR0,Formula) ==> {(entails ?formula-2 ?formula-6)}.

nsubj(equal*,?entity-2), nmod:to(equal*,?entity-8), cop(equal*,is*), case(?entity-8,to*), sumo(?TYPEVAR0,?entity-2), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR1,?entity-8) ==> {(equal ?entity-2 ?entity-8)}.

case(?class-8,by*), nmod:agent(covered*,?class-8), auxpass(covered*,is*), nsubjpass(covered*,?class-2), isSubclass(?TYPEVAR0,Class), isSubclass(?TYPEVAR1,Class), sumo(?TYPEVAR0,?class-8), sumo(?TYPEVAR1,?class-2) ==> {(exhaustiveDecomposition ?class-2 ?class-8)}.

cop(instance*,is*), case(?entity-10,of*), amod(instance*,immediate*), nsubj(instance*,?entity-2), nmod:of(instance*,?entity-10), sumo(?TYPEVAR1,?entity-2), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR0,?entity-10), isSubclass(?TYPEVAR0,Entity) ==> {(immediateInstance ?entity-2 ?entity-10)}.

nmod:of(subclass*,?entity-11), case(?entity-11,of*), amod(subclass*,immediate*), cop(subclass*,is*), nsubj(subclass*,?class-4), nsubj(subclass*,?set-2), sumo(?TYPEVAR0,?entity-11), isSubclass(?TYPEVAR2,SetOrClass), sumo(?TYPEVAR2,?set-2), isSubclass(?TYPEVAR1,SetOrClass), sumo(?TYPEVAR1,?class-4), isSubclass(?TYPEVAR0,Entity) ==> {(immediateSubclass ?class-4 ?entity-11)}.

nsubj(instance*,?entity-2), cop(instance*,is*), case(?set-8,of*), nmod:of(instance*,?set-8), nmod:of(instance*,?class-10), sumo(?TYPEVAR2,?class-10), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR2,SetOrClass), sumo(?TYPEVAR0,?entity-2), isSubclass(?TYPEVAR1,SetOrClass), sumo(?TYPEVAR1,?set-8) ==> {(instance ?entity-2 ?set-8)}.

nmod:of(inverse*,?relation-11), nsubj(inverse*,?relation-3), case(?relation-11,of*), cop(inverse*,is*), isSubclass(?TYPEVAR0,BinaryRelation), isSubclass(?TYPEVAR1,BinaryRelation), sumo(?TYPEVAR0,?relation-11), sumo(?TYPEVAR1,?relation-3) ==> {(inverse ?relation-3 ?relation-11)}.

advmod(partitioned*,exhaustively*), auxpass(partitioned*,is*), case(?class-9,into*), nmod:into(partitioned*,?class-9), nsubjpass(partitioned*,?class-2), sumo(?TYPEVAR0,?class-9), sumo(?TYPEVAR1,?class-2), isSubclass(?TYPEVAR1,Class), isSubclass(?TYPEVAR0,Class) ==> {(partition ?class-2 ?class-9)}.

nsubj(instance*,range*), nmod:of(instance*,?set-11), cop(instance*,is*), nmod:of(instance*,?class-13), case(?set-11,of*), nmod:of(range*,?function-5), case(?function-5,of*), sumo(?TYPEVAR0,?set-11), sumo(?TYPEVAR2,?function-5), sumo(?TYPEVAR1,?class-13), isSubclass(?TYPEVAR1,SetOrClass), isSubclass(?TYPEVAR2,Function), isSubclass(?TYPEVAR0,SetOrClass) ==> {(range ?function-5 ?class-13)}.

nsubj(related*,?entity-2), cop(related*,is*), case(?entity-9,to*), advmod(related*,internally*), nmod:to(related*,?entity-9), sumo(?TYPEVAR0,?entity-2), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?entity-9), isSubclass(?TYPEVAR1,Entity) ==> {(relatedInternalConcept ?entity-2 ?entity-9)}.

nmod:of(subattribute*,?attribute-9), cop(subattribute*,is*), nsubj(subattribute*,?attribute-2), case(?attribute-9,of*), isSubclass(?TYPEVAR1,Attribute), sumo(?TYPEVAR0,?attribute-9), isSubclass(?TYPEVAR0,Attribute), sumo(?TYPEVAR1,?attribute-2) ==> {(subAttribute ?attribute-2 ?attribute-9)}.

nmod:of(subclass*,?class-13), cop(subclass*,is*), nmod:of(subclass*,?set-11), case(?set-11,of*), nsubj(subclass*,?class-4), nsubj(subclass*,?set-2), sumo(?TYPEVAR0,?class-13), isSubclass(?TYPEVAR1,SetOrClass), isSubclass(?TYPEVAR3,SetOrClass), sumo(?TYPEVAR2,?class-4), isSubclass(?TYPEVAR2,SetOrClass), isSubclass(?TYPEVAR0,SetOrClass), sumo(?TYPEVAR1,?set-11), sumo(?TYPEVAR3,?set-2) ==> {(subclass ?set-2 ?set-11)}.

nmod:of(subrelation*,?relation-9), case(?relation-9,of*), nsubj(subrelation*,?relation-2), cop(subrelation*,is*), isSubclass(?TYPEVAR0,Relation), sumo(?TYPEVAR1,?relation-2), isSubclass(?TYPEVAR1,Relation), sumo(?TYPEVAR0,?relation-9) ==> {(subrelation ?relation-2 ?relation-9)}.

nsubj(attribute*,?attribute-2), case(?attribute-11,of*), cop(attribute*,is*), amod(attribute*,immediate*), compound(attribute*,successor*), nmod:of(attribute*,?attribute-11), isSubclass(?TYPEVAR1,Attribute), sumo(?TYPEVAR0,?attribute-2), sumo(?TYPEVAR1,?attribute-11), isSubclass(?TYPEVAR0,Attribute) ==> {(successorAttribute ?attribute-2 ?attribute-11)}.

nsubj(attribute*,?attribute-2), case(?attribute-10,of*), nmod:of(attribute*,?attribute-10), cop(attribute*,is*), compound(attribute*,successor*), isSubclass(?TYPEVAR1,Attribute), sumo(?TYPEVAR0,?attribute-2), sumo(?TYPEVAR1,?attribute-10), isSubclass(?TYPEVAR0,Attribute) ==> {(successorAttributeClosure ?attribute-2 ?attribute-10)}.

; cc(%*,&*), appos(argument*,s*), amod(argument*,positive*), dobj(has*,argument*), compound(%*,relation*), conj:&(%*,has*), compound(argument*,integer*) ==> ; {(valence null null)}.

cop(subclasses*,are*), acl(values*,returned*), nsubj(subclasses*,values*), nmod:by(returned*,?function-6), case(?function-6,by*), case(?kind-11,of*), nmod:of(subclasses*,?kind-11), isSubclass(?TYPEVAR0,Function), isSubclass(?TYPEVAR1,SetOrClass), sumo(?TYPEVAR0,?function-6), sumo(?TYPEVAR1,?kind-11) ==> {(rangeSubclass ?function-6 ?kind-11)}.

case(language*,in*), nsubjpass(related*,?language-10), case(concept*,to*), auxpass(related*,is*), acl:relcl(concept*,related*), nmod:of(concept*,?string-6), nmod:to(related*,concept*), nmod:of(concept*,?entity-18), case(?entity-18,of*), case(?string-6,of*), nmod:in(related*,language*), isSubclass(?TYPEVAR0,Language), isSubclass(?TYPEVAR2,Entity), sumo(?TYPEVAR1,?string-6), sumo(?TYPEVAR0,?language-10), sumo(?TYPEVAR2,?entity-18), isSubclass(?TYPEVAR1,SymbolicString) ==> {(relatedExternalConcept ?string-6 ?entity-18 ?language-10)}.

nmod:agent(subsumed*,concept*), acl:relcl(concept*,subsumed*), nmod:in(subsumed*,language*), case(?entity-19,of*), nmod:of(concept*,?string-6), nmod:of(concept*,?entity-19), case(language*,in*), auxpass(subsumed*,is*), nsubjpass(subsumed*,?entity-11), case(concept*,by*), case(?string-6,of*), sumo(?TYPEVAR0,?entity-19), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR1,SymbolicString), sumo(?TYPEVAR1,?string-6), sumo(?TYPEVAR2,?entity-11), isSubclass(?TYPEVAR2,Entity) ==> {(subsumedExternalConcept ?string-6 ?entity-19 ?entity-11)}.

dobj(subsumes*,concept*), nmod:of(concept*,?string-6), nmod:in(subsumes*,language*), case(?entity-17,of*), dep(subsumes*,concept*), nmod:of(concept*,?entity-17), case(?string-6,of*), case(language*,in*), nsubj(subsumes*,?entity-11), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR2,?entity-11), isSubclass(?TYPEVAR2,Entity), sumo(?TYPEVAR0,?string-6), sumo(?TYPEVAR1,?entity-17), isSubclass(?TYPEVAR1,Entity) ==> {(subsumingExternalConcept ?string-6 ?entity-17 ?entity-11)}.

acl:relcl(concept*,synonymous*), case(?entity-19,of*), nmod:with(synonymous*,concept*), nmod:in(synonymous*,language*), nsubj(synonymous*,?entity-11), nmod:of(concept*,?string-6), case(concept*,with*), case(language*,in*), cop(synonymous*,is*), nmod:of(concept*,?entity-19), case(?string-6,of*), sumo(?TYPEVAR1,?entity-11), isSubclass(?TYPEVAR0,Entity), isSubclass(?TYPEVAR2,SymbolicString), sumo(?TYPEVAR0,?entity-19), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR2,?string-6) ==> {(synonymousExternalConcept ?string-6 ?entity-19 ?entity-11)}.

nmod:of(identifier*,?string-7), nsubj(?entity-10,identifier*), amod(identifier*,unique*), cop(?entity-10,is*), case(?string-7,of*), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR0,?string-7), isSubclass(?TYPEVAR0,SymbolicString), sumo(?TYPEVAR1,?entity-10) ==> {(uniqueIdentifier ?string-7 ?entity-10)}.

nsubjpass(connected*,?object-2), auxpass(connected*,is*), case(?object-8,to*), nmod:to(connected*,?object-8), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?object-8), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR1,Object) ==> {(connected ?object-2 ?object-8)}.

nsubj(connects*,?object-2), dobj(connects*,?object-6), conj:and(connects*,?object-10), cc(connects*,and*), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-2), isSubclass(?TYPEVAR2,Object), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-6), sumo(?TYPEVAR2,?object-10) ==> {(connects ?object-2 ?object-6 ?object-10)}.

dobj(meets*,?object-6), nsubj(meets*,?object-2), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-6), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR1,Object) ==> {(meetsSpatially ?object-2 ?object-6)}.

nmod:with(overlaps*,?entity-6), case(?entity-6,with*), nsubj(overlaps*,?object-2), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?entity-6), isSubclass(?TYPEVAR0,Entity) ==> {(overlapsSpatially ?object-2 ?entity-6)}.

nmod:with(overlaps*,?object-8), case(?object-8,with*), advmod(overlaps*,partially*), nsubj(overlaps*,?object-2), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-8), isSubclass(?TYPEVAR1,Object) ==> {(overlapsPartially ?object-2 ?object-8)}.

cop(part*,is*), nsubj(part*,?object-2), amod(part*,superficial*), nmod:of(part*,?entity-9), case(?entity-9,of*), sumo(?TYPEVAR1,?entity-9), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Entity), sumo(?TYPEVAR0,?object-2) ==> {(superficialPart ?object-2 ?entity-9)}.

case(?object-13,of*), nsubj(surface*,?object-4), nmod:of(surface*,?object-13), cop(surface*,is*), isSubclass(?TYPEVAR0,SelfConnectedObject), isSubclass(?TYPEVAR1,SelfConnectedObject), sumo(?TYPEVAR1,?object-4), sumo(?TYPEVAR0,?object-13) ==> {(surface ?object-4 ?object-13)}.

case(?entity-9,of*), amod(part*,interior*), nsubj(part*,?object-2), cop(part*,is*), nmod:of(part*,?entity-9), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?entity-9), isSubclass(?TYPEVAR0,Entity) ==> {(interiorPart ?object-2 ?entity-9)}.

cop(hole*,is*), nmod:in(hole*,?object-10), nsubj(hole*,?hole-2), case(?object-10,in*), sumo(?TYPEVAR1,?hole-2), isSubclass(?TYPEVAR0,SelfConnectedObject), isSubclass(?TYPEVAR1,Hole), sumo(?TYPEVAR0,?object-10) ==> {(hole ?hole-2 ?object-10)}.

dobj(fills*,?hole-5), nsubj(fills*,?object-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-2), sumo(?TYPEVAR0,?hole-5), isSubclass(?TYPEVAR0,Hole) ==> {(fills ?object-2 ?hole-5)}.

advmod(fills*,completely*), dobj(fills*,?entity-6), nsubj(fills*,?object-2), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?entity-6) ==> {(completelyFills ?object-2 ?entity-6)}.

nsubj(fills*,?object-2), advmod(fills*,partially*), dobj(fills*,?hole-6), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR1,?hole-6), isSubclass(?TYPEVAR1,Hole), sumo(?TYPEVAR0,?object-2) ==> {(partiallyFills ?object-2 ?hole-6)}.

advmod(fills*,properly*), dobj(fills*,?hole-6), nsubj(fills*,?object-2), sumo(?TYPEVAR1,?object-2), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR0,?hole-6), isSubclass(?TYPEVAR0,Hole) ==> {(properlyFills ?object-2 ?hole-6)}.

case(?time-4,of*), nmod:of(Duration*,?time-4), cop(?time-8,is*), sumo(?TYPEVAR1,?time-8), isSubclass(?TYPEVAR0,TimeInterval), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR0,?time-4) ==> {(duration ?time-4 ?time-8)}.

nsubj(occurs*,?kind-2), dobj(occurs*,?duration-9), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR1,?duration-9), sumo(?TYPEVAR0,?kind-2), isSubclass(?TYPEVAR1,TimeDuration) ==> {(frequency ?kind-2 ?duration-9)}.

ccomp(starts*,?interval-8), nsubj(starts*,?interval-3), acl:relcl(?time-2,starts*), sumo(?TYPEVAR0,?interval-8), isSubclass(?TYPEVAR0,TimeInterval), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR1,?interval-3), sumo(?TYPEVAR2,?time-2), isSubclass(?TYPEVAR1,TimeInterval) ==> {(starts ?time-2 ?interval-8)}.

acl:relcl(?time-2,finishes*), nsubj(finishes*,?interval-3), xcomp(finishes*,?interval-8), isSubclass(?TYPEVAR2,TimeInterval), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR1,?interval-3), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR0,?time-2), sumo(?TYPEVAR2,?interval-8) ==> {(finishes ?time-2 ?interval-8)}.

case(?point-9,before*), nsubj(happens*,?point-3), nmod:before(happens*,?point-9), isSubclass(?TYPEVAR1,TimePoint), sumo(?TYPEVAR0,?point-9), sumo(?TYPEVAR1,?point-3), isSubclass(?TYPEVAR0,TimePoint) ==> {(before ?point-3 ?point-9)}.

; nmod:at(happen*,point*), case(point*,before*), appos(%*,s*), conj:or(before*,at*), nmod:before(happen*,point*), conj:or(happen*,happen*), amod(point*,other*), nsubj(happen*,?point-3), compound(point*,time*), dobj(happen*,%*), cc(before*,or*), nsubj(happen*,?point-3), sumo(?TYPEVAR0,?point-3), isSubclass(?TYPEVAR0,TimePoint) ==> {(beforeOrEqual ?point-3 null)}.

acl:relcl(?time-3,overlaps*), dobj(overlaps*,?time-7), nsubj(overlaps*,?interval-4), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR2,?interval-4), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR1,?time-7), sumo(?TYPEVAR0,?time-3), isSubclass(?TYPEVAR1,TimeInterval) ==> {(overlapsTemporally ?time-7 ?time-3)}.

dobj(takes*,place*), nsubj(takes*,?interval-3), nmod:during(takes*,?time-9), case(?time-9,during*), acl:relcl(?time-2,takes*), isSubclass(?TYPEVAR0,TimeInterval), isSubclass(?TYPEVAR1,TimeInterval), sumo(?TYPEVAR2,?time-2), sumo(?TYPEVAR0,?interval-3), sumo(?TYPEVAR1,?time-9), isSubclass(?TYPEVAR2,TimeInterval) ==> {(during ?interval-3 ?time-9)}.

nsubj(meets*,?interval-3), xcomp(meets*,?interval-8), acl:relcl(?time-2,meets*), isSubclass(?TYPEVAR1,TimeInterval), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR0,?interval-3), isSubclass(?TYPEVAR0,TimeInterval), sumo(?TYPEVAR2,?time-2), sumo(?TYPEVAR1,?interval-8) ==> {(meetsTemporally ?time-2 ?interval-8)}.

acl:relcl(?time-2,happens*), advmod(happens*,earlier*), nmod:than(earlier*,?time-9), nsubj(happens*,?interval-3), case(?time-9,than*), isSubclass(?TYPEVAR2,TimeInterval), sumo(?TYPEVAR1,?time-9), sumo(?TYPEVAR2,?interval-3), sumo(?TYPEVAR0,?time-2), isSubclass(?TYPEVAR0,TimeInterval), isSubclass(?TYPEVAR1,TimeInterval) ==> {(earlier ?time-2 ?time-9)}.

case(time*,at*), nmod:at(occurs*,time*), case(?physical-11,as*), nmod:as(occurs*,?physical-11), amod(time*,same*), nsubj(occurs*,?physical-2), isSubclass(?TYPEVAR0,Physical), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR0,?physical-11), sumo(?TYPEVAR1,?physical-2) ==> {(cooccur ?physical-2 ?physical-11)}.

case(?physical-4,of*), cop(?day-7,is*), nmod:of(Date*,?physical-4), nsubj(?day-7,Date*), isSubclass(?TYPEVAR1,Day), sumo(?TYPEVAR1,?day-7), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR0,?physical-4) ==> {(date ?physical-4 ?day-7)}.

nsubj(subset*,?set-2), case(?set-9,of*), nmod:of(subset*,?set-9), cop(subset*,is*), isSubclass(?TYPEVAR0,Set), isSubclass(?TYPEVAR1,Set), sumo(?TYPEVAR1,?set-9), sumo(?TYPEVAR0,?set-2) ==> {(subset ?set-2 ?set-9)}.

nsubj(element*,?entity-2), case(?set-8,of*), nmod:of(element*,?set-8), cop(element*,is*), isSubclass(?TYPEVAR1,Set), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR0,?entity-2), sumo(?TYPEVAR1,?set-8) ==> {(element ?entity-2 ?set-8)}.

nmod:of(form*,?object-7), nsubj(?attribute-11,form*), amod(form*,developmental*), case(?object-7,of*), cop(?attribute-11,is*), isSubclass(?TYPEVAR1,DevelopmentalAttribute), sumo(?TYPEVAR0,?object-7), isSubclass(?TYPEVAR0,OrganicObject), sumo(?TYPEVAR1,?attribute-11) ==> {(developmentalForm ?object-7 ?attribute-11)}.

nmod:of(parent*,?organism-9), case(?organism-9,of*), cop(parent*,is*), nsubj(parent*,?organism-3), isSubclass(?TYPEVAR0,Organism), sumo(?TYPEVAR0,?organism-9), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR1,?organism-3) ==> {(parent ?organism-9 ?organism-3)}.

nsubj(mother*,?organism-3), cop(mother*,is*), case(?organism-9,of*), nmod:of(mother*,?organism-9), isSubclass(?TYPEVAR0,Organism), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR0,?organism-3), sumo(?TYPEVAR1,?organism-9) ==> {(mother ?organism-9 ?organism-3)}.

nsubj(father*,?organism-3), nmod:of(father*,?organism-9), cop(father*,is*), case(?organism-9,of*), sumo(?TYPEVAR0,?organism-3), isSubclass(?TYPEVAR1,Organism), sumo(?TYPEVAR1,?organism-9), isSubclass(?TYPEVAR0,Organism) ==> {(father ?organism-9 ?organism-3)}.

nsubj(sibling*,?organism-2), cop(sibling*,is*), case(?organism-9,of*), nmod:of(sibling*,?organism-9), sumo(?TYPEVAR0,?organism-2), sumo(?TYPEVAR1,?organism-9), isSubclass(?TYPEVAR1,Organism), isSubclass(?TYPEVAR0,Organism) ==> {(sibling ?organism-2 ?organism-9)}.

cop(author*,is*), nsubj(author*,?agent-2), nmod:of(author*,?kind-8), case(?kind-8,of*), isSubclass(?TYPEVAR1,ContentBearingObject), sumo(?TYPEVAR1,?kind-8), sumo(?TYPEVAR0,?agent-2), isSubclass(?TYPEVAR0,Agent) ==> {(authors ?agent-2 ?kind-8)}.

case(?kind-8,of*), nmod:of(editor*,?kind-8), cop(editor*,is*), nsubj(editor*,?agent-2), sumo(?TYPEVAR1,?agent-2), sumo(?TYPEVAR0,?kind-8), isSubclass(?TYPEVAR1,Agent), isSubclass(?TYPEVAR0,Text) ==> {(editor ?agent-2 ?kind-8)}.

nsubj(publishes*,?organization-2), dobj(publishes*,?kind-5), sumo(?TYPEVAR0,?organization-2), isSubclass(?TYPEVAR1,Text), sumo(?TYPEVAR1,?kind-5), isSubclass(?TYPEVAR0,Organization) ==> {(publishes ?organization-2 ?kind-5)}.

nmod:of(version*,?kind-10), cop(version*,is*), nsubj(version*,?kind-2), case(?kind-10,of*), sumo(?TYPEVAR0,?kind-10), isSubclass(?TYPEVAR0,Artifact), isSubclass(?TYPEVAR1,Artifact), sumo(?TYPEVAR1,?kind-2) ==> {(version ?kind-2 ?kind-10)}.

cop(component*,is*), nmod:of(component*,?component-11), nsubj(component*,?component-3), case(?component-11,of*), sumo(?TYPEVAR0,?component-11), sumo(?TYPEVAR1,?component-3), isSubclass(?TYPEVAR1,EngineeringComponent), isSubclass(?TYPEVAR0,EngineeringComponent) ==> {(engineeringSubcomponent ?component-3 ?component-11)}.

nmod:to(connected*,?component-10), auxpass(connected*,is*), case(?component-10,to*), nsubjpass(connected*,?component-3), sumo(?TYPEVAR1,?component-3), isSubclass(?TYPEVAR0,EngineeringComponent), isSubclass(?TYPEVAR1,EngineeringComponent), sumo(?TYPEVAR0,?component-10) ==> {(connectedEngineeringComponents ?component-3 ?component-10)}.

; nsubj(related*,organism*), conj:and(organism*,organism*), cop(related*,are*), cc(organism*,and*), amod(organism*,other*), nsubj(related*,organism*) ==> ; {(familyRelation null null)}.

nmod:of(part*,organization*), dep(organization*,?organization-11), cop(part*,is*), nsubj(part*,?organization-2), case(organization*,of*), isSubclass(?TYPEVAR1,Organization), sumo(?TYPEVAR1,?organization-2), sumo(?TYPEVAR0,?organization-11), isSubclass(?TYPEVAR0,Organization) ==> {(subOrganization ?organization-2 ?organization-11)}.

case(?position-8,of*), dobj(holds*,position*), case(?organization-11,in*), nmod:of(position*,?position-8), nsubj(holds*,?human-2), sumo(?TYPEVAR0,?position-8), isSubclass(?TYPEVAR2,Human), sumo(?TYPEVAR1,?organization-11), sumo(?TYPEVAR2,?human-2), isSubclass(?TYPEVAR0,Position), isSubclass(?TYPEVAR1,Organization) ==> {(occupiesPosition ?human-2 ?position-8 ?organization-11)}.

nmod:of(citizen*,?nation-8), nsubj(citizen*,?human-2), case(?nation-8,of*), cop(citizen*,is*), sumo(?TYPEVAR0,?nation-8), sumo(?TYPEVAR1,?human-2), isSubclass(?TYPEVAR1,Human), isSubclass(?TYPEVAR0,Nation) ==> {(citizen ?human-2 ?nation-8)}.

nsubj(subprocess*,?process-2), case(?process-9,of*), cop(subprocess*,is*), nmod:of(subprocess*,?process-9), isSubclass(?TYPEVAR1,Process), isSubclass(?TYPEVAR0,Process), sumo(?TYPEVAR0,?process-2), sumo(?TYPEVAR1,?process-9) ==> {(subProcess ?process-2 ?process-9)}.

; nmod:along(occurs*,which*), nsubj(path*,object*), nsubj(occurs*,motion*), cop(path*,is*), acl:relcl(path*,occurs*), case(which*,along*) ==> ; {(path null null)}.

aux(moving*,are*), nmod:in(Entities*,process*), dobj(moving*,?attribute-11), dep(moving*,Entities*), case(process*,in*), nsubj(moving*,?process-6), isSubclass(?TYPEVAR0,PositionalAttribute), sumo(?TYPEVAR1,?process-6), sumo(?TYPEVAR0,?attribute-11), isSubclass(?TYPEVAR1,Process) ==> {(direction ?process-6 ?attribute-11)}.

dobj(has*,force*), amod(force*,modal*), nmod:of(force*,?attribute-12), case(?attribute-12,of*), acl:relcl(statement*,has*), nsubj(has*,?formula-4), sumo(?TYPEVAR1,?formula-4), sumo(?TYPEVAR0,?attribute-12), isSubclass(?TYPEVAR0,NormativeAttribute), isSubclass(?TYPEVAR1,Formula) ==> {(modalAttribute ?formula-4 ?attribute-12)}.

nmod:of(measure*,?object-5), nsubj(?quantity-9,measure*), cop(?quantity-9,is*), case(?object-5,of*), sumo(?TYPEVAR0,?object-5), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,PhysicalQuantity), sumo(?TYPEVAR1,?quantity-9) ==> {(measure ?object-5 ?quantity-9)}.

; nmod:of(altitude*,?physical-5), case(?physical-5,of*), cop(?physical-9,is*), nsubj(?physical-9,altitude*), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR0,?physical-5), isSubclass(?TYPEVAR0,Physical), sumo(?TYPEVAR1,?physical-9) ==> {(altitude ?physical-5 ?physical-9 null)}.

case(?object-5,of*), cop(?time-8,is*), nsubj(?time-8,age*), nmod:of(age*,?object-5), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,TimeDuration), sumo(?TYPEVAR1,?time-8), sumo(?TYPEVAR0,?object-5) ==> {(age ?object-5 ?time-8)}.

nsubj(?entity-8,length*), nmod:of(length*,?object-5), case(?object-5,of*), cop(?entity-8,is*), isSubclass(?TYPEVAR0,Entity), sumo(?TYPEVAR0,?entity-8), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-5) ==> {(length ?object-5 ?entity-8)}.

cop(?entity-8,is*), nsubj(?entity-8,width*), case(?object-5,of*), nmod:of(width*,?object-5), sumo(?TYPEVAR0,?entity-8), sumo(?TYPEVAR1,?object-5), isSubclass(?TYPEVAR1,Object), isSubclass(?TYPEVAR0,Entity) ==> {(width ?object-5 ?entity-8)}.

nmod:of(diameter*,?circle-5), cop(?measure-9,is*), nsubj(?measure-9,diameter*), case(?circle-5,of*), isSubclass(?TYPEVAR1,LengthMeasure), sumo(?TYPEVAR1,?measure-9), sumo(?TYPEVAR0,?circle-5), isSubclass(?TYPEVAR0,Circle) ==> {(diameter ?circle-5 ?measure-9)}.

cop(?measure-11,is*), nmod:of(height*,?object-7), case(?object-7,of*), nsubj(?measure-11,height*), sumo(?TYPEVAR0,?measure-11), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR1,SelfConnectedObject), sumo(?TYPEVAR1,?object-7) ==> {(height ?object-7 ?measure-11)}.

; case(?measure-13,between*), cop(?measure-13,is*), cc(?physical-5,and*), nmod:between(distance*,?measure-13), isSubclass(?TYPEVAR0,LengthMeasure), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR1,?physical-5), sumo(?TYPEVAR0,?measure-13) ==> {(distance ?physical-5 null ?measure-13)}.

nsubj(larger*,?object-2), case(?object-8,than*), cop(larger*,is*), nmod:than(larger*,?object-8), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-8), isSubclass(?TYPEVAR0,Object), sumo(?TYPEVAR0,?object-2) ==> {(larger ?object-2 ?object-8)}.

nmod:than(smaller*,?object-8), nsubj(smaller*,?object-2), case(?object-8,than*), cop(smaller*,is*), sumo(?TYPEVAR0,?object-8), isSubclass(?TYPEVAR0,Object), isSubclass(?TYPEVAR1,Object), sumo(?TYPEVAR1,?object-2) ==> {(smaller ?object-2 ?object-8)}.

cop(?measure-8,is*), case(?physical-4,of*), nmod:of(Value*,?physical-4), nsubj(?measure-8,Value*), sumo(?TYPEVAR0,?measure-8), isSubclass(?TYPEVAR1,Physical), sumo(?TYPEVAR1,?physical-4), isSubclass(?TYPEVAR0,CurrencyMeasure) ==> {(monetaryValue ?physical-4 ?measure-8)}.

nsubj(element*,?entity-2), case(?function-10,of*), cop(element*,is*), nmod:of(element*,?function-10), compound(element*,identity*), sumo(?TYPEVAR0,?entity-2), isSubclass(?TYPEVAR1,BinaryFunction), sumo(?TYPEVAR1,?function-10), isSubclass(?TYPEVAR0,Entity) ==> {(identityElement ?function-10 ?entity-2)}.

nsubj(links*,?arc-3), dobj(links*,?node-7), cc(?node-7,and*), dobj(links*,?node-12), sumo(?TYPEVAR0,?arc-3), sumo(?TYPEVAR1,?node-7), isSubclass(?TYPEVAR1,GraphNode), isSubclass(?TYPEVAR0,GraphArc), sumo(?TYPEVAR2,?node-12), isSubclass(?TYPEVAR2,GraphNode) ==> {(links ?node-7 ?node-12 ?arc-3)}.

nsubj(subgraph*,?graph-2), case(?graph-9,of*), nmod:of(subgraph*,?graph-9), cop(subgraph*,is*), sumo(?TYPEVAR1,?graph-9), isSubclass(?TYPEVAR1,Graph), sumo(?TYPEVAR0,?graph-2), isSubclass(?TYPEVAR0,Graph) ==> {(subGraph ?graph-2 ?graph-9)}.

cop(?integer-10,is*), case(?path-6,of*), nsubj(?integer-10,length*), nmod:of(length*,?path-6), isSubclass(?TYPEVAR1,GraphPath), isSubclass(?TYPEVAR0,PositiveInteger), sumo(?TYPEVAR0,?integer-10), sumo(?TYPEVAR1,?path-6) ==> {(pathLength ?path-6 ?integer-10)}.

nsubj(?quantity-9,value*), cop(?quantity-9,is*), case(?arc-6,of*), nmod:of(value*,?arc-6), sumo(?TYPEVAR0,?quantity-9), sumo(?TYPEVAR1,?arc-6), isSubclass(?TYPEVAR0,Quantity), isSubclass(?TYPEVAR1,GraphArc) ==> {(arcWeight ?arc-6 ?quantity-9)}.

; nmod:of(conclusion*,argument*), acl:relcl(conclusion*,?proposition-9), case(argument*,of*), cop(?proposition-9,is*), sumo(?TYPEVAR0,?proposition-9), isSubclass(?TYPEVAR0,Proposition) ==> {(conclusion null ?proposition-9)}.

case(?figure-6,of*), cop(?figure-11,is*), nmod:of(size*,?figure-6), nsubj(?figure-11,size*), isSubclass(?TYPEVAR0,GeometricFigure), sumo(?TYPEVAR1,?figure-11), isSubclass(?TYPEVAR1,OneDimensionalFigure), sumo(?TYPEVAR0,?figure-6) ==> {(sideOfFigure ?figure-11 ?figure-6)}.

nsubj(?measure-9,radius*), nmod:of(radius*,?circle-5), cop(?measure-9,is*), case(?circle-5,of*), sumo(?TYPEVAR0,?measure-9), sumo(?TYPEVAR1,?circle-5), isSubclass(?TYPEVAR1,Circle), isSubclass(?TYPEVAR0,LengthMeasure) ==> {(radius ?circle-5 ?measure-9)}.

nmod:of(tangent*,?object-7), cop(?figure-12,is*), nsubj(?figure-12,tangent*), case(?object-7,of*), sumo(?TYPEVAR0,?object-7), isSubclass(?TYPEVAR0,TwoDimensionalObject), sumo(?TYPEVAR1,?figure-12), isSubclass(?TYPEVAR1,OneDimensionalFigure) ==> {(tangent ?figure-12 ?object-7)}.

cop(vertex*,is*), nsubj(vertex*,?point-3), case(?figure-10,of*), nmod:of(vertex*,?figure-10), isSubclass(?TYPEVAR1,GeometricFigure), isSubclass(?TYPEVAR0,GeometricPoint), sumo(?TYPEVAR0,?point-3), sumo(?TYPEVAR1,?figure-10) ==> {(pointOfFigure ?point-3 ?figure-10)}.

dobj(contains*,?object-7), nsubj(contains*,?object-4), sumo(?TYPEVAR0,?object-7), sumo(?TYPEVAR1,?object-4), isSubclass(?TYPEVAR1,SelfConnectedObject), isSubclass(?TYPEVAR0,Object) ==> {(contains ?object-4 ?object-7)}.

cop(part*,is*), amod(part*,geopolitical*), case(?area-12,of*), nsubj(part*,?area-3), nmod:of(part*,?area-12), sumo(?TYPEVAR0,?area-12), isSubclass(?TYPEVAR1,GeopoliticalArea), isSubclass(?TYPEVAR0,GeopoliticalArea), sumo(?TYPEVAR1,?area-3) ==> {(geopoliticalSubdivision ?area-3 ?area-12)}.

nmod:of(home*,?human-5), cop(?residence-9,is*), nsubj(?residence-9,home*), case(?human-5,of*), isSubclass(?TYPEVAR1,PermanentResidence), sumo(?TYPEVAR0,?human-5), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?residence-9) ==> {(home ?human-5 ?residence-9)}.

nmod:between(relation*,?human-8), cc(?human-8,and*), nmod:between(relation*,?human-12), case(?human-8,between*), amod(relation*,legal*), expl(is*,There*), nsubj(is*,relation*), isSubclass(?TYPEVAR0,Human), sumo(?TYPEVAR1,?human-12), sumo(?TYPEVAR0,?human-8), isSubclass(?TYPEVAR1,Human) ==> {(legalRelation ?human-8 ?human-12)}.

nmod:of(part*,organization*), dep(organization*,?organization-11), case(organization*,of*), cop(part*,is*), nsubj(part*,?organization-2), isSubclass(?TYPEVAR0,Organization), sumo(?TYPEVAR0,?organization-11), sumo(?TYPEVAR1,?organization-2), isSubclass(?TYPEVAR1,Organization) ==> {(subOrganization ?organization-2 ?organization-11)}.



